import unittest

class CalculationTestCase_0_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_0_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('1', '1')
class CalculationTestCase_0_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('2', '2')
class CalculationTestCase_0_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('3', '3')
class CalculationTestCase_0_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('4', '4')
class CalculationTestCase_0_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('5', '5')
class CalculationTestCase_0_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('6', '6')
class CalculationTestCase_0_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('7', '7')
class CalculationTestCase_0_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('8', '8')
class CalculationTestCase_0_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('9', '9')
class CalculationTestCase_0_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('10', '10')
class CalculationTestCase_0_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('11', '11')
class CalculationTestCase_0_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('12', '12')
class CalculationTestCase_0_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('13', '13')
class CalculationTestCase_0_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('14', '14')
class CalculationTestCase_0_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('15', '15')
class CalculationTestCase_0_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('16', '16')
class CalculationTestCase_0_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('17', '17')
class CalculationTestCase_0_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('18', '18')
class CalculationTestCase_0_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('19', '19')
class CalculationTestCase_0_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('20', '20')
class CalculationTestCase_0_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('21', '21')
class CalculationTestCase_0_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('22', '22')
class CalculationTestCase_0_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('23', '23')
class CalculationTestCase_0_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('24', '24')
class CalculationTestCase_0_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('25', '25')
class CalculationTestCase_0_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('26', '26')
class CalculationTestCase_0_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('27', '27')
class CalculationTestCase_0_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('28', '28')
class CalculationTestCase_0_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('29', '29')
class CalculationTestCase_0_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('30', '30')
class CalculationTestCase_0_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('31', '31')
class CalculationTestCase_0_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('32', '32')
class CalculationTestCase_0_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('33', '33')
class CalculationTestCase_0_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('34', '34')
class CalculationTestCase_0_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('35', '35')
class CalculationTestCase_0_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('36', '36')
class CalculationTestCase_0_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('37', '37')
class CalculationTestCase_0_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('38', '38')
class CalculationTestCase_0_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('39', '39')
class CalculationTestCase_0_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('40', '40')
class CalculationTestCase_0_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('41', '41')
class CalculationTestCase_0_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('42', '42')
class CalculationTestCase_0_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('43', '43')
class CalculationTestCase_0_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('44', '44')
class CalculationTestCase_0_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('45', '45')
class CalculationTestCase_0_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('46', '46')
class CalculationTestCase_0_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('47', '47')
class CalculationTestCase_0_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('48', '48')
class CalculationTestCase_0_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('49', '49')
class CalculationTestCase_0_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 0 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('50', '50')
class CalculationTestCase_1_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('1', '1')
class CalculationTestCase_1_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('2', '2')
class CalculationTestCase_1_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('3', '3')
class CalculationTestCase_1_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('4', '4')
class CalculationTestCase_1_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('5', '5')
class CalculationTestCase_1_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('6', '6')
class CalculationTestCase_1_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('7', '7')
class CalculationTestCase_1_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('8', '8')
class CalculationTestCase_1_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('9', '9')
class CalculationTestCase_1_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('10', '10')
class CalculationTestCase_1_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('11', '11')
class CalculationTestCase_1_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('12', '12')
class CalculationTestCase_1_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('13', '13')
class CalculationTestCase_1_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('14', '14')
class CalculationTestCase_1_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('15', '15')
class CalculationTestCase_1_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('16', '16')
class CalculationTestCase_1_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('17', '17')
class CalculationTestCase_1_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('18', '18')
class CalculationTestCase_1_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('19', '19')
class CalculationTestCase_1_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('20', '20')
class CalculationTestCase_1_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('21', '21')
class CalculationTestCase_1_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('22', '22')
class CalculationTestCase_1_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('23', '23')
class CalculationTestCase_1_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('24', '24')
class CalculationTestCase_1_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('25', '25')
class CalculationTestCase_1_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('26', '26')
class CalculationTestCase_1_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('27', '27')
class CalculationTestCase_1_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('28', '28')
class CalculationTestCase_1_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('29', '29')
class CalculationTestCase_1_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('30', '30')
class CalculationTestCase_1_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('31', '31')
class CalculationTestCase_1_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('32', '32')
class CalculationTestCase_1_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('33', '33')
class CalculationTestCase_1_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('34', '34')
class CalculationTestCase_1_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('35', '35')
class CalculationTestCase_1_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('36', '36')
class CalculationTestCase_1_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('37', '37')
class CalculationTestCase_1_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('38', '38')
class CalculationTestCase_1_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('39', '39')
class CalculationTestCase_1_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('40', '40')
class CalculationTestCase_1_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('41', '41')
class CalculationTestCase_1_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('42', '42')
class CalculationTestCase_1_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('43', '43')
class CalculationTestCase_1_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('44', '44')
class CalculationTestCase_1_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('45', '45')
class CalculationTestCase_1_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('46', '46')
class CalculationTestCase_1_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('47', '47')
class CalculationTestCase_1_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('48', '48')
class CalculationTestCase_1_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('49', '49')
class CalculationTestCase_1_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('50', '50')
class CalculationTestCase_1_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 1 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('51', '51')
class CalculationTestCase_2_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('2', '2')
class CalculationTestCase_2_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('3', '3')
class CalculationTestCase_2_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('4', '4')
class CalculationTestCase_2_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('5', '5')
class CalculationTestCase_2_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('6', '6')
class CalculationTestCase_2_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('7', '7')
class CalculationTestCase_2_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('8', '8')
class CalculationTestCase_2_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('9', '9')
class CalculationTestCase_2_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('10', '10')
class CalculationTestCase_2_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('11', '11')
class CalculationTestCase_2_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('12', '12')
class CalculationTestCase_2_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('13', '13')
class CalculationTestCase_2_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('14', '14')
class CalculationTestCase_2_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('15', '15')
class CalculationTestCase_2_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('16', '16')
class CalculationTestCase_2_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('17', '17')
class CalculationTestCase_2_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('18', '18')
class CalculationTestCase_2_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('19', '19')
class CalculationTestCase_2_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('20', '20')
class CalculationTestCase_2_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('21', '21')
class CalculationTestCase_2_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('22', '22')
class CalculationTestCase_2_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('23', '23')
class CalculationTestCase_2_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('24', '24')
class CalculationTestCase_2_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('25', '25')
class CalculationTestCase_2_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('26', '26')
class CalculationTestCase_2_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('27', '27')
class CalculationTestCase_2_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('28', '28')
class CalculationTestCase_2_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('29', '29')
class CalculationTestCase_2_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('30', '30')
class CalculationTestCase_2_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('31', '31')
class CalculationTestCase_2_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('32', '32')
class CalculationTestCase_2_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('33', '33')
class CalculationTestCase_2_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('34', '34')
class CalculationTestCase_2_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('35', '35')
class CalculationTestCase_2_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('36', '36')
class CalculationTestCase_2_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('37', '37')
class CalculationTestCase_2_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('38', '38')
class CalculationTestCase_2_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('39', '39')
class CalculationTestCase_2_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('40', '40')
class CalculationTestCase_2_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('41', '41')
class CalculationTestCase_2_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('42', '42')
class CalculationTestCase_2_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('43', '43')
class CalculationTestCase_2_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('44', '44')
class CalculationTestCase_2_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('45', '45')
class CalculationTestCase_2_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('46', '46')
class CalculationTestCase_2_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('47', '47')
class CalculationTestCase_2_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('48', '48')
class CalculationTestCase_2_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('49', '49')
class CalculationTestCase_2_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('50', '50')
class CalculationTestCase_2_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('51', '51')
class CalculationTestCase_2_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 2 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('52', '52')
class CalculationTestCase_3_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('3', '3')
class CalculationTestCase_3_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('4', '4')
class CalculationTestCase_3_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('5', '5')
class CalculationTestCase_3_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('6', '6')
class CalculationTestCase_3_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('7', '7')
class CalculationTestCase_3_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('8', '8')
class CalculationTestCase_3_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('9', '9')
class CalculationTestCase_3_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('10', '10')
class CalculationTestCase_3_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('11', '11')
class CalculationTestCase_3_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('12', '12')
class CalculationTestCase_3_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('13', '13')
class CalculationTestCase_3_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('14', '14')
class CalculationTestCase_3_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('15', '15')
class CalculationTestCase_3_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('16', '16')
class CalculationTestCase_3_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('17', '17')
class CalculationTestCase_3_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('18', '18')
class CalculationTestCase_3_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('19', '19')
class CalculationTestCase_3_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('20', '20')
class CalculationTestCase_3_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('21', '21')
class CalculationTestCase_3_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('22', '22')
class CalculationTestCase_3_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('23', '23')
class CalculationTestCase_3_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('24', '24')
class CalculationTestCase_3_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('25', '25')
class CalculationTestCase_3_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('26', '26')
class CalculationTestCase_3_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('27', '27')
class CalculationTestCase_3_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('28', '28')
class CalculationTestCase_3_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('29', '29')
class CalculationTestCase_3_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('30', '30')
class CalculationTestCase_3_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('31', '31')
class CalculationTestCase_3_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('32', '32')
class CalculationTestCase_3_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('33', '33')
class CalculationTestCase_3_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('34', '34')
class CalculationTestCase_3_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('35', '35')
class CalculationTestCase_3_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('36', '36')
class CalculationTestCase_3_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('37', '37')
class CalculationTestCase_3_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('38', '38')
class CalculationTestCase_3_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('39', '39')
class CalculationTestCase_3_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('40', '40')
class CalculationTestCase_3_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('41', '41')
class CalculationTestCase_3_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('42', '42')
class CalculationTestCase_3_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('43', '43')
class CalculationTestCase_3_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('44', '44')
class CalculationTestCase_3_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('45', '45')
class CalculationTestCase_3_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('46', '46')
class CalculationTestCase_3_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('47', '47')
class CalculationTestCase_3_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('48', '48')
class CalculationTestCase_3_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('49', '49')
class CalculationTestCase_3_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('50', '50')
class CalculationTestCase_3_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('51', '51')
class CalculationTestCase_3_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('52', '52')
class CalculationTestCase_3_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 3 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('53', '53')
class CalculationTestCase_4_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('4', '4')
class CalculationTestCase_4_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('5', '5')
class CalculationTestCase_4_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('6', '6')
class CalculationTestCase_4_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('7', '7')
class CalculationTestCase_4_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('8', '8')
class CalculationTestCase_4_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('9', '9')
class CalculationTestCase_4_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('10', '10')
class CalculationTestCase_4_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('11', '11')
class CalculationTestCase_4_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('12', '12')
class CalculationTestCase_4_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('13', '13')
class CalculationTestCase_4_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('14', '14')
class CalculationTestCase_4_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('15', '15')
class CalculationTestCase_4_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('16', '16')
class CalculationTestCase_4_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('17', '17')
class CalculationTestCase_4_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('18', '18')
class CalculationTestCase_4_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('19', '19')
class CalculationTestCase_4_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('20', '20')
class CalculationTestCase_4_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('21', '21')
class CalculationTestCase_4_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('22', '22')
class CalculationTestCase_4_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('23', '23')
class CalculationTestCase_4_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('24', '24')
class CalculationTestCase_4_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('25', '25')
class CalculationTestCase_4_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('26', '26')
class CalculationTestCase_4_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('27', '27')
class CalculationTestCase_4_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('28', '28')
class CalculationTestCase_4_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('29', '29')
class CalculationTestCase_4_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('30', '30')
class CalculationTestCase_4_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('31', '31')
class CalculationTestCase_4_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('32', '32')
class CalculationTestCase_4_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('33', '33')
class CalculationTestCase_4_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('34', '34')
class CalculationTestCase_4_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('35', '35')
class CalculationTestCase_4_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('36', '36')
class CalculationTestCase_4_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('37', '37')
class CalculationTestCase_4_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('38', '38')
class CalculationTestCase_4_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('39', '39')
class CalculationTestCase_4_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('40', '40')
class CalculationTestCase_4_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('41', '41')
class CalculationTestCase_4_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('42', '42')
class CalculationTestCase_4_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('43', '43')
class CalculationTestCase_4_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('44', '44')
class CalculationTestCase_4_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('45', '45')
class CalculationTestCase_4_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('46', '46')
class CalculationTestCase_4_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('47', '47')
class CalculationTestCase_4_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('48', '48')
class CalculationTestCase_4_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('49', '49')
class CalculationTestCase_4_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('50', '50')
class CalculationTestCase_4_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('51', '51')
class CalculationTestCase_4_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('52', '52')
class CalculationTestCase_4_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('53', '53')
class CalculationTestCase_4_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 4 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('54', '54')
class CalculationTestCase_5_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('5', '5')
class CalculationTestCase_5_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('6', '6')
class CalculationTestCase_5_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('7', '7')
class CalculationTestCase_5_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('8', '8')
class CalculationTestCase_5_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('9', '9')
class CalculationTestCase_5_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('10', '10')
class CalculationTestCase_5_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('11', '11')
class CalculationTestCase_5_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('12', '12')
class CalculationTestCase_5_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('13', '13')
class CalculationTestCase_5_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('14', '14')
class CalculationTestCase_5_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('15', '15')
class CalculationTestCase_5_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('16', '16')
class CalculationTestCase_5_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('17', '17')
class CalculationTestCase_5_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('18', '18')
class CalculationTestCase_5_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('19', '19')
class CalculationTestCase_5_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('20', '20')
class CalculationTestCase_5_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('21', '21')
class CalculationTestCase_5_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('22', '22')
class CalculationTestCase_5_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('23', '23')
class CalculationTestCase_5_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('24', '24')
class CalculationTestCase_5_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('25', '25')
class CalculationTestCase_5_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('26', '26')
class CalculationTestCase_5_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('27', '27')
class CalculationTestCase_5_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('28', '28')
class CalculationTestCase_5_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('29', '29')
class CalculationTestCase_5_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('30', '30')
class CalculationTestCase_5_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('31', '31')
class CalculationTestCase_5_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('32', '32')
class CalculationTestCase_5_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('33', '33')
class CalculationTestCase_5_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('34', '34')
class CalculationTestCase_5_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('35', '35')
class CalculationTestCase_5_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('36', '36')
class CalculationTestCase_5_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('37', '37')
class CalculationTestCase_5_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('38', '38')
class CalculationTestCase_5_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('39', '39')
class CalculationTestCase_5_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('40', '40')
class CalculationTestCase_5_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('41', '41')
class CalculationTestCase_5_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('42', '42')
class CalculationTestCase_5_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('43', '43')
class CalculationTestCase_5_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('44', '44')
class CalculationTestCase_5_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('45', '45')
class CalculationTestCase_5_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('46', '46')
class CalculationTestCase_5_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('47', '47')
class CalculationTestCase_5_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('48', '48')
class CalculationTestCase_5_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('49', '49')
class CalculationTestCase_5_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('50', '50')
class CalculationTestCase_5_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('51', '51')
class CalculationTestCase_5_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('52', '52')
class CalculationTestCase_5_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('53', '53')
class CalculationTestCase_5_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('54', '54')
class CalculationTestCase_5_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 5 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('55', '55')
class CalculationTestCase_6_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('6', '6')
class CalculationTestCase_6_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('7', '7')
class CalculationTestCase_6_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('8', '8')
class CalculationTestCase_6_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('9', '9')
class CalculationTestCase_6_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('10', '10')
class CalculationTestCase_6_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('11', '11')
class CalculationTestCase_6_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('12', '12')
class CalculationTestCase_6_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('13', '13')
class CalculationTestCase_6_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('14', '14')
class CalculationTestCase_6_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('15', '15')
class CalculationTestCase_6_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('16', '16')
class CalculationTestCase_6_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('17', '17')
class CalculationTestCase_6_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('18', '18')
class CalculationTestCase_6_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('19', '19')
class CalculationTestCase_6_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('20', '20')
class CalculationTestCase_6_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('21', '21')
class CalculationTestCase_6_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('22', '22')
class CalculationTestCase_6_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('23', '23')
class CalculationTestCase_6_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('24', '24')
class CalculationTestCase_6_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('25', '25')
class CalculationTestCase_6_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('26', '26')
class CalculationTestCase_6_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('27', '27')
class CalculationTestCase_6_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('28', '28')
class CalculationTestCase_6_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('29', '29')
class CalculationTestCase_6_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('30', '30')
class CalculationTestCase_6_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('31', '31')
class CalculationTestCase_6_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('32', '32')
class CalculationTestCase_6_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('33', '33')
class CalculationTestCase_6_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('34', '34')
class CalculationTestCase_6_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('35', '35')
class CalculationTestCase_6_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('36', '36')
class CalculationTestCase_6_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('37', '37')
class CalculationTestCase_6_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('38', '38')
class CalculationTestCase_6_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('39', '39')
class CalculationTestCase_6_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('40', '40')
class CalculationTestCase_6_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('41', '41')
class CalculationTestCase_6_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('42', '42')
class CalculationTestCase_6_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('43', '43')
class CalculationTestCase_6_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('44', '44')
class CalculationTestCase_6_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('45', '45')
class CalculationTestCase_6_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('46', '46')
class CalculationTestCase_6_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('47', '47')
class CalculationTestCase_6_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('48', '48')
class CalculationTestCase_6_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('49', '49')
class CalculationTestCase_6_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('50', '50')
class CalculationTestCase_6_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('51', '51')
class CalculationTestCase_6_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('52', '52')
class CalculationTestCase_6_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('53', '53')
class CalculationTestCase_6_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('54', '54')
class CalculationTestCase_6_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('55', '55')
class CalculationTestCase_6_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 6 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('56', '56')
class CalculationTestCase_7_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('7', '7')
class CalculationTestCase_7_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('8', '8')
class CalculationTestCase_7_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('9', '9')
class CalculationTestCase_7_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('10', '10')
class CalculationTestCase_7_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('11', '11')
class CalculationTestCase_7_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('12', '12')
class CalculationTestCase_7_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('13', '13')
class CalculationTestCase_7_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('14', '14')
class CalculationTestCase_7_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('15', '15')
class CalculationTestCase_7_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('16', '16')
class CalculationTestCase_7_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('17', '17')
class CalculationTestCase_7_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('18', '18')
class CalculationTestCase_7_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('19', '19')
class CalculationTestCase_7_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('20', '20')
class CalculationTestCase_7_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('21', '21')
class CalculationTestCase_7_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('22', '22')
class CalculationTestCase_7_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('23', '23')
class CalculationTestCase_7_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('24', '24')
class CalculationTestCase_7_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('25', '25')
class CalculationTestCase_7_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('26', '26')
class CalculationTestCase_7_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('27', '27')
class CalculationTestCase_7_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('28', '28')
class CalculationTestCase_7_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('29', '29')
class CalculationTestCase_7_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('30', '30')
class CalculationTestCase_7_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('31', '31')
class CalculationTestCase_7_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('32', '32')
class CalculationTestCase_7_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('33', '33')
class CalculationTestCase_7_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('34', '34')
class CalculationTestCase_7_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('35', '35')
class CalculationTestCase_7_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('36', '36')
class CalculationTestCase_7_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('37', '37')
class CalculationTestCase_7_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('38', '38')
class CalculationTestCase_7_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('39', '39')
class CalculationTestCase_7_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('40', '40')
class CalculationTestCase_7_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('41', '41')
class CalculationTestCase_7_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('42', '42')
class CalculationTestCase_7_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('43', '43')
class CalculationTestCase_7_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('44', '44')
class CalculationTestCase_7_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('45', '45')
class CalculationTestCase_7_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('46', '46')
class CalculationTestCase_7_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('47', '47')
class CalculationTestCase_7_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('48', '48')
class CalculationTestCase_7_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('49', '49')
class CalculationTestCase_7_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('50', '50')
class CalculationTestCase_7_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('51', '51')
class CalculationTestCase_7_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('52', '52')
class CalculationTestCase_7_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('53', '53')
class CalculationTestCase_7_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('54', '54')
class CalculationTestCase_7_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('55', '55')
class CalculationTestCase_7_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('56', '56')
class CalculationTestCase_7_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 7 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('57', '57')
class CalculationTestCase_8_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('8', '8')
class CalculationTestCase_8_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('9', '9')
class CalculationTestCase_8_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('10', '10')
class CalculationTestCase_8_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('11', '11')
class CalculationTestCase_8_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('12', '12')
class CalculationTestCase_8_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('13', '13')
class CalculationTestCase_8_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('14', '14')
class CalculationTestCase_8_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('15', '15')
class CalculationTestCase_8_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('16', '16')
class CalculationTestCase_8_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('17', '17')
class CalculationTestCase_8_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('18', '18')
class CalculationTestCase_8_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('19', '19')
class CalculationTestCase_8_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('20', '20')
class CalculationTestCase_8_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('21', '21')
class CalculationTestCase_8_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('22', '22')
class CalculationTestCase_8_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('23', '23')
class CalculationTestCase_8_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('24', '24')
class CalculationTestCase_8_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('25', '25')
class CalculationTestCase_8_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('26', '26')
class CalculationTestCase_8_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('27', '27')
class CalculationTestCase_8_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('28', '28')
class CalculationTestCase_8_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('29', '29')
class CalculationTestCase_8_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('30', '30')
class CalculationTestCase_8_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('31', '31')
class CalculationTestCase_8_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('32', '32')
class CalculationTestCase_8_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('33', '33')
class CalculationTestCase_8_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('34', '34')
class CalculationTestCase_8_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('35', '35')
class CalculationTestCase_8_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('36', '36')
class CalculationTestCase_8_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('37', '37')
class CalculationTestCase_8_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('38', '38')
class CalculationTestCase_8_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('39', '39')
class CalculationTestCase_8_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('40', '40')
class CalculationTestCase_8_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('41', '41')
class CalculationTestCase_8_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('42', '42')
class CalculationTestCase_8_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('43', '43')
class CalculationTestCase_8_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('44', '44')
class CalculationTestCase_8_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('45', '45')
class CalculationTestCase_8_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('46', '46')
class CalculationTestCase_8_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('47', '47')
class CalculationTestCase_8_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('48', '48')
class CalculationTestCase_8_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('49', '49')
class CalculationTestCase_8_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('50', '50')
class CalculationTestCase_8_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('51', '51')
class CalculationTestCase_8_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('52', '52')
class CalculationTestCase_8_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('53', '53')
class CalculationTestCase_8_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('54', '54')
class CalculationTestCase_8_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('55', '55')
class CalculationTestCase_8_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('56', '56')
class CalculationTestCase_8_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('57', '57')
class CalculationTestCase_8_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 8 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('58', '58')
class CalculationTestCase_9_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('9', '9')
class CalculationTestCase_9_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('10', '10')
class CalculationTestCase_9_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('11', '11')
class CalculationTestCase_9_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('12', '12')
class CalculationTestCase_9_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('13', '13')
class CalculationTestCase_9_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('14', '14')
class CalculationTestCase_9_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('15', '15')
class CalculationTestCase_9_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('16', '16')
class CalculationTestCase_9_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('17', '17')
class CalculationTestCase_9_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('18', '18')
class CalculationTestCase_9_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('19', '19')
class CalculationTestCase_9_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('20', '20')
class CalculationTestCase_9_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('21', '21')
class CalculationTestCase_9_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('22', '22')
class CalculationTestCase_9_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('23', '23')
class CalculationTestCase_9_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('24', '24')
class CalculationTestCase_9_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('25', '25')
class CalculationTestCase_9_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('26', '26')
class CalculationTestCase_9_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('27', '27')
class CalculationTestCase_9_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('28', '28')
class CalculationTestCase_9_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('29', '29')
class CalculationTestCase_9_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('30', '30')
class CalculationTestCase_9_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('31', '31')
class CalculationTestCase_9_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('32', '32')
class CalculationTestCase_9_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('33', '33')
class CalculationTestCase_9_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('34', '34')
class CalculationTestCase_9_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('35', '35')
class CalculationTestCase_9_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('36', '36')
class CalculationTestCase_9_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('37', '37')
class CalculationTestCase_9_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('38', '38')
class CalculationTestCase_9_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('39', '39')
class CalculationTestCase_9_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('40', '40')
class CalculationTestCase_9_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('41', '41')
class CalculationTestCase_9_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('42', '42')
class CalculationTestCase_9_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('43', '43')
class CalculationTestCase_9_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('44', '44')
class CalculationTestCase_9_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('45', '45')
class CalculationTestCase_9_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('46', '46')
class CalculationTestCase_9_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('47', '47')
class CalculationTestCase_9_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('48', '48')
class CalculationTestCase_9_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('49', '49')
class CalculationTestCase_9_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('50', '50')
class CalculationTestCase_9_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('51', '51')
class CalculationTestCase_9_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('52', '52')
class CalculationTestCase_9_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('53', '53')
class CalculationTestCase_9_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('54', '54')
class CalculationTestCase_9_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('55', '55')
class CalculationTestCase_9_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('56', '56')
class CalculationTestCase_9_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('57', '57')
class CalculationTestCase_9_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('58', '58')
class CalculationTestCase_9_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 9 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('59', '59')
class CalculationTestCase_10_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('10', '10')
class CalculationTestCase_10_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('11', '11')
class CalculationTestCase_10_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('12', '12')
class CalculationTestCase_10_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('13', '13')
class CalculationTestCase_10_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('14', '14')
class CalculationTestCase_10_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('15', '15')
class CalculationTestCase_10_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('16', '16')
class CalculationTestCase_10_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('17', '17')
class CalculationTestCase_10_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('18', '18')
class CalculationTestCase_10_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('19', '19')
class CalculationTestCase_10_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('20', '20')
class CalculationTestCase_10_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('21', '21')
class CalculationTestCase_10_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('22', '22')
class CalculationTestCase_10_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('23', '23')
class CalculationTestCase_10_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('24', '24')
class CalculationTestCase_10_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('25', '25')
class CalculationTestCase_10_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('26', '26')
class CalculationTestCase_10_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('27', '27')
class CalculationTestCase_10_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('28', '28')
class CalculationTestCase_10_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('29', '29')
class CalculationTestCase_10_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('30', '30')
class CalculationTestCase_10_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('31', '31')
class CalculationTestCase_10_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('32', '32')
class CalculationTestCase_10_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('33', '33')
class CalculationTestCase_10_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('34', '34')
class CalculationTestCase_10_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('35', '35')
class CalculationTestCase_10_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('36', '36')
class CalculationTestCase_10_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('37', '37')
class CalculationTestCase_10_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('38', '38')
class CalculationTestCase_10_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('39', '39')
class CalculationTestCase_10_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('40', '40')
class CalculationTestCase_10_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('41', '41')
class CalculationTestCase_10_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('42', '42')
class CalculationTestCase_10_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('43', '43')
class CalculationTestCase_10_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('44', '44')
class CalculationTestCase_10_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('45', '45')
class CalculationTestCase_10_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('46', '46')
class CalculationTestCase_10_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('47', '47')
class CalculationTestCase_10_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('48', '48')
class CalculationTestCase_10_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('49', '49')
class CalculationTestCase_10_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('50', '50')
class CalculationTestCase_10_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('51', '51')
class CalculationTestCase_10_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('52', '52')
class CalculationTestCase_10_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('53', '53')
class CalculationTestCase_10_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('54', '54')
class CalculationTestCase_10_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('55', '55')
class CalculationTestCase_10_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('56', '56')
class CalculationTestCase_10_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('57', '57')
class CalculationTestCase_10_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('58', '58')
class CalculationTestCase_10_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('59', '59')
class CalculationTestCase_10_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 10 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('60', '60')
class CalculationTestCase_11_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('11', '11')
class CalculationTestCase_11_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('12', '12')
class CalculationTestCase_11_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('13', '13')
class CalculationTestCase_11_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('14', '14')
class CalculationTestCase_11_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('15', '15')
class CalculationTestCase_11_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('16', '16')
class CalculationTestCase_11_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('17', '17')
class CalculationTestCase_11_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('18', '18')
class CalculationTestCase_11_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('19', '19')
class CalculationTestCase_11_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('20', '20')
class CalculationTestCase_11_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('21', '21')
class CalculationTestCase_11_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('22', '22')
class CalculationTestCase_11_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('23', '23')
class CalculationTestCase_11_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('24', '24')
class CalculationTestCase_11_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('25', '25')
class CalculationTestCase_11_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('26', '26')
class CalculationTestCase_11_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('27', '27')
class CalculationTestCase_11_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('28', '28')
class CalculationTestCase_11_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('29', '29')
class CalculationTestCase_11_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('30', '30')
class CalculationTestCase_11_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('31', '31')
class CalculationTestCase_11_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('32', '32')
class CalculationTestCase_11_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('33', '33')
class CalculationTestCase_11_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('34', '34')
class CalculationTestCase_11_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('35', '35')
class CalculationTestCase_11_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('36', '36')
class CalculationTestCase_11_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('37', '37')
class CalculationTestCase_11_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('38', '38')
class CalculationTestCase_11_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('39', '39')
class CalculationTestCase_11_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('40', '40')
class CalculationTestCase_11_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('41', '41')
class CalculationTestCase_11_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('42', '42')
class CalculationTestCase_11_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('43', '43')
class CalculationTestCase_11_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('44', '44')
class CalculationTestCase_11_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('45', '45')
class CalculationTestCase_11_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('46', '46')
class CalculationTestCase_11_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('47', '47')
class CalculationTestCase_11_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('48', '48')
class CalculationTestCase_11_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('49', '49')
class CalculationTestCase_11_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('50', '50')
class CalculationTestCase_11_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('51', '51')
class CalculationTestCase_11_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('52', '52')
class CalculationTestCase_11_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('53', '53')
class CalculationTestCase_11_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('54', '54')
class CalculationTestCase_11_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('55', '55')
class CalculationTestCase_11_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('56', '56')
class CalculationTestCase_11_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('57', '57')
class CalculationTestCase_11_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('58', '58')
class CalculationTestCase_11_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('59', '59')
class CalculationTestCase_11_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('60', '60')
class CalculationTestCase_11_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 11 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('61', '61')
class CalculationTestCase_12_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('12', '12')
class CalculationTestCase_12_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('13', '13')
class CalculationTestCase_12_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('14', '14')
class CalculationTestCase_12_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('15', '15')
class CalculationTestCase_12_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('16', '16')
class CalculationTestCase_12_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('17', '17')
class CalculationTestCase_12_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('18', '18')
class CalculationTestCase_12_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('19', '19')
class CalculationTestCase_12_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('20', '20')
class CalculationTestCase_12_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('21', '21')
class CalculationTestCase_12_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('22', '22')
class CalculationTestCase_12_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('23', '23')
class CalculationTestCase_12_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('24', '24')
class CalculationTestCase_12_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('25', '25')
class CalculationTestCase_12_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('26', '26')
class CalculationTestCase_12_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('27', '27')
class CalculationTestCase_12_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('28', '28')
class CalculationTestCase_12_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('29', '29')
class CalculationTestCase_12_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('30', '30')
class CalculationTestCase_12_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('31', '31')
class CalculationTestCase_12_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('32', '32')
class CalculationTestCase_12_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('33', '33')
class CalculationTestCase_12_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('34', '34')
class CalculationTestCase_12_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('35', '35')
class CalculationTestCase_12_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('36', '36')
class CalculationTestCase_12_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('37', '37')
class CalculationTestCase_12_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('38', '38')
class CalculationTestCase_12_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('39', '39')
class CalculationTestCase_12_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('40', '40')
class CalculationTestCase_12_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('41', '41')
class CalculationTestCase_12_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('42', '42')
class CalculationTestCase_12_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('43', '43')
class CalculationTestCase_12_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('44', '44')
class CalculationTestCase_12_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('45', '45')
class CalculationTestCase_12_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('46', '46')
class CalculationTestCase_12_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('47', '47')
class CalculationTestCase_12_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('48', '48')
class CalculationTestCase_12_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('49', '49')
class CalculationTestCase_12_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('50', '50')
class CalculationTestCase_12_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('51', '51')
class CalculationTestCase_12_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('52', '52')
class CalculationTestCase_12_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('53', '53')
class CalculationTestCase_12_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('54', '54')
class CalculationTestCase_12_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('55', '55')
class CalculationTestCase_12_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('56', '56')
class CalculationTestCase_12_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('57', '57')
class CalculationTestCase_12_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('58', '58')
class CalculationTestCase_12_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('59', '59')
class CalculationTestCase_12_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('60', '60')
class CalculationTestCase_12_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('61', '61')
class CalculationTestCase_12_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 12 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('62', '62')
class CalculationTestCase_13_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('13', '13')
class CalculationTestCase_13_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('14', '14')
class CalculationTestCase_13_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('15', '15')
class CalculationTestCase_13_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('16', '16')
class CalculationTestCase_13_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('17', '17')
class CalculationTestCase_13_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('18', '18')
class CalculationTestCase_13_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('19', '19')
class CalculationTestCase_13_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('20', '20')
class CalculationTestCase_13_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('21', '21')
class CalculationTestCase_13_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('22', '22')
class CalculationTestCase_13_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('23', '23')
class CalculationTestCase_13_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('24', '24')
class CalculationTestCase_13_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('25', '25')
class CalculationTestCase_13_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('26', '26')
class CalculationTestCase_13_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('27', '27')
class CalculationTestCase_13_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('28', '28')
class CalculationTestCase_13_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('29', '29')
class CalculationTestCase_13_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('30', '30')
class CalculationTestCase_13_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('31', '31')
class CalculationTestCase_13_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('32', '32')
class CalculationTestCase_13_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('33', '33')
class CalculationTestCase_13_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('34', '34')
class CalculationTestCase_13_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('35', '35')
class CalculationTestCase_13_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('36', '36')
class CalculationTestCase_13_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('37', '37')
class CalculationTestCase_13_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('38', '38')
class CalculationTestCase_13_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('39', '39')
class CalculationTestCase_13_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('40', '40')
class CalculationTestCase_13_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('41', '41')
class CalculationTestCase_13_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('42', '42')
class CalculationTestCase_13_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('43', '43')
class CalculationTestCase_13_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('44', '44')
class CalculationTestCase_13_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('45', '45')
class CalculationTestCase_13_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('46', '46')
class CalculationTestCase_13_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('47', '47')
class CalculationTestCase_13_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('48', '48')
class CalculationTestCase_13_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('49', '49')
class CalculationTestCase_13_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('50', '50')
class CalculationTestCase_13_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('51', '51')
class CalculationTestCase_13_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('52', '52')
class CalculationTestCase_13_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('53', '53')
class CalculationTestCase_13_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('54', '54')
class CalculationTestCase_13_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('55', '55')
class CalculationTestCase_13_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('56', '56')
class CalculationTestCase_13_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('57', '57')
class CalculationTestCase_13_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('58', '58')
class CalculationTestCase_13_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('59', '59')
class CalculationTestCase_13_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('60', '60')
class CalculationTestCase_13_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('61', '61')
class CalculationTestCase_13_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('62', '62')
class CalculationTestCase_13_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 13 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('63', '63')
class CalculationTestCase_14_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('14', '14')
class CalculationTestCase_14_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('15', '15')
class CalculationTestCase_14_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('16', '16')
class CalculationTestCase_14_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('17', '17')
class CalculationTestCase_14_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('18', '18')
class CalculationTestCase_14_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('19', '19')
class CalculationTestCase_14_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('20', '20')
class CalculationTestCase_14_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('21', '21')
class CalculationTestCase_14_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('22', '22')
class CalculationTestCase_14_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('23', '23')
class CalculationTestCase_14_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('24', '24')
class CalculationTestCase_14_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('25', '25')
class CalculationTestCase_14_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('26', '26')
class CalculationTestCase_14_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('27', '27')
class CalculationTestCase_14_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('28', '28')
class CalculationTestCase_14_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('29', '29')
class CalculationTestCase_14_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('30', '30')
class CalculationTestCase_14_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('31', '31')
class CalculationTestCase_14_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('32', '32')
class CalculationTestCase_14_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('33', '33')
class CalculationTestCase_14_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('34', '34')
class CalculationTestCase_14_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('35', '35')
class CalculationTestCase_14_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('36', '36')
class CalculationTestCase_14_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('37', '37')
class CalculationTestCase_14_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('38', '38')
class CalculationTestCase_14_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('39', '39')
class CalculationTestCase_14_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('40', '40')
class CalculationTestCase_14_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('41', '41')
class CalculationTestCase_14_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('42', '42')
class CalculationTestCase_14_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('43', '43')
class CalculationTestCase_14_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('44', '44')
class CalculationTestCase_14_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('45', '45')
class CalculationTestCase_14_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('46', '46')
class CalculationTestCase_14_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('47', '47')
class CalculationTestCase_14_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('48', '48')
class CalculationTestCase_14_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('49', '49')
class CalculationTestCase_14_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('50', '50')
class CalculationTestCase_14_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('51', '51')
class CalculationTestCase_14_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('52', '52')
class CalculationTestCase_14_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('53', '53')
class CalculationTestCase_14_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('54', '54')
class CalculationTestCase_14_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('55', '55')
class CalculationTestCase_14_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('56', '56')
class CalculationTestCase_14_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('57', '57')
class CalculationTestCase_14_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('58', '58')
class CalculationTestCase_14_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('59', '59')
class CalculationTestCase_14_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('60', '60')
class CalculationTestCase_14_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('61', '61')
class CalculationTestCase_14_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('62', '62')
class CalculationTestCase_14_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('63', '63')
class CalculationTestCase_14_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 14 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('64', '64')
class CalculationTestCase_15_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('15', '15')
class CalculationTestCase_15_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('16', '16')
class CalculationTestCase_15_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('17', '17')
class CalculationTestCase_15_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('18', '18')
class CalculationTestCase_15_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('19', '19')
class CalculationTestCase_15_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('20', '20')
class CalculationTestCase_15_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('21', '21')
class CalculationTestCase_15_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('22', '22')
class CalculationTestCase_15_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('23', '23')
class CalculationTestCase_15_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('24', '24')
class CalculationTestCase_15_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('25', '25')
class CalculationTestCase_15_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('26', '26')
class CalculationTestCase_15_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('27', '27')
class CalculationTestCase_15_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('28', '28')
class CalculationTestCase_15_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('29', '29')
class CalculationTestCase_15_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('30', '30')
class CalculationTestCase_15_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('31', '31')
class CalculationTestCase_15_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('32', '32')
class CalculationTestCase_15_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('33', '33')
class CalculationTestCase_15_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('34', '34')
class CalculationTestCase_15_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('35', '35')
class CalculationTestCase_15_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('36', '36')
class CalculationTestCase_15_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('37', '37')
class CalculationTestCase_15_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('38', '38')
class CalculationTestCase_15_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('39', '39')
class CalculationTestCase_15_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('40', '40')
class CalculationTestCase_15_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('41', '41')
class CalculationTestCase_15_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('42', '42')
class CalculationTestCase_15_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('43', '43')
class CalculationTestCase_15_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('44', '44')
class CalculationTestCase_15_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('45', '45')
class CalculationTestCase_15_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('46', '46')
class CalculationTestCase_15_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('47', '47')
class CalculationTestCase_15_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('48', '48')
class CalculationTestCase_15_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('49', '49')
class CalculationTestCase_15_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('50', '50')
class CalculationTestCase_15_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('51', '51')
class CalculationTestCase_15_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('52', '52')
class CalculationTestCase_15_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('53', '53')
class CalculationTestCase_15_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('54', '54')
class CalculationTestCase_15_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('55', '55')
class CalculationTestCase_15_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('56', '56')
class CalculationTestCase_15_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('57', '57')
class CalculationTestCase_15_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('58', '58')
class CalculationTestCase_15_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('59', '59')
class CalculationTestCase_15_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('60', '60')
class CalculationTestCase_15_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('61', '61')
class CalculationTestCase_15_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('62', '62')
class CalculationTestCase_15_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('63', '63')
class CalculationTestCase_15_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('64', '64')
class CalculationTestCase_15_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 15 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('65', '65')
class CalculationTestCase_16_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('16', '16')
class CalculationTestCase_16_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('17', '17')
class CalculationTestCase_16_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('18', '18')
class CalculationTestCase_16_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('19', '19')
class CalculationTestCase_16_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('20', '20')
class CalculationTestCase_16_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('21', '21')
class CalculationTestCase_16_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('22', '22')
class CalculationTestCase_16_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('23', '23')
class CalculationTestCase_16_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('24', '24')
class CalculationTestCase_16_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('25', '25')
class CalculationTestCase_16_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('26', '26')
class CalculationTestCase_16_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('27', '27')
class CalculationTestCase_16_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('28', '28')
class CalculationTestCase_16_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('29', '29')
class CalculationTestCase_16_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('30', '30')
class CalculationTestCase_16_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('31', '31')
class CalculationTestCase_16_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('32', '32')
class CalculationTestCase_16_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('33', '33')
class CalculationTestCase_16_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('34', '34')
class CalculationTestCase_16_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('35', '35')
class CalculationTestCase_16_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('36', '36')
class CalculationTestCase_16_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('37', '37')
class CalculationTestCase_16_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('38', '38')
class CalculationTestCase_16_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('39', '39')
class CalculationTestCase_16_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('40', '40')
class CalculationTestCase_16_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('41', '41')
class CalculationTestCase_16_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('42', '42')
class CalculationTestCase_16_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('43', '43')
class CalculationTestCase_16_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('44', '44')
class CalculationTestCase_16_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('45', '45')
class CalculationTestCase_16_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('46', '46')
class CalculationTestCase_16_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('47', '47')
class CalculationTestCase_16_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('48', '48')
class CalculationTestCase_16_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('49', '49')
class CalculationTestCase_16_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('50', '50')
class CalculationTestCase_16_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('51', '51')
class CalculationTestCase_16_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('52', '52')
class CalculationTestCase_16_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('53', '53')
class CalculationTestCase_16_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('54', '54')
class CalculationTestCase_16_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('55', '55')
class CalculationTestCase_16_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('56', '56')
class CalculationTestCase_16_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('57', '57')
class CalculationTestCase_16_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('58', '58')
class CalculationTestCase_16_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('59', '59')
class CalculationTestCase_16_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('60', '60')
class CalculationTestCase_16_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('61', '61')
class CalculationTestCase_16_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('62', '62')
class CalculationTestCase_16_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('63', '63')
class CalculationTestCase_16_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('64', '64')
class CalculationTestCase_16_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('65', '65')
class CalculationTestCase_16_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 16 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('66', '66')
class CalculationTestCase_17_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('17', '17')
class CalculationTestCase_17_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('18', '18')
class CalculationTestCase_17_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('19', '19')
class CalculationTestCase_17_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('20', '20')
class CalculationTestCase_17_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('21', '21')
class CalculationTestCase_17_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('22', '22')
class CalculationTestCase_17_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('23', '23')
class CalculationTestCase_17_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('24', '24')
class CalculationTestCase_17_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('25', '25')
class CalculationTestCase_17_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('26', '26')
class CalculationTestCase_17_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('27', '27')
class CalculationTestCase_17_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('28', '28')
class CalculationTestCase_17_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('29', '29')
class CalculationTestCase_17_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('30', '30')
class CalculationTestCase_17_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('31', '31')
class CalculationTestCase_17_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('32', '32')
class CalculationTestCase_17_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('33', '33')
class CalculationTestCase_17_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('34', '34')
class CalculationTestCase_17_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('35', '35')
class CalculationTestCase_17_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('36', '36')
class CalculationTestCase_17_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('37', '37')
class CalculationTestCase_17_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('38', '38')
class CalculationTestCase_17_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('39', '39')
class CalculationTestCase_17_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('40', '40')
class CalculationTestCase_17_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('41', '41')
class CalculationTestCase_17_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('42', '42')
class CalculationTestCase_17_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('43', '43')
class CalculationTestCase_17_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('44', '44')
class CalculationTestCase_17_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('45', '45')
class CalculationTestCase_17_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('46', '46')
class CalculationTestCase_17_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('47', '47')
class CalculationTestCase_17_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('48', '48')
class CalculationTestCase_17_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('49', '49')
class CalculationTestCase_17_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('50', '50')
class CalculationTestCase_17_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('51', '51')
class CalculationTestCase_17_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('52', '52')
class CalculationTestCase_17_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('53', '53')
class CalculationTestCase_17_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('54', '54')
class CalculationTestCase_17_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('55', '55')
class CalculationTestCase_17_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('56', '56')
class CalculationTestCase_17_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('57', '57')
class CalculationTestCase_17_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('58', '58')
class CalculationTestCase_17_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('59', '59')
class CalculationTestCase_17_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('60', '60')
class CalculationTestCase_17_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('61', '61')
class CalculationTestCase_17_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('62', '62')
class CalculationTestCase_17_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('63', '63')
class CalculationTestCase_17_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('64', '64')
class CalculationTestCase_17_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('65', '65')
class CalculationTestCase_17_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('66', '66')
class CalculationTestCase_17_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 17 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('67', '67')
class CalculationTestCase_18_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('18', '18')
class CalculationTestCase_18_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('19', '19')
class CalculationTestCase_18_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('20', '20')
class CalculationTestCase_18_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('21', '21')
class CalculationTestCase_18_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('22', '22')
class CalculationTestCase_18_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('23', '23')
class CalculationTestCase_18_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('24', '24')
class CalculationTestCase_18_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('25', '25')
class CalculationTestCase_18_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('26', '26')
class CalculationTestCase_18_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('27', '27')
class CalculationTestCase_18_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('28', '28')
class CalculationTestCase_18_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('29', '29')
class CalculationTestCase_18_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('30', '30')
class CalculationTestCase_18_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('31', '31')
class CalculationTestCase_18_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('32', '32')
class CalculationTestCase_18_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('33', '33')
class CalculationTestCase_18_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('34', '34')
class CalculationTestCase_18_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('35', '35')
class CalculationTestCase_18_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('36', '36')
class CalculationTestCase_18_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('37', '37')
class CalculationTestCase_18_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('38', '38')
class CalculationTestCase_18_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('39', '39')
class CalculationTestCase_18_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('40', '40')
class CalculationTestCase_18_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('41', '41')
class CalculationTestCase_18_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('42', '42')
class CalculationTestCase_18_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('43', '43')
class CalculationTestCase_18_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('44', '44')
class CalculationTestCase_18_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('45', '45')
class CalculationTestCase_18_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('46', '46')
class CalculationTestCase_18_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('47', '47')
class CalculationTestCase_18_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('48', '48')
class CalculationTestCase_18_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('49', '49')
class CalculationTestCase_18_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('50', '50')
class CalculationTestCase_18_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('51', '51')
class CalculationTestCase_18_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('52', '52')
class CalculationTestCase_18_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('53', '53')
class CalculationTestCase_18_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('54', '54')
class CalculationTestCase_18_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('55', '55')
class CalculationTestCase_18_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('56', '56')
class CalculationTestCase_18_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('57', '57')
class CalculationTestCase_18_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('58', '58')
class CalculationTestCase_18_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('59', '59')
class CalculationTestCase_18_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('60', '60')
class CalculationTestCase_18_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('61', '61')
class CalculationTestCase_18_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('62', '62')
class CalculationTestCase_18_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('63', '63')
class CalculationTestCase_18_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('64', '64')
class CalculationTestCase_18_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('65', '65')
class CalculationTestCase_18_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('66', '66')
class CalculationTestCase_18_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('67', '67')
class CalculationTestCase_18_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 18 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('68', '68')
class CalculationTestCase_19_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('19', '19')
class CalculationTestCase_19_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('20', '20')
class CalculationTestCase_19_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('21', '21')
class CalculationTestCase_19_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('22', '22')
class CalculationTestCase_19_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('23', '23')
class CalculationTestCase_19_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('24', '24')
class CalculationTestCase_19_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('25', '25')
class CalculationTestCase_19_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('26', '26')
class CalculationTestCase_19_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('27', '27')
class CalculationTestCase_19_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('28', '28')
class CalculationTestCase_19_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('29', '29')
class CalculationTestCase_19_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('30', '30')
class CalculationTestCase_19_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('31', '31')
class CalculationTestCase_19_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('32', '32')
class CalculationTestCase_19_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('33', '33')
class CalculationTestCase_19_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('34', '34')
class CalculationTestCase_19_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('35', '35')
class CalculationTestCase_19_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('36', '36')
class CalculationTestCase_19_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('37', '37')
class CalculationTestCase_19_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('38', '38')
class CalculationTestCase_19_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('39', '39')
class CalculationTestCase_19_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('40', '40')
class CalculationTestCase_19_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('41', '41')
class CalculationTestCase_19_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('42', '42')
class CalculationTestCase_19_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('43', '43')
class CalculationTestCase_19_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('44', '44')
class CalculationTestCase_19_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('45', '45')
class CalculationTestCase_19_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('46', '46')
class CalculationTestCase_19_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('47', '47')
class CalculationTestCase_19_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('48', '48')
class CalculationTestCase_19_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('49', '49')
class CalculationTestCase_19_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('50', '50')
class CalculationTestCase_19_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('51', '51')
class CalculationTestCase_19_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('52', '52')
class CalculationTestCase_19_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('53', '53')
class CalculationTestCase_19_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('54', '54')
class CalculationTestCase_19_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('55', '55')
class CalculationTestCase_19_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('56', '56')
class CalculationTestCase_19_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('57', '57')
class CalculationTestCase_19_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('58', '58')
class CalculationTestCase_19_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('59', '59')
class CalculationTestCase_19_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('60', '60')
class CalculationTestCase_19_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('61', '61')
class CalculationTestCase_19_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('62', '62')
class CalculationTestCase_19_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('63', '63')
class CalculationTestCase_19_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('64', '64')
class CalculationTestCase_19_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('65', '65')
class CalculationTestCase_19_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('66', '66')
class CalculationTestCase_19_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('67', '67')
class CalculationTestCase_19_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('68', '68')
class CalculationTestCase_19_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 19 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('69', '69')
class CalculationTestCase_20_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('20', '20')
class CalculationTestCase_20_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('21', '21')
class CalculationTestCase_20_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('22', '22')
class CalculationTestCase_20_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('23', '23')
class CalculationTestCase_20_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('24', '24')
class CalculationTestCase_20_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('25', '25')
class CalculationTestCase_20_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('26', '26')
class CalculationTestCase_20_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('27', '27')
class CalculationTestCase_20_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('28', '28')
class CalculationTestCase_20_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('29', '29')
class CalculationTestCase_20_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('30', '30')
class CalculationTestCase_20_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('31', '31')
class CalculationTestCase_20_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('32', '32')
class CalculationTestCase_20_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('33', '33')
class CalculationTestCase_20_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('34', '34')
class CalculationTestCase_20_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('35', '35')
class CalculationTestCase_20_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('36', '36')
class CalculationTestCase_20_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('37', '37')
class CalculationTestCase_20_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('38', '38')
class CalculationTestCase_20_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('39', '39')
class CalculationTestCase_20_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('40', '40')
class CalculationTestCase_20_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('41', '41')
class CalculationTestCase_20_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('42', '42')
class CalculationTestCase_20_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('43', '43')
class CalculationTestCase_20_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('44', '44')
class CalculationTestCase_20_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('45', '45')
class CalculationTestCase_20_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('46', '46')
class CalculationTestCase_20_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('47', '47')
class CalculationTestCase_20_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('48', '48')
class CalculationTestCase_20_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('49', '49')
class CalculationTestCase_20_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('50', '50')
class CalculationTestCase_20_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('51', '51')
class CalculationTestCase_20_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('52', '52')
class CalculationTestCase_20_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('53', '53')
class CalculationTestCase_20_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('54', '54')
class CalculationTestCase_20_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('55', '55')
class CalculationTestCase_20_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('56', '56')
class CalculationTestCase_20_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('57', '57')
class CalculationTestCase_20_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('58', '58')
class CalculationTestCase_20_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('59', '59')
class CalculationTestCase_20_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('60', '60')
class CalculationTestCase_20_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('61', '61')
class CalculationTestCase_20_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('62', '62')
class CalculationTestCase_20_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('63', '63')
class CalculationTestCase_20_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('64', '64')
class CalculationTestCase_20_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('65', '65')
class CalculationTestCase_20_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('66', '66')
class CalculationTestCase_20_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('67', '67')
class CalculationTestCase_20_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('68', '68')
class CalculationTestCase_20_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('69', '69')
class CalculationTestCase_20_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 20 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('70', '70')
class CalculationTestCase_21_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('21', '21')
class CalculationTestCase_21_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('22', '22')
class CalculationTestCase_21_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('23', '23')
class CalculationTestCase_21_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('24', '24')
class CalculationTestCase_21_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('25', '25')
class CalculationTestCase_21_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('26', '26')
class CalculationTestCase_21_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('27', '27')
class CalculationTestCase_21_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('28', '28')
class CalculationTestCase_21_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('29', '29')
class CalculationTestCase_21_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('30', '30')
class CalculationTestCase_21_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('31', '31')
class CalculationTestCase_21_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('32', '32')
class CalculationTestCase_21_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('33', '33')
class CalculationTestCase_21_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('34', '34')
class CalculationTestCase_21_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('35', '35')
class CalculationTestCase_21_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('36', '36')
class CalculationTestCase_21_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('37', '37')
class CalculationTestCase_21_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('38', '38')
class CalculationTestCase_21_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('39', '39')
class CalculationTestCase_21_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('40', '40')
class CalculationTestCase_21_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('41', '41')
class CalculationTestCase_21_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('42', '42')
class CalculationTestCase_21_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('43', '43')
class CalculationTestCase_21_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('44', '44')
class CalculationTestCase_21_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('45', '45')
class CalculationTestCase_21_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('46', '46')
class CalculationTestCase_21_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('47', '47')
class CalculationTestCase_21_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('48', '48')
class CalculationTestCase_21_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('49', '49')
class CalculationTestCase_21_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('50', '50')
class CalculationTestCase_21_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('51', '51')
class CalculationTestCase_21_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('52', '52')
class CalculationTestCase_21_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('53', '53')
class CalculationTestCase_21_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('54', '54')
class CalculationTestCase_21_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('55', '55')
class CalculationTestCase_21_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('56', '56')
class CalculationTestCase_21_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('57', '57')
class CalculationTestCase_21_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('58', '58')
class CalculationTestCase_21_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('59', '59')
class CalculationTestCase_21_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('60', '60')
class CalculationTestCase_21_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('61', '61')
class CalculationTestCase_21_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('62', '62')
class CalculationTestCase_21_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('63', '63')
class CalculationTestCase_21_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('64', '64')
class CalculationTestCase_21_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('65', '65')
class CalculationTestCase_21_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('66', '66')
class CalculationTestCase_21_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('67', '67')
class CalculationTestCase_21_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('68', '68')
class CalculationTestCase_21_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('69', '69')
class CalculationTestCase_21_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('70', '70')
class CalculationTestCase_21_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 21 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('71', '71')
class CalculationTestCase_22_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('22', '22')
class CalculationTestCase_22_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('23', '23')
class CalculationTestCase_22_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('24', '24')
class CalculationTestCase_22_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('25', '25')
class CalculationTestCase_22_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('26', '26')
class CalculationTestCase_22_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('27', '27')
class CalculationTestCase_22_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('28', '28')
class CalculationTestCase_22_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('29', '29')
class CalculationTestCase_22_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('30', '30')
class CalculationTestCase_22_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('31', '31')
class CalculationTestCase_22_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('32', '32')
class CalculationTestCase_22_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('33', '33')
class CalculationTestCase_22_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('34', '34')
class CalculationTestCase_22_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('35', '35')
class CalculationTestCase_22_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('36', '36')
class CalculationTestCase_22_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('37', '37')
class CalculationTestCase_22_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('38', '38')
class CalculationTestCase_22_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('39', '39')
class CalculationTestCase_22_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('40', '40')
class CalculationTestCase_22_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('41', '41')
class CalculationTestCase_22_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('42', '42')
class CalculationTestCase_22_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('43', '43')
class CalculationTestCase_22_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('44', '44')
class CalculationTestCase_22_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('45', '45')
class CalculationTestCase_22_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('46', '46')
class CalculationTestCase_22_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('47', '47')
class CalculationTestCase_22_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('48', '48')
class CalculationTestCase_22_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('49', '49')
class CalculationTestCase_22_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('50', '50')
class CalculationTestCase_22_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('51', '51')
class CalculationTestCase_22_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('52', '52')
class CalculationTestCase_22_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('53', '53')
class CalculationTestCase_22_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('54', '54')
class CalculationTestCase_22_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('55', '55')
class CalculationTestCase_22_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('56', '56')
class CalculationTestCase_22_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('57', '57')
class CalculationTestCase_22_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('58', '58')
class CalculationTestCase_22_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('59', '59')
class CalculationTestCase_22_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('60', '60')
class CalculationTestCase_22_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('61', '61')
class CalculationTestCase_22_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('62', '62')
class CalculationTestCase_22_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('63', '63')
class CalculationTestCase_22_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('64', '64')
class CalculationTestCase_22_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('65', '65')
class CalculationTestCase_22_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('66', '66')
class CalculationTestCase_22_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('67', '67')
class CalculationTestCase_22_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('68', '68')
class CalculationTestCase_22_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('69', '69')
class CalculationTestCase_22_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('70', '70')
class CalculationTestCase_22_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('71', '71')
class CalculationTestCase_22_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 22 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('72', '72')
class CalculationTestCase_23_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('23', '23')
class CalculationTestCase_23_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('24', '24')
class CalculationTestCase_23_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('25', '25')
class CalculationTestCase_23_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('26', '26')
class CalculationTestCase_23_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('27', '27')
class CalculationTestCase_23_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('28', '28')
class CalculationTestCase_23_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('29', '29')
class CalculationTestCase_23_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('30', '30')
class CalculationTestCase_23_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('31', '31')
class CalculationTestCase_23_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('32', '32')
class CalculationTestCase_23_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('33', '33')
class CalculationTestCase_23_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('34', '34')
class CalculationTestCase_23_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('35', '35')
class CalculationTestCase_23_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('36', '36')
class CalculationTestCase_23_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('37', '37')
class CalculationTestCase_23_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('38', '38')
class CalculationTestCase_23_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('39', '39')
class CalculationTestCase_23_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('40', '40')
class CalculationTestCase_23_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('41', '41')
class CalculationTestCase_23_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('42', '42')
class CalculationTestCase_23_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('43', '43')
class CalculationTestCase_23_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('44', '44')
class CalculationTestCase_23_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('45', '45')
class CalculationTestCase_23_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('46', '46')
class CalculationTestCase_23_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('47', '47')
class CalculationTestCase_23_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('48', '48')
class CalculationTestCase_23_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('49', '49')
class CalculationTestCase_23_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('50', '50')
class CalculationTestCase_23_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('51', '51')
class CalculationTestCase_23_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('52', '52')
class CalculationTestCase_23_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('53', '53')
class CalculationTestCase_23_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('54', '54')
class CalculationTestCase_23_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('55', '55')
class CalculationTestCase_23_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('56', '56')
class CalculationTestCase_23_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('57', '57')
class CalculationTestCase_23_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('58', '58')
class CalculationTestCase_23_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('59', '59')
class CalculationTestCase_23_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('60', '60')
class CalculationTestCase_23_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('61', '61')
class CalculationTestCase_23_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('62', '62')
class CalculationTestCase_23_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('63', '63')
class CalculationTestCase_23_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('64', '64')
class CalculationTestCase_23_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('65', '65')
class CalculationTestCase_23_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('66', '66')
class CalculationTestCase_23_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('67', '67')
class CalculationTestCase_23_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('68', '68')
class CalculationTestCase_23_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('69', '69')
class CalculationTestCase_23_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('70', '70')
class CalculationTestCase_23_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('71', '71')
class CalculationTestCase_23_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('72', '72')
class CalculationTestCase_23_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 23 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('73', '73')
class CalculationTestCase_24_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('24', '24')
class CalculationTestCase_24_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('25', '25')
class CalculationTestCase_24_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('26', '26')
class CalculationTestCase_24_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('27', '27')
class CalculationTestCase_24_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('28', '28')
class CalculationTestCase_24_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('29', '29')
class CalculationTestCase_24_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('30', '30')
class CalculationTestCase_24_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('31', '31')
class CalculationTestCase_24_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('32', '32')
class CalculationTestCase_24_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('33', '33')
class CalculationTestCase_24_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('34', '34')
class CalculationTestCase_24_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('35', '35')
class CalculationTestCase_24_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('36', '36')
class CalculationTestCase_24_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('37', '37')
class CalculationTestCase_24_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('38', '38')
class CalculationTestCase_24_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('39', '39')
class CalculationTestCase_24_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('40', '40')
class CalculationTestCase_24_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('41', '41')
class CalculationTestCase_24_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('42', '42')
class CalculationTestCase_24_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('43', '43')
class CalculationTestCase_24_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('44', '44')
class CalculationTestCase_24_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('45', '45')
class CalculationTestCase_24_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('46', '46')
class CalculationTestCase_24_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('47', '47')
class CalculationTestCase_24_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('48', '48')
class CalculationTestCase_24_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('49', '49')
class CalculationTestCase_24_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('50', '50')
class CalculationTestCase_24_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('51', '51')
class CalculationTestCase_24_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('52', '52')
class CalculationTestCase_24_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('53', '53')
class CalculationTestCase_24_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('54', '54')
class CalculationTestCase_24_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('55', '55')
class CalculationTestCase_24_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('56', '56')
class CalculationTestCase_24_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('57', '57')
class CalculationTestCase_24_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('58', '58')
class CalculationTestCase_24_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('59', '59')
class CalculationTestCase_24_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('60', '60')
class CalculationTestCase_24_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('61', '61')
class CalculationTestCase_24_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('62', '62')
class CalculationTestCase_24_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('63', '63')
class CalculationTestCase_24_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('64', '64')
class CalculationTestCase_24_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('65', '65')
class CalculationTestCase_24_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('66', '66')
class CalculationTestCase_24_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('67', '67')
class CalculationTestCase_24_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('68', '68')
class CalculationTestCase_24_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('69', '69')
class CalculationTestCase_24_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('70', '70')
class CalculationTestCase_24_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('71', '71')
class CalculationTestCase_24_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('72', '72')
class CalculationTestCase_24_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('73', '73')
class CalculationTestCase_24_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 24 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('74', '74')
class CalculationTestCase_25_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('25', '25')
class CalculationTestCase_25_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('26', '26')
class CalculationTestCase_25_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('27', '27')
class CalculationTestCase_25_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('28', '28')
class CalculationTestCase_25_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('29', '29')
class CalculationTestCase_25_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('30', '30')
class CalculationTestCase_25_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('31', '31')
class CalculationTestCase_25_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('32', '32')
class CalculationTestCase_25_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('33', '33')
class CalculationTestCase_25_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('34', '34')
class CalculationTestCase_25_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('35', '35')
class CalculationTestCase_25_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('36', '36')
class CalculationTestCase_25_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('37', '37')
class CalculationTestCase_25_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('38', '38')
class CalculationTestCase_25_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('39', '39')
class CalculationTestCase_25_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('40', '40')
class CalculationTestCase_25_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('41', '41')
class CalculationTestCase_25_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('42', '42')
class CalculationTestCase_25_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('43', '43')
class CalculationTestCase_25_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('44', '44')
class CalculationTestCase_25_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('45', '45')
class CalculationTestCase_25_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('46', '46')
class CalculationTestCase_25_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('47', '47')
class CalculationTestCase_25_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('48', '48')
class CalculationTestCase_25_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('49', '49')
class CalculationTestCase_25_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('50', '50')
class CalculationTestCase_25_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('51', '51')
class CalculationTestCase_25_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('52', '52')
class CalculationTestCase_25_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('53', '53')
class CalculationTestCase_25_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('54', '54')
class CalculationTestCase_25_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('55', '55')
class CalculationTestCase_25_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('56', '56')
class CalculationTestCase_25_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('57', '57')
class CalculationTestCase_25_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('58', '58')
class CalculationTestCase_25_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('59', '59')
class CalculationTestCase_25_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('60', '60')
class CalculationTestCase_25_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('61', '61')
class CalculationTestCase_25_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('62', '62')
class CalculationTestCase_25_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('63', '63')
class CalculationTestCase_25_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('64', '64')
class CalculationTestCase_25_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('65', '65')
class CalculationTestCase_25_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('66', '66')
class CalculationTestCase_25_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('67', '67')
class CalculationTestCase_25_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('68', '68')
class CalculationTestCase_25_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('69', '69')
class CalculationTestCase_25_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('70', '70')
class CalculationTestCase_25_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('71', '71')
class CalculationTestCase_25_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('72', '72')
class CalculationTestCase_25_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('73', '73')
class CalculationTestCase_25_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('74', '74')
class CalculationTestCase_25_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 25 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('75', '75')
class CalculationTestCase_26_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('26', '26')
class CalculationTestCase_26_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('27', '27')
class CalculationTestCase_26_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('28', '28')
class CalculationTestCase_26_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('29', '29')
class CalculationTestCase_26_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('30', '30')
class CalculationTestCase_26_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('31', '31')
class CalculationTestCase_26_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('32', '32')
class CalculationTestCase_26_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('33', '33')
class CalculationTestCase_26_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('34', '34')
class CalculationTestCase_26_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('35', '35')
class CalculationTestCase_26_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('36', '36')
class CalculationTestCase_26_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('37', '37')
class CalculationTestCase_26_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('38', '38')
class CalculationTestCase_26_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('39', '39')
class CalculationTestCase_26_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('40', '40')
class CalculationTestCase_26_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('41', '41')
class CalculationTestCase_26_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('42', '42')
class CalculationTestCase_26_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('43', '43')
class CalculationTestCase_26_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('44', '44')
class CalculationTestCase_26_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('45', '45')
class CalculationTestCase_26_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('46', '46')
class CalculationTestCase_26_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('47', '47')
class CalculationTestCase_26_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('48', '48')
class CalculationTestCase_26_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('49', '49')
class CalculationTestCase_26_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('50', '50')
class CalculationTestCase_26_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('51', '51')
class CalculationTestCase_26_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('52', '52')
class CalculationTestCase_26_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('53', '53')
class CalculationTestCase_26_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('54', '54')
class CalculationTestCase_26_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('55', '55')
class CalculationTestCase_26_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('56', '56')
class CalculationTestCase_26_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('57', '57')
class CalculationTestCase_26_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('58', '58')
class CalculationTestCase_26_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('59', '59')
class CalculationTestCase_26_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('60', '60')
class CalculationTestCase_26_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('61', '61')
class CalculationTestCase_26_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('62', '62')
class CalculationTestCase_26_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('63', '63')
class CalculationTestCase_26_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('64', '64')
class CalculationTestCase_26_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('65', '65')
class CalculationTestCase_26_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('66', '66')
class CalculationTestCase_26_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('67', '67')
class CalculationTestCase_26_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('68', '68')
class CalculationTestCase_26_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('69', '69')
class CalculationTestCase_26_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('70', '70')
class CalculationTestCase_26_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('71', '71')
class CalculationTestCase_26_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('72', '72')
class CalculationTestCase_26_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('73', '73')
class CalculationTestCase_26_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('74', '74')
class CalculationTestCase_26_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('75', '75')
class CalculationTestCase_26_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 26 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('76', '76')
class CalculationTestCase_27_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('27', '27')
class CalculationTestCase_27_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('28', '28')
class CalculationTestCase_27_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('29', '29')
class CalculationTestCase_27_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('30', '30')
class CalculationTestCase_27_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('31', '31')
class CalculationTestCase_27_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('32', '32')
class CalculationTestCase_27_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('33', '33')
class CalculationTestCase_27_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('34', '34')
class CalculationTestCase_27_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('35', '35')
class CalculationTestCase_27_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('36', '36')
class CalculationTestCase_27_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('37', '37')
class CalculationTestCase_27_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('38', '38')
class CalculationTestCase_27_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('39', '39')
class CalculationTestCase_27_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('40', '40')
class CalculationTestCase_27_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('41', '41')
class CalculationTestCase_27_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('42', '42')
class CalculationTestCase_27_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('43', '43')
class CalculationTestCase_27_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('44', '44')
class CalculationTestCase_27_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('45', '45')
class CalculationTestCase_27_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('46', '46')
class CalculationTestCase_27_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('47', '47')
class CalculationTestCase_27_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('48', '48')
class CalculationTestCase_27_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('49', '49')
class CalculationTestCase_27_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('50', '50')
class CalculationTestCase_27_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('51', '51')
class CalculationTestCase_27_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('52', '52')
class CalculationTestCase_27_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('53', '53')
class CalculationTestCase_27_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('54', '54')
class CalculationTestCase_27_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('55', '55')
class CalculationTestCase_27_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('56', '56')
class CalculationTestCase_27_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('57', '57')
class CalculationTestCase_27_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('58', '58')
class CalculationTestCase_27_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('59', '59')
class CalculationTestCase_27_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('60', '60')
class CalculationTestCase_27_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('61', '61')
class CalculationTestCase_27_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('62', '62')
class CalculationTestCase_27_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('63', '63')
class CalculationTestCase_27_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('64', '64')
class CalculationTestCase_27_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('65', '65')
class CalculationTestCase_27_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('66', '66')
class CalculationTestCase_27_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('67', '67')
class CalculationTestCase_27_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('68', '68')
class CalculationTestCase_27_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('69', '69')
class CalculationTestCase_27_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('70', '70')
class CalculationTestCase_27_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('71', '71')
class CalculationTestCase_27_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('72', '72')
class CalculationTestCase_27_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('73', '73')
class CalculationTestCase_27_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('74', '74')
class CalculationTestCase_27_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('75', '75')
class CalculationTestCase_27_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('76', '76')
class CalculationTestCase_27_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 27 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('77', '77')
class CalculationTestCase_28_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('28', '28')
class CalculationTestCase_28_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('29', '29')
class CalculationTestCase_28_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('30', '30')
class CalculationTestCase_28_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('31', '31')
class CalculationTestCase_28_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('32', '32')
class CalculationTestCase_28_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('33', '33')
class CalculationTestCase_28_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('34', '34')
class CalculationTestCase_28_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('35', '35')
class CalculationTestCase_28_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('36', '36')
class CalculationTestCase_28_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('37', '37')
class CalculationTestCase_28_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('38', '38')
class CalculationTestCase_28_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('39', '39')
class CalculationTestCase_28_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('40', '40')
class CalculationTestCase_28_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('41', '41')
class CalculationTestCase_28_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('42', '42')
class CalculationTestCase_28_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('43', '43')
class CalculationTestCase_28_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('44', '44')
class CalculationTestCase_28_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('45', '45')
class CalculationTestCase_28_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('46', '46')
class CalculationTestCase_28_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('47', '47')
class CalculationTestCase_28_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('48', '48')
class CalculationTestCase_28_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('49', '49')
class CalculationTestCase_28_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('50', '50')
class CalculationTestCase_28_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('51', '51')
class CalculationTestCase_28_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('52', '52')
class CalculationTestCase_28_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('53', '53')
class CalculationTestCase_28_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('54', '54')
class CalculationTestCase_28_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('55', '55')
class CalculationTestCase_28_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('56', '56')
class CalculationTestCase_28_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('57', '57')
class CalculationTestCase_28_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('58', '58')
class CalculationTestCase_28_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('59', '59')
class CalculationTestCase_28_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('60', '60')
class CalculationTestCase_28_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('61', '61')
class CalculationTestCase_28_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('62', '62')
class CalculationTestCase_28_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('63', '63')
class CalculationTestCase_28_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('64', '64')
class CalculationTestCase_28_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('65', '65')
class CalculationTestCase_28_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('66', '66')
class CalculationTestCase_28_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('67', '67')
class CalculationTestCase_28_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('68', '68')
class CalculationTestCase_28_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('69', '69')
class CalculationTestCase_28_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('70', '70')
class CalculationTestCase_28_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('71', '71')
class CalculationTestCase_28_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('72', '72')
class CalculationTestCase_28_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('73', '73')
class CalculationTestCase_28_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('74', '74')
class CalculationTestCase_28_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('75', '75')
class CalculationTestCase_28_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('76', '76')
class CalculationTestCase_28_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('77', '77')
class CalculationTestCase_28_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 28 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('78', '78')
class CalculationTestCase_29_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('29', '29')
class CalculationTestCase_29_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('30', '30')
class CalculationTestCase_29_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('31', '31')
class CalculationTestCase_29_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('32', '32')
class CalculationTestCase_29_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('33', '33')
class CalculationTestCase_29_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('34', '34')
class CalculationTestCase_29_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('35', '35')
class CalculationTestCase_29_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('36', '36')
class CalculationTestCase_29_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('37', '37')
class CalculationTestCase_29_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('38', '38')
class CalculationTestCase_29_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('39', '39')
class CalculationTestCase_29_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('40', '40')
class CalculationTestCase_29_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('41', '41')
class CalculationTestCase_29_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('42', '42')
class CalculationTestCase_29_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('43', '43')
class CalculationTestCase_29_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('44', '44')
class CalculationTestCase_29_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('45', '45')
class CalculationTestCase_29_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('46', '46')
class CalculationTestCase_29_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('47', '47')
class CalculationTestCase_29_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('48', '48')
class CalculationTestCase_29_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('49', '49')
class CalculationTestCase_29_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('50', '50')
class CalculationTestCase_29_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('51', '51')
class CalculationTestCase_29_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('52', '52')
class CalculationTestCase_29_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('53', '53')
class CalculationTestCase_29_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('54', '54')
class CalculationTestCase_29_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('55', '55')
class CalculationTestCase_29_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('56', '56')
class CalculationTestCase_29_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('57', '57')
class CalculationTestCase_29_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('58', '58')
class CalculationTestCase_29_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('59', '59')
class CalculationTestCase_29_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('60', '60')
class CalculationTestCase_29_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('61', '61')
class CalculationTestCase_29_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('62', '62')
class CalculationTestCase_29_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('63', '63')
class CalculationTestCase_29_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('64', '64')
class CalculationTestCase_29_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('65', '65')
class CalculationTestCase_29_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('66', '66')
class CalculationTestCase_29_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('67', '67')
class CalculationTestCase_29_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('68', '68')
class CalculationTestCase_29_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('69', '69')
class CalculationTestCase_29_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('70', '70')
class CalculationTestCase_29_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('71', '71')
class CalculationTestCase_29_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('72', '72')
class CalculationTestCase_29_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('73', '73')
class CalculationTestCase_29_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('74', '74')
class CalculationTestCase_29_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('75', '75')
class CalculationTestCase_29_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('76', '76')
class CalculationTestCase_29_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('77', '77')
class CalculationTestCase_29_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('78', '78')
class CalculationTestCase_29_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 29 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('79', '79')
class CalculationTestCase_30_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('30', '30')
class CalculationTestCase_30_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('31', '31')
class CalculationTestCase_30_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('32', '32')
class CalculationTestCase_30_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('33', '33')
class CalculationTestCase_30_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('34', '34')
class CalculationTestCase_30_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('35', '35')
class CalculationTestCase_30_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('36', '36')
class CalculationTestCase_30_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('37', '37')
class CalculationTestCase_30_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('38', '38')
class CalculationTestCase_30_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('39', '39')
class CalculationTestCase_30_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('40', '40')
class CalculationTestCase_30_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('41', '41')
class CalculationTestCase_30_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('42', '42')
class CalculationTestCase_30_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('43', '43')
class CalculationTestCase_30_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('44', '44')
class CalculationTestCase_30_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('45', '45')
class CalculationTestCase_30_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('46', '46')
class CalculationTestCase_30_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('47', '47')
class CalculationTestCase_30_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('48', '48')
class CalculationTestCase_30_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('49', '49')
class CalculationTestCase_30_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('50', '50')
class CalculationTestCase_30_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('51', '51')
class CalculationTestCase_30_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('52', '52')
class CalculationTestCase_30_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('53', '53')
class CalculationTestCase_30_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('54', '54')
class CalculationTestCase_30_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('55', '55')
class CalculationTestCase_30_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('56', '56')
class CalculationTestCase_30_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('57', '57')
class CalculationTestCase_30_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('58', '58')
class CalculationTestCase_30_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('59', '59')
class CalculationTestCase_30_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('60', '60')
class CalculationTestCase_30_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('61', '61')
class CalculationTestCase_30_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('62', '62')
class CalculationTestCase_30_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('63', '63')
class CalculationTestCase_30_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('64', '64')
class CalculationTestCase_30_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('65', '65')
class CalculationTestCase_30_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('66', '66')
class CalculationTestCase_30_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('67', '67')
class CalculationTestCase_30_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('68', '68')
class CalculationTestCase_30_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('69', '69')
class CalculationTestCase_30_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('70', '70')
class CalculationTestCase_30_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('71', '71')
class CalculationTestCase_30_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('72', '72')
class CalculationTestCase_30_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('73', '73')
class CalculationTestCase_30_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('74', '74')
class CalculationTestCase_30_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('75', '75')
class CalculationTestCase_30_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('76', '76')
class CalculationTestCase_30_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('77', '77')
class CalculationTestCase_30_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('78', '78')
class CalculationTestCase_30_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('79', '79')
class CalculationTestCase_30_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 30 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('80', '80')
class CalculationTestCase_31_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('31', '31')
class CalculationTestCase_31_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('32', '32')
class CalculationTestCase_31_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('33', '33')
class CalculationTestCase_31_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('34', '34')
class CalculationTestCase_31_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('35', '35')
class CalculationTestCase_31_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('36', '36')
class CalculationTestCase_31_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('37', '37')
class CalculationTestCase_31_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('38', '38')
class CalculationTestCase_31_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('39', '39')
class CalculationTestCase_31_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('40', '40')
class CalculationTestCase_31_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('41', '41')
class CalculationTestCase_31_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('42', '42')
class CalculationTestCase_31_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('43', '43')
class CalculationTestCase_31_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('44', '44')
class CalculationTestCase_31_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('45', '45')
class CalculationTestCase_31_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('46', '46')
class CalculationTestCase_31_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('47', '47')
class CalculationTestCase_31_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('48', '48')
class CalculationTestCase_31_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('49', '49')
class CalculationTestCase_31_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('50', '50')
class CalculationTestCase_31_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('51', '51')
class CalculationTestCase_31_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('52', '52')
class CalculationTestCase_31_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('53', '53')
class CalculationTestCase_31_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('54', '54')
class CalculationTestCase_31_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('55', '55')
class CalculationTestCase_31_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('56', '56')
class CalculationTestCase_31_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('57', '57')
class CalculationTestCase_31_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('58', '58')
class CalculationTestCase_31_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('59', '59')
class CalculationTestCase_31_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('60', '60')
class CalculationTestCase_31_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('61', '61')
class CalculationTestCase_31_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('62', '62')
class CalculationTestCase_31_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('63', '63')
class CalculationTestCase_31_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('64', '64')
class CalculationTestCase_31_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('65', '65')
class CalculationTestCase_31_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('66', '66')
class CalculationTestCase_31_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('67', '67')
class CalculationTestCase_31_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('68', '68')
class CalculationTestCase_31_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('69', '69')
class CalculationTestCase_31_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('70', '70')
class CalculationTestCase_31_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('71', '71')
class CalculationTestCase_31_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('72', '72')
class CalculationTestCase_31_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('73', '73')
class CalculationTestCase_31_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('74', '74')
class CalculationTestCase_31_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('75', '75')
class CalculationTestCase_31_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('76', '76')
class CalculationTestCase_31_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('77', '77')
class CalculationTestCase_31_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('78', '78')
class CalculationTestCase_31_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('79', '79')
class CalculationTestCase_31_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('80', '80')
class CalculationTestCase_31_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 31 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('81', '81')
class CalculationTestCase_32_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('32', '32')
class CalculationTestCase_32_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('33', '33')
class CalculationTestCase_32_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('34', '34')
class CalculationTestCase_32_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('35', '35')
class CalculationTestCase_32_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('36', '36')
class CalculationTestCase_32_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('37', '37')
class CalculationTestCase_32_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('38', '38')
class CalculationTestCase_32_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('39', '39')
class CalculationTestCase_32_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('40', '40')
class CalculationTestCase_32_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('41', '41')
class CalculationTestCase_32_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('42', '42')
class CalculationTestCase_32_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('43', '43')
class CalculationTestCase_32_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('44', '44')
class CalculationTestCase_32_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('45', '45')
class CalculationTestCase_32_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('46', '46')
class CalculationTestCase_32_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('47', '47')
class CalculationTestCase_32_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('48', '48')
class CalculationTestCase_32_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('49', '49')
class CalculationTestCase_32_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('50', '50')
class CalculationTestCase_32_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('51', '51')
class CalculationTestCase_32_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('52', '52')
class CalculationTestCase_32_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('53', '53')
class CalculationTestCase_32_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('54', '54')
class CalculationTestCase_32_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('55', '55')
class CalculationTestCase_32_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('56', '56')
class CalculationTestCase_32_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('57', '57')
class CalculationTestCase_32_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('58', '58')
class CalculationTestCase_32_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('59', '59')
class CalculationTestCase_32_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('60', '60')
class CalculationTestCase_32_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('61', '61')
class CalculationTestCase_32_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('62', '62')
class CalculationTestCase_32_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('63', '63')
class CalculationTestCase_32_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('64', '64')
class CalculationTestCase_32_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('65', '65')
class CalculationTestCase_32_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('66', '66')
class CalculationTestCase_32_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('67', '67')
class CalculationTestCase_32_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('68', '68')
class CalculationTestCase_32_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('69', '69')
class CalculationTestCase_32_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('70', '70')
class CalculationTestCase_32_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('71', '71')
class CalculationTestCase_32_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('72', '72')
class CalculationTestCase_32_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('73', '73')
class CalculationTestCase_32_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('74', '74')
class CalculationTestCase_32_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('75', '75')
class CalculationTestCase_32_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('76', '76')
class CalculationTestCase_32_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('77', '77')
class CalculationTestCase_32_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('78', '78')
class CalculationTestCase_32_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('79', '79')
class CalculationTestCase_32_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('80', '80')
class CalculationTestCase_32_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('81', '81')
class CalculationTestCase_32_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 32 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('82', '82')
class CalculationTestCase_33_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('33', '33')
class CalculationTestCase_33_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('34', '34')
class CalculationTestCase_33_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('35', '35')
class CalculationTestCase_33_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('36', '36')
class CalculationTestCase_33_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('37', '37')
class CalculationTestCase_33_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('38', '38')
class CalculationTestCase_33_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('39', '39')
class CalculationTestCase_33_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('40', '40')
class CalculationTestCase_33_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('41', '41')
class CalculationTestCase_33_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('42', '42')
class CalculationTestCase_33_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('43', '43')
class CalculationTestCase_33_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('44', '44')
class CalculationTestCase_33_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('45', '45')
class CalculationTestCase_33_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('46', '46')
class CalculationTestCase_33_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('47', '47')
class CalculationTestCase_33_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('48', '48')
class CalculationTestCase_33_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('49', '49')
class CalculationTestCase_33_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('50', '50')
class CalculationTestCase_33_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('51', '51')
class CalculationTestCase_33_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('52', '52')
class CalculationTestCase_33_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('53', '53')
class CalculationTestCase_33_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('54', '54')
class CalculationTestCase_33_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('55', '55')
class CalculationTestCase_33_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('56', '56')
class CalculationTestCase_33_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('57', '57')
class CalculationTestCase_33_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('58', '58')
class CalculationTestCase_33_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('59', '59')
class CalculationTestCase_33_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('60', '60')
class CalculationTestCase_33_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('61', '61')
class CalculationTestCase_33_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('62', '62')
class CalculationTestCase_33_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('63', '63')
class CalculationTestCase_33_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('64', '64')
class CalculationTestCase_33_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('65', '65')
class CalculationTestCase_33_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('66', '66')
class CalculationTestCase_33_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('67', '67')
class CalculationTestCase_33_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('68', '68')
class CalculationTestCase_33_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('69', '69')
class CalculationTestCase_33_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('70', '70')
class CalculationTestCase_33_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('71', '71')
class CalculationTestCase_33_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('72', '72')
class CalculationTestCase_33_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('73', '73')
class CalculationTestCase_33_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('74', '74')
class CalculationTestCase_33_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('75', '75')
class CalculationTestCase_33_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('76', '76')
class CalculationTestCase_33_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('77', '77')
class CalculationTestCase_33_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('78', '78')
class CalculationTestCase_33_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('79', '79')
class CalculationTestCase_33_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('80', '80')
class CalculationTestCase_33_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('81', '81')
class CalculationTestCase_33_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('82', '82')
class CalculationTestCase_33_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 33 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('83', '83')
class CalculationTestCase_34_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('34', '34')
class CalculationTestCase_34_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('35', '35')
class CalculationTestCase_34_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('36', '36')
class CalculationTestCase_34_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('37', '37')
class CalculationTestCase_34_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('38', '38')
class CalculationTestCase_34_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('39', '39')
class CalculationTestCase_34_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('40', '40')
class CalculationTestCase_34_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('41', '41')
class CalculationTestCase_34_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('42', '42')
class CalculationTestCase_34_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('43', '43')
class CalculationTestCase_34_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('44', '44')
class CalculationTestCase_34_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('45', '45')
class CalculationTestCase_34_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('46', '46')
class CalculationTestCase_34_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('47', '47')
class CalculationTestCase_34_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('48', '48')
class CalculationTestCase_34_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('49', '49')
class CalculationTestCase_34_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('50', '50')
class CalculationTestCase_34_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('51', '51')
class CalculationTestCase_34_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('52', '52')
class CalculationTestCase_34_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('53', '53')
class CalculationTestCase_34_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('54', '54')
class CalculationTestCase_34_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('55', '55')
class CalculationTestCase_34_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('56', '56')
class CalculationTestCase_34_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('57', '57')
class CalculationTestCase_34_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('58', '58')
class CalculationTestCase_34_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('59', '59')
class CalculationTestCase_34_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('60', '60')
class CalculationTestCase_34_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('61', '61')
class CalculationTestCase_34_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('62', '62')
class CalculationTestCase_34_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('63', '63')
class CalculationTestCase_34_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('64', '64')
class CalculationTestCase_34_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('65', '65')
class CalculationTestCase_34_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('66', '66')
class CalculationTestCase_34_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('67', '67')
class CalculationTestCase_34_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('68', '68')
class CalculationTestCase_34_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('69', '69')
class CalculationTestCase_34_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('70', '70')
class CalculationTestCase_34_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('71', '71')
class CalculationTestCase_34_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('72', '72')
class CalculationTestCase_34_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('73', '73')
class CalculationTestCase_34_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('74', '74')
class CalculationTestCase_34_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('75', '75')
class CalculationTestCase_34_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('76', '76')
class CalculationTestCase_34_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('77', '77')
class CalculationTestCase_34_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('78', '78')
class CalculationTestCase_34_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('79', '79')
class CalculationTestCase_34_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('80', '80')
class CalculationTestCase_34_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('81', '81')
class CalculationTestCase_34_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('82', '82')
class CalculationTestCase_34_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('83', '83')
class CalculationTestCase_34_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 34 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('84', '84')
class CalculationTestCase_35_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('35', '35')
class CalculationTestCase_35_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('36', '36')
class CalculationTestCase_35_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('37', '37')
class CalculationTestCase_35_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('38', '38')
class CalculationTestCase_35_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('39', '39')
class CalculationTestCase_35_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('40', '40')
class CalculationTestCase_35_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('41', '41')
class CalculationTestCase_35_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('42', '42')
class CalculationTestCase_35_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('43', '43')
class CalculationTestCase_35_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('44', '44')
class CalculationTestCase_35_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('45', '45')
class CalculationTestCase_35_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('46', '46')
class CalculationTestCase_35_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('47', '47')
class CalculationTestCase_35_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('48', '48')
class CalculationTestCase_35_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('49', '49')
class CalculationTestCase_35_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('50', '50')
class CalculationTestCase_35_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('51', '51')
class CalculationTestCase_35_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('52', '52')
class CalculationTestCase_35_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('53', '53')
class CalculationTestCase_35_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('54', '54')
class CalculationTestCase_35_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('55', '55')
class CalculationTestCase_35_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('56', '56')
class CalculationTestCase_35_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('57', '57')
class CalculationTestCase_35_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('58', '58')
class CalculationTestCase_35_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('59', '59')
class CalculationTestCase_35_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('60', '60')
class CalculationTestCase_35_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('61', '61')
class CalculationTestCase_35_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('62', '62')
class CalculationTestCase_35_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('63', '63')
class CalculationTestCase_35_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('64', '64')
class CalculationTestCase_35_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('65', '65')
class CalculationTestCase_35_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('66', '66')
class CalculationTestCase_35_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('67', '67')
class CalculationTestCase_35_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('68', '68')
class CalculationTestCase_35_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('69', '69')
class CalculationTestCase_35_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('70', '70')
class CalculationTestCase_35_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('71', '71')
class CalculationTestCase_35_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('72', '72')
class CalculationTestCase_35_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('73', '73')
class CalculationTestCase_35_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('74', '74')
class CalculationTestCase_35_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('75', '75')
class CalculationTestCase_35_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('76', '76')
class CalculationTestCase_35_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('77', '77')
class CalculationTestCase_35_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('78', '78')
class CalculationTestCase_35_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('79', '79')
class CalculationTestCase_35_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('80', '80')
class CalculationTestCase_35_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('81', '81')
class CalculationTestCase_35_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('82', '82')
class CalculationTestCase_35_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('83', '83')
class CalculationTestCase_35_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('84', '84')
class CalculationTestCase_35_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 35 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('85', '85')
class CalculationTestCase_36_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('36', '36')
class CalculationTestCase_36_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('37', '37')
class CalculationTestCase_36_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('38', '38')
class CalculationTestCase_36_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('39', '39')
class CalculationTestCase_36_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('40', '40')
class CalculationTestCase_36_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('41', '41')
class CalculationTestCase_36_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('42', '42')
class CalculationTestCase_36_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('43', '43')
class CalculationTestCase_36_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('44', '44')
class CalculationTestCase_36_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('45', '45')
class CalculationTestCase_36_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('46', '46')
class CalculationTestCase_36_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('47', '47')
class CalculationTestCase_36_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('48', '48')
class CalculationTestCase_36_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('49', '49')
class CalculationTestCase_36_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('50', '50')
class CalculationTestCase_36_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('51', '51')
class CalculationTestCase_36_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('52', '52')
class CalculationTestCase_36_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('53', '53')
class CalculationTestCase_36_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('54', '54')
class CalculationTestCase_36_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('55', '55')
class CalculationTestCase_36_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('56', '56')
class CalculationTestCase_36_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('57', '57')
class CalculationTestCase_36_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('58', '58')
class CalculationTestCase_36_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('59', '59')
class CalculationTestCase_36_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('60', '60')
class CalculationTestCase_36_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('61', '61')
class CalculationTestCase_36_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('62', '62')
class CalculationTestCase_36_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('63', '63')
class CalculationTestCase_36_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('64', '64')
class CalculationTestCase_36_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('65', '65')
class CalculationTestCase_36_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('66', '66')
class CalculationTestCase_36_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('67', '67')
class CalculationTestCase_36_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('68', '68')
class CalculationTestCase_36_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('69', '69')
class CalculationTestCase_36_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('70', '70')
class CalculationTestCase_36_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('71', '71')
class CalculationTestCase_36_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('72', '72')
class CalculationTestCase_36_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('73', '73')
class CalculationTestCase_36_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('74', '74')
class CalculationTestCase_36_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('75', '75')
class CalculationTestCase_36_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('76', '76')
class CalculationTestCase_36_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('77', '77')
class CalculationTestCase_36_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('78', '78')
class CalculationTestCase_36_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('79', '79')
class CalculationTestCase_36_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('80', '80')
class CalculationTestCase_36_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('81', '81')
class CalculationTestCase_36_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('82', '82')
class CalculationTestCase_36_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('83', '83')
class CalculationTestCase_36_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('84', '84')
class CalculationTestCase_36_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('85', '85')
class CalculationTestCase_36_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 36 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('86', '86')
class CalculationTestCase_37_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('37', '37')
class CalculationTestCase_37_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('38', '38')
class CalculationTestCase_37_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('39', '39')
class CalculationTestCase_37_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('40', '40')
class CalculationTestCase_37_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('41', '41')
class CalculationTestCase_37_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('42', '42')
class CalculationTestCase_37_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('43', '43')
class CalculationTestCase_37_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('44', '44')
class CalculationTestCase_37_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('45', '45')
class CalculationTestCase_37_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('46', '46')
class CalculationTestCase_37_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('47', '47')
class CalculationTestCase_37_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('48', '48')
class CalculationTestCase_37_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('49', '49')
class CalculationTestCase_37_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('50', '50')
class CalculationTestCase_37_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('51', '51')
class CalculationTestCase_37_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('52', '52')
class CalculationTestCase_37_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('53', '53')
class CalculationTestCase_37_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('54', '54')
class CalculationTestCase_37_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('55', '55')
class CalculationTestCase_37_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('56', '56')
class CalculationTestCase_37_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('57', '57')
class CalculationTestCase_37_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('58', '58')
class CalculationTestCase_37_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('59', '59')
class CalculationTestCase_37_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('60', '60')
class CalculationTestCase_37_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('61', '61')
class CalculationTestCase_37_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('62', '62')
class CalculationTestCase_37_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('63', '63')
class CalculationTestCase_37_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('64', '64')
class CalculationTestCase_37_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('65', '65')
class CalculationTestCase_37_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('66', '66')
class CalculationTestCase_37_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('67', '67')
class CalculationTestCase_37_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('68', '68')
class CalculationTestCase_37_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('69', '69')
class CalculationTestCase_37_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('70', '70')
class CalculationTestCase_37_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('71', '71')
class CalculationTestCase_37_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('72', '72')
class CalculationTestCase_37_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('73', '73')
class CalculationTestCase_37_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('74', '74')
class CalculationTestCase_37_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('75', '75')
class CalculationTestCase_37_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('76', '76')
class CalculationTestCase_37_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('77', '77')
class CalculationTestCase_37_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('78', '78')
class CalculationTestCase_37_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('79', '79')
class CalculationTestCase_37_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('80', '80')
class CalculationTestCase_37_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('81', '81')
class CalculationTestCase_37_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('82', '82')
class CalculationTestCase_37_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('83', '83')
class CalculationTestCase_37_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('84', '84')
class CalculationTestCase_37_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('85', '85')
class CalculationTestCase_37_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('86', '86')
class CalculationTestCase_37_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 37 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('87', '87')
class CalculationTestCase_38_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('38', '38')
class CalculationTestCase_38_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('39', '39')
class CalculationTestCase_38_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('40', '40')
class CalculationTestCase_38_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('41', '41')
class CalculationTestCase_38_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('42', '42')
class CalculationTestCase_38_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('43', '43')
class CalculationTestCase_38_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('44', '44')
class CalculationTestCase_38_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('45', '45')
class CalculationTestCase_38_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('46', '46')
class CalculationTestCase_38_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('47', '47')
class CalculationTestCase_38_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('48', '48')
class CalculationTestCase_38_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('49', '49')
class CalculationTestCase_38_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('50', '50')
class CalculationTestCase_38_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('51', '51')
class CalculationTestCase_38_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('52', '52')
class CalculationTestCase_38_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('53', '53')
class CalculationTestCase_38_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('54', '54')
class CalculationTestCase_38_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('55', '55')
class CalculationTestCase_38_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('56', '56')
class CalculationTestCase_38_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('57', '57')
class CalculationTestCase_38_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('58', '58')
class CalculationTestCase_38_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('59', '59')
class CalculationTestCase_38_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('60', '60')
class CalculationTestCase_38_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('61', '61')
class CalculationTestCase_38_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('62', '62')
class CalculationTestCase_38_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('63', '63')
class CalculationTestCase_38_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('64', '64')
class CalculationTestCase_38_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('65', '65')
class CalculationTestCase_38_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('66', '66')
class CalculationTestCase_38_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('67', '67')
class CalculationTestCase_38_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('68', '68')
class CalculationTestCase_38_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('69', '69')
class CalculationTestCase_38_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('70', '70')
class CalculationTestCase_38_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('71', '71')
class CalculationTestCase_38_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('72', '72')
class CalculationTestCase_38_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('73', '73')
class CalculationTestCase_38_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('74', '74')
class CalculationTestCase_38_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('75', '75')
class CalculationTestCase_38_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('76', '76')
class CalculationTestCase_38_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('77', '77')
class CalculationTestCase_38_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('78', '78')
class CalculationTestCase_38_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('79', '79')
class CalculationTestCase_38_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('80', '80')
class CalculationTestCase_38_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('81', '81')
class CalculationTestCase_38_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('82', '82')
class CalculationTestCase_38_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('83', '83')
class CalculationTestCase_38_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('84', '84')
class CalculationTestCase_38_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('85', '85')
class CalculationTestCase_38_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('86', '86')
class CalculationTestCase_38_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('87', '87')
class CalculationTestCase_38_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 38 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('88', '88')
class CalculationTestCase_39_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('39', '39')
class CalculationTestCase_39_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('40', '40')
class CalculationTestCase_39_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('41', '41')
class CalculationTestCase_39_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('42', '42')
class CalculationTestCase_39_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('43', '43')
class CalculationTestCase_39_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('44', '44')
class CalculationTestCase_39_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('45', '45')
class CalculationTestCase_39_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('46', '46')
class CalculationTestCase_39_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('47', '47')
class CalculationTestCase_39_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('48', '48')
class CalculationTestCase_39_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('49', '49')
class CalculationTestCase_39_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('50', '50')
class CalculationTestCase_39_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('51', '51')
class CalculationTestCase_39_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('52', '52')
class CalculationTestCase_39_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('53', '53')
class CalculationTestCase_39_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('54', '54')
class CalculationTestCase_39_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('55', '55')
class CalculationTestCase_39_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('56', '56')
class CalculationTestCase_39_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('57', '57')
class CalculationTestCase_39_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('58', '58')
class CalculationTestCase_39_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('59', '59')
class CalculationTestCase_39_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('60', '60')
class CalculationTestCase_39_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('61', '61')
class CalculationTestCase_39_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('62', '62')
class CalculationTestCase_39_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('63', '63')
class CalculationTestCase_39_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('64', '64')
class CalculationTestCase_39_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('65', '65')
class CalculationTestCase_39_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('66', '66')
class CalculationTestCase_39_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('67', '67')
class CalculationTestCase_39_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('68', '68')
class CalculationTestCase_39_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('69', '69')
class CalculationTestCase_39_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('70', '70')
class CalculationTestCase_39_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('71', '71')
class CalculationTestCase_39_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('72', '72')
class CalculationTestCase_39_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('73', '73')
class CalculationTestCase_39_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('74', '74')
class CalculationTestCase_39_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('75', '75')
class CalculationTestCase_39_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('76', '76')
class CalculationTestCase_39_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('77', '77')
class CalculationTestCase_39_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('78', '78')
class CalculationTestCase_39_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('79', '79')
class CalculationTestCase_39_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('80', '80')
class CalculationTestCase_39_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('81', '81')
class CalculationTestCase_39_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('82', '82')
class CalculationTestCase_39_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('83', '83')
class CalculationTestCase_39_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('84', '84')
class CalculationTestCase_39_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('85', '85')
class CalculationTestCase_39_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('86', '86')
class CalculationTestCase_39_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('87', '87')
class CalculationTestCase_39_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('88', '88')
class CalculationTestCase_39_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 39 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('89', '89')
class CalculationTestCase_40_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('40', '40')
class CalculationTestCase_40_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('41', '41')
class CalculationTestCase_40_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('42', '42')
class CalculationTestCase_40_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('43', '43')
class CalculationTestCase_40_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('44', '44')
class CalculationTestCase_40_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('45', '45')
class CalculationTestCase_40_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('46', '46')
class CalculationTestCase_40_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('47', '47')
class CalculationTestCase_40_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('48', '48')
class CalculationTestCase_40_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('49', '49')
class CalculationTestCase_40_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('50', '50')
class CalculationTestCase_40_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('51', '51')
class CalculationTestCase_40_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('52', '52')
class CalculationTestCase_40_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('53', '53')
class CalculationTestCase_40_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('54', '54')
class CalculationTestCase_40_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('55', '55')
class CalculationTestCase_40_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('56', '56')
class CalculationTestCase_40_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('57', '57')
class CalculationTestCase_40_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('58', '58')
class CalculationTestCase_40_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('59', '59')
class CalculationTestCase_40_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('60', '60')
class CalculationTestCase_40_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('61', '61')
class CalculationTestCase_40_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('62', '62')
class CalculationTestCase_40_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('63', '63')
class CalculationTestCase_40_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('64', '64')
class CalculationTestCase_40_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('65', '65')
class CalculationTestCase_40_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('66', '66')
class CalculationTestCase_40_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('67', '67')
class CalculationTestCase_40_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('68', '68')
class CalculationTestCase_40_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('69', '69')
class CalculationTestCase_40_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('70', '70')
class CalculationTestCase_40_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('71', '71')
class CalculationTestCase_40_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('72', '72')
class CalculationTestCase_40_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('73', '73')
class CalculationTestCase_40_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('74', '74')
class CalculationTestCase_40_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('75', '75')
class CalculationTestCase_40_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('76', '76')
class CalculationTestCase_40_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('77', '77')
class CalculationTestCase_40_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('78', '78')
class CalculationTestCase_40_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('79', '79')
class CalculationTestCase_40_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('80', '80')
class CalculationTestCase_40_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('81', '81')
class CalculationTestCase_40_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('82', '82')
class CalculationTestCase_40_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('83', '83')
class CalculationTestCase_40_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('84', '84')
class CalculationTestCase_40_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('85', '85')
class CalculationTestCase_40_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('86', '86')
class CalculationTestCase_40_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('87', '87')
class CalculationTestCase_40_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('88', '88')
class CalculationTestCase_40_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('89', '89')
class CalculationTestCase_40_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 40 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('90', '90')
class CalculationTestCase_41_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('41', '41')
class CalculationTestCase_41_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('42', '42')
class CalculationTestCase_41_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('43', '43')
class CalculationTestCase_41_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('44', '44')
class CalculationTestCase_41_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('45', '45')
class CalculationTestCase_41_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('46', '46')
class CalculationTestCase_41_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('47', '47')
class CalculationTestCase_41_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('48', '48')
class CalculationTestCase_41_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('49', '49')
class CalculationTestCase_41_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('50', '50')
class CalculationTestCase_41_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('51', '51')
class CalculationTestCase_41_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('52', '52')
class CalculationTestCase_41_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('53', '53')
class CalculationTestCase_41_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('54', '54')
class CalculationTestCase_41_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('55', '55')
class CalculationTestCase_41_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('56', '56')
class CalculationTestCase_41_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('57', '57')
class CalculationTestCase_41_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('58', '58')
class CalculationTestCase_41_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('59', '59')
class CalculationTestCase_41_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('60', '60')
class CalculationTestCase_41_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('61', '61')
class CalculationTestCase_41_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('62', '62')
class CalculationTestCase_41_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('63', '63')
class CalculationTestCase_41_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('64', '64')
class CalculationTestCase_41_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('65', '65')
class CalculationTestCase_41_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('66', '66')
class CalculationTestCase_41_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('67', '67')
class CalculationTestCase_41_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('68', '68')
class CalculationTestCase_41_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('69', '69')
class CalculationTestCase_41_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('70', '70')
class CalculationTestCase_41_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('71', '71')
class CalculationTestCase_41_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('72', '72')
class CalculationTestCase_41_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('73', '73')
class CalculationTestCase_41_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('74', '74')
class CalculationTestCase_41_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('75', '75')
class CalculationTestCase_41_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('76', '76')
class CalculationTestCase_41_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('77', '77')
class CalculationTestCase_41_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('78', '78')
class CalculationTestCase_41_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('79', '79')
class CalculationTestCase_41_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('80', '80')
class CalculationTestCase_41_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('81', '81')
class CalculationTestCase_41_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('82', '82')
class CalculationTestCase_41_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('83', '83')
class CalculationTestCase_41_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('84', '84')
class CalculationTestCase_41_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('85', '85')
class CalculationTestCase_41_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('86', '86')
class CalculationTestCase_41_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('87', '87')
class CalculationTestCase_41_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('88', '88')
class CalculationTestCase_41_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('89', '89')
class CalculationTestCase_41_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('90', '90')
class CalculationTestCase_41_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 41 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('91', '91')
class CalculationTestCase_42_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('42', '42')
class CalculationTestCase_42_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('43', '43')
class CalculationTestCase_42_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('44', '44')
class CalculationTestCase_42_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('45', '45')
class CalculationTestCase_42_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('46', '46')
class CalculationTestCase_42_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('47', '47')
class CalculationTestCase_42_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('48', '48')
class CalculationTestCase_42_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('49', '49')
class CalculationTestCase_42_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('50', '50')
class CalculationTestCase_42_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('51', '51')
class CalculationTestCase_42_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('52', '52')
class CalculationTestCase_42_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('53', '53')
class CalculationTestCase_42_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('54', '54')
class CalculationTestCase_42_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('55', '55')
class CalculationTestCase_42_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('56', '56')
class CalculationTestCase_42_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('57', '57')
class CalculationTestCase_42_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('58', '58')
class CalculationTestCase_42_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('59', '59')
class CalculationTestCase_42_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('60', '60')
class CalculationTestCase_42_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('61', '61')
class CalculationTestCase_42_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('62', '62')
class CalculationTestCase_42_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('63', '63')
class CalculationTestCase_42_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('64', '64')
class CalculationTestCase_42_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('65', '65')
class CalculationTestCase_42_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('66', '66')
class CalculationTestCase_42_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('67', '67')
class CalculationTestCase_42_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('68', '68')
class CalculationTestCase_42_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('69', '69')
class CalculationTestCase_42_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('70', '70')
class CalculationTestCase_42_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('71', '71')
class CalculationTestCase_42_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('72', '72')
class CalculationTestCase_42_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('73', '73')
class CalculationTestCase_42_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('74', '74')
class CalculationTestCase_42_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('75', '75')
class CalculationTestCase_42_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('76', '76')
class CalculationTestCase_42_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('77', '77')
class CalculationTestCase_42_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('78', '78')
class CalculationTestCase_42_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('79', '79')
class CalculationTestCase_42_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('80', '80')
class CalculationTestCase_42_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('81', '81')
class CalculationTestCase_42_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('82', '82')
class CalculationTestCase_42_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('83', '83')
class CalculationTestCase_42_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('84', '84')
class CalculationTestCase_42_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('85', '85')
class CalculationTestCase_42_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('86', '86')
class CalculationTestCase_42_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('87', '87')
class CalculationTestCase_42_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('88', '88')
class CalculationTestCase_42_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('89', '89')
class CalculationTestCase_42_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('90', '90')
class CalculationTestCase_42_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('91', '91')
class CalculationTestCase_42_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 42 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('92', '92')
class CalculationTestCase_43_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('43', '43')
class CalculationTestCase_43_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('44', '44')
class CalculationTestCase_43_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('45', '45')
class CalculationTestCase_43_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('46', '46')
class CalculationTestCase_43_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('47', '47')
class CalculationTestCase_43_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('48', '48')
class CalculationTestCase_43_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('49', '49')
class CalculationTestCase_43_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('50', '50')
class CalculationTestCase_43_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('51', '51')
class CalculationTestCase_43_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('52', '52')
class CalculationTestCase_43_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('53', '53')
class CalculationTestCase_43_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('54', '54')
class CalculationTestCase_43_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('55', '55')
class CalculationTestCase_43_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('56', '56')
class CalculationTestCase_43_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('57', '57')
class CalculationTestCase_43_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('58', '58')
class CalculationTestCase_43_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('59', '59')
class CalculationTestCase_43_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('60', '60')
class CalculationTestCase_43_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('61', '61')
class CalculationTestCase_43_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('62', '62')
class CalculationTestCase_43_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('63', '63')
class CalculationTestCase_43_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('64', '64')
class CalculationTestCase_43_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('65', '65')
class CalculationTestCase_43_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('66', '66')
class CalculationTestCase_43_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('67', '67')
class CalculationTestCase_43_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('68', '68')
class CalculationTestCase_43_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('69', '69')
class CalculationTestCase_43_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('70', '70')
class CalculationTestCase_43_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('71', '71')
class CalculationTestCase_43_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('72', '72')
class CalculationTestCase_43_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('73', '73')
class CalculationTestCase_43_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('74', '74')
class CalculationTestCase_43_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('75', '75')
class CalculationTestCase_43_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('76', '76')
class CalculationTestCase_43_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('77', '77')
class CalculationTestCase_43_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('78', '78')
class CalculationTestCase_43_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('79', '79')
class CalculationTestCase_43_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('80', '80')
class CalculationTestCase_43_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('81', '81')
class CalculationTestCase_43_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('82', '82')
class CalculationTestCase_43_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('83', '83')
class CalculationTestCase_43_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('84', '84')
class CalculationTestCase_43_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('85', '85')
class CalculationTestCase_43_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('86', '86')
class CalculationTestCase_43_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('87', '87')
class CalculationTestCase_43_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('88', '88')
class CalculationTestCase_43_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('89', '89')
class CalculationTestCase_43_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('90', '90')
class CalculationTestCase_43_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('91', '91')
class CalculationTestCase_43_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('92', '92')
class CalculationTestCase_43_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 43 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('93', '93')
class CalculationTestCase_44_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('44', '44')
class CalculationTestCase_44_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('45', '45')
class CalculationTestCase_44_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('46', '46')
class CalculationTestCase_44_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('47', '47')
class CalculationTestCase_44_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('48', '48')
class CalculationTestCase_44_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('49', '49')
class CalculationTestCase_44_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('50', '50')
class CalculationTestCase_44_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('51', '51')
class CalculationTestCase_44_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('52', '52')
class CalculationTestCase_44_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('53', '53')
class CalculationTestCase_44_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('54', '54')
class CalculationTestCase_44_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('55', '55')
class CalculationTestCase_44_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('56', '56')
class CalculationTestCase_44_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('57', '57')
class CalculationTestCase_44_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('58', '58')
class CalculationTestCase_44_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('59', '59')
class CalculationTestCase_44_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('60', '60')
class CalculationTestCase_44_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('61', '61')
class CalculationTestCase_44_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('62', '62')
class CalculationTestCase_44_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('63', '63')
class CalculationTestCase_44_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('64', '64')
class CalculationTestCase_44_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('65', '65')
class CalculationTestCase_44_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('66', '66')
class CalculationTestCase_44_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('67', '67')
class CalculationTestCase_44_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('68', '68')
class CalculationTestCase_44_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('69', '69')
class CalculationTestCase_44_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('70', '70')
class CalculationTestCase_44_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('71', '71')
class CalculationTestCase_44_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('72', '72')
class CalculationTestCase_44_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('73', '73')
class CalculationTestCase_44_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('74', '74')
class CalculationTestCase_44_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('75', '75')
class CalculationTestCase_44_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('76', '76')
class CalculationTestCase_44_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('77', '77')
class CalculationTestCase_44_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('78', '78')
class CalculationTestCase_44_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('79', '79')
class CalculationTestCase_44_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('80', '80')
class CalculationTestCase_44_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('81', '81')
class CalculationTestCase_44_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('82', '82')
class CalculationTestCase_44_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('83', '83')
class CalculationTestCase_44_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('84', '84')
class CalculationTestCase_44_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('85', '85')
class CalculationTestCase_44_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('86', '86')
class CalculationTestCase_44_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('87', '87')
class CalculationTestCase_44_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('88', '88')
class CalculationTestCase_44_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('89', '89')
class CalculationTestCase_44_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('90', '90')
class CalculationTestCase_44_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('91', '91')
class CalculationTestCase_44_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('92', '92')
class CalculationTestCase_44_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('93', '93')
class CalculationTestCase_44_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 44 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('94', '94')
class CalculationTestCase_45_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('45', '45')
class CalculationTestCase_45_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('46', '46')
class CalculationTestCase_45_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('47', '47')
class CalculationTestCase_45_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('48', '48')
class CalculationTestCase_45_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('49', '49')
class CalculationTestCase_45_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('50', '50')
class CalculationTestCase_45_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('51', '51')
class CalculationTestCase_45_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('52', '52')
class CalculationTestCase_45_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('53', '53')
class CalculationTestCase_45_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('54', '54')
class CalculationTestCase_45_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('55', '55')
class CalculationTestCase_45_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('56', '56')
class CalculationTestCase_45_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('57', '57')
class CalculationTestCase_45_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('58', '58')
class CalculationTestCase_45_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('59', '59')
class CalculationTestCase_45_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('60', '60')
class CalculationTestCase_45_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('61', '61')
class CalculationTestCase_45_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('62', '62')
class CalculationTestCase_45_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('63', '63')
class CalculationTestCase_45_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('64', '64')
class CalculationTestCase_45_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('65', '65')
class CalculationTestCase_45_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('66', '66')
class CalculationTestCase_45_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('67', '67')
class CalculationTestCase_45_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('68', '68')
class CalculationTestCase_45_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('69', '69')
class CalculationTestCase_45_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('70', '70')
class CalculationTestCase_45_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('71', '71')
class CalculationTestCase_45_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('72', '72')
class CalculationTestCase_45_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('73', '73')
class CalculationTestCase_45_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('74', '74')
class CalculationTestCase_45_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('75', '75')
class CalculationTestCase_45_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('76', '76')
class CalculationTestCase_45_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('77', '77')
class CalculationTestCase_45_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('78', '78')
class CalculationTestCase_45_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('79', '79')
class CalculationTestCase_45_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('80', '80')
class CalculationTestCase_45_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('81', '81')
class CalculationTestCase_45_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('82', '82')
class CalculationTestCase_45_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('83', '83')
class CalculationTestCase_45_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('84', '84')
class CalculationTestCase_45_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('85', '85')
class CalculationTestCase_45_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('86', '86')
class CalculationTestCase_45_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('87', '87')
class CalculationTestCase_45_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('88', '88')
class CalculationTestCase_45_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('89', '89')
class CalculationTestCase_45_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('90', '90')
class CalculationTestCase_45_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('91', '91')
class CalculationTestCase_45_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('92', '92')
class CalculationTestCase_45_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('93', '93')
class CalculationTestCase_45_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('94', '94')
class CalculationTestCase_45_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 45 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('95', '95')
class CalculationTestCase_46_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('46', '46')
class CalculationTestCase_46_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('47', '47')
class CalculationTestCase_46_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('48', '48')
class CalculationTestCase_46_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('49', '49')
class CalculationTestCase_46_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('50', '50')
class CalculationTestCase_46_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('51', '51')
class CalculationTestCase_46_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('52', '52')
class CalculationTestCase_46_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('53', '53')
class CalculationTestCase_46_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('54', '54')
class CalculationTestCase_46_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('55', '55')
class CalculationTestCase_46_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('56', '56')
class CalculationTestCase_46_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('57', '57')
class CalculationTestCase_46_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('58', '58')
class CalculationTestCase_46_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('59', '59')
class CalculationTestCase_46_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('60', '60')
class CalculationTestCase_46_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('61', '61')
class CalculationTestCase_46_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('62', '62')
class CalculationTestCase_46_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('63', '63')
class CalculationTestCase_46_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('64', '64')
class CalculationTestCase_46_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('65', '65')
class CalculationTestCase_46_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('66', '66')
class CalculationTestCase_46_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('67', '67')
class CalculationTestCase_46_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('68', '68')
class CalculationTestCase_46_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('69', '69')
class CalculationTestCase_46_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('70', '70')
class CalculationTestCase_46_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('71', '71')
class CalculationTestCase_46_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('72', '72')
class CalculationTestCase_46_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('73', '73')
class CalculationTestCase_46_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('74', '74')
class CalculationTestCase_46_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('75', '75')
class CalculationTestCase_46_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('76', '76')
class CalculationTestCase_46_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('77', '77')
class CalculationTestCase_46_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('78', '78')
class CalculationTestCase_46_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('79', '79')
class CalculationTestCase_46_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('80', '80')
class CalculationTestCase_46_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('81', '81')
class CalculationTestCase_46_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('82', '82')
class CalculationTestCase_46_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('83', '83')
class CalculationTestCase_46_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('84', '84')
class CalculationTestCase_46_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('85', '85')
class CalculationTestCase_46_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('86', '86')
class CalculationTestCase_46_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('87', '87')
class CalculationTestCase_46_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('88', '88')
class CalculationTestCase_46_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('89', '89')
class CalculationTestCase_46_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('90', '90')
class CalculationTestCase_46_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('91', '91')
class CalculationTestCase_46_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('92', '92')
class CalculationTestCase_46_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('93', '93')
class CalculationTestCase_46_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('94', '94')
class CalculationTestCase_46_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('95', '95')
class CalculationTestCase_46_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 46 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('96', '96')
class CalculationTestCase_47_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('47', '47')
class CalculationTestCase_47_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('48', '48')
class CalculationTestCase_47_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('49', '49')
class CalculationTestCase_47_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('50', '50')
class CalculationTestCase_47_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('51', '51')
class CalculationTestCase_47_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('52', '52')
class CalculationTestCase_47_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('53', '53')
class CalculationTestCase_47_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('54', '54')
class CalculationTestCase_47_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('55', '55')
class CalculationTestCase_47_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('56', '56')
class CalculationTestCase_47_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('57', '57')
class CalculationTestCase_47_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('58', '58')
class CalculationTestCase_47_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('59', '59')
class CalculationTestCase_47_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('60', '60')
class CalculationTestCase_47_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('61', '61')
class CalculationTestCase_47_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('62', '62')
class CalculationTestCase_47_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('63', '63')
class CalculationTestCase_47_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('64', '64')
class CalculationTestCase_47_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('65', '65')
class CalculationTestCase_47_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('66', '66')
class CalculationTestCase_47_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('67', '67')
class CalculationTestCase_47_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('68', '68')
class CalculationTestCase_47_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('69', '69')
class CalculationTestCase_47_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('70', '70')
class CalculationTestCase_47_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('71', '71')
class CalculationTestCase_47_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('72', '72')
class CalculationTestCase_47_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('73', '73')
class CalculationTestCase_47_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('74', '74')
class CalculationTestCase_47_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('75', '75')
class CalculationTestCase_47_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('76', '76')
class CalculationTestCase_47_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('77', '77')
class CalculationTestCase_47_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('78', '78')
class CalculationTestCase_47_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('79', '79')
class CalculationTestCase_47_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('80', '80')
class CalculationTestCase_47_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('81', '81')
class CalculationTestCase_47_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('82', '82')
class CalculationTestCase_47_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('83', '83')
class CalculationTestCase_47_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('84', '84')
class CalculationTestCase_47_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('85', '85')
class CalculationTestCase_47_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('86', '86')
class CalculationTestCase_47_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('87', '87')
class CalculationTestCase_47_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('88', '88')
class CalculationTestCase_47_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('89', '89')
class CalculationTestCase_47_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('90', '90')
class CalculationTestCase_47_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('91', '91')
class CalculationTestCase_47_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('92', '92')
class CalculationTestCase_47_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('93', '93')
class CalculationTestCase_47_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('94', '94')
class CalculationTestCase_47_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('95', '95')
class CalculationTestCase_47_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('96', '96')
class CalculationTestCase_47_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 47 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('97', '97')
class CalculationTestCase_48_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('48', '48')
class CalculationTestCase_48_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('49', '49')
class CalculationTestCase_48_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('50', '50')
class CalculationTestCase_48_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('51', '51')
class CalculationTestCase_48_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('52', '52')
class CalculationTestCase_48_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('53', '53')
class CalculationTestCase_48_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('54', '54')
class CalculationTestCase_48_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('55', '55')
class CalculationTestCase_48_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('56', '56')
class CalculationTestCase_48_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('57', '57')
class CalculationTestCase_48_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('58', '58')
class CalculationTestCase_48_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('59', '59')
class CalculationTestCase_48_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('60', '60')
class CalculationTestCase_48_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('61', '61')
class CalculationTestCase_48_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('62', '62')
class CalculationTestCase_48_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('63', '63')
class CalculationTestCase_48_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('64', '64')
class CalculationTestCase_48_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('65', '65')
class CalculationTestCase_48_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('66', '66')
class CalculationTestCase_48_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('67', '67')
class CalculationTestCase_48_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('68', '68')
class CalculationTestCase_48_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('69', '69')
class CalculationTestCase_48_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('70', '70')
class CalculationTestCase_48_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('71', '71')
class CalculationTestCase_48_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('72', '72')
class CalculationTestCase_48_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('73', '73')
class CalculationTestCase_48_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('74', '74')
class CalculationTestCase_48_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('75', '75')
class CalculationTestCase_48_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('76', '76')
class CalculationTestCase_48_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('77', '77')
class CalculationTestCase_48_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('78', '78')
class CalculationTestCase_48_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('79', '79')
class CalculationTestCase_48_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('80', '80')
class CalculationTestCase_48_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('81', '81')
class CalculationTestCase_48_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('82', '82')
class CalculationTestCase_48_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('83', '83')
class CalculationTestCase_48_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('84', '84')
class CalculationTestCase_48_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('85', '85')
class CalculationTestCase_48_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('86', '86')
class CalculationTestCase_48_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('87', '87')
class CalculationTestCase_48_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('88', '88')
class CalculationTestCase_48_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('89', '89')
class CalculationTestCase_48_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('90', '90')
class CalculationTestCase_48_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('91', '91')
class CalculationTestCase_48_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('92', '92')
class CalculationTestCase_48_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('93', '93')
class CalculationTestCase_48_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('94', '94')
class CalculationTestCase_48_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('95', '95')
class CalculationTestCase_48_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('96', '96')
class CalculationTestCase_48_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('97', '97')
class CalculationTestCase_48_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 48 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('98', '98')
class CalculationTestCase_49_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('49', '49')
class CalculationTestCase_49_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('50', '50')
class CalculationTestCase_49_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('51', '51')
class CalculationTestCase_49_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('52', '52')
class CalculationTestCase_49_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('53', '53')
class CalculationTestCase_49_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('54', '54')
class CalculationTestCase_49_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('55', '55')
class CalculationTestCase_49_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('56', '56')
class CalculationTestCase_49_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('57', '57')
class CalculationTestCase_49_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('58', '58')
class CalculationTestCase_49_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('59', '59')
class CalculationTestCase_49_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('60', '60')
class CalculationTestCase_49_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('61', '61')
class CalculationTestCase_49_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('62', '62')
class CalculationTestCase_49_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('63', '63')
class CalculationTestCase_49_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('64', '64')
class CalculationTestCase_49_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('65', '65')
class CalculationTestCase_49_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('66', '66')
class CalculationTestCase_49_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('67', '67')
class CalculationTestCase_49_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('68', '68')
class CalculationTestCase_49_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('69', '69')
class CalculationTestCase_49_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('70', '70')
class CalculationTestCase_49_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('71', '71')
class CalculationTestCase_49_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('72', '72')
class CalculationTestCase_49_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('73', '73')
class CalculationTestCase_49_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('74', '74')
class CalculationTestCase_49_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('75', '75')
class CalculationTestCase_49_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('76', '76')
class CalculationTestCase_49_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('77', '77')
class CalculationTestCase_49_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('78', '78')
class CalculationTestCase_49_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('79', '79')
class CalculationTestCase_49_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('80', '80')
class CalculationTestCase_49_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('81', '81')
class CalculationTestCase_49_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('82', '82')
class CalculationTestCase_49_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('83', '83')
class CalculationTestCase_49_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('84', '84')
class CalculationTestCase_49_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('85', '85')
class CalculationTestCase_49_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('86', '86')
class CalculationTestCase_49_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('87', '87')
class CalculationTestCase_49_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('88', '88')
class CalculationTestCase_49_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('89', '89')
class CalculationTestCase_49_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('90', '90')
class CalculationTestCase_49_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('91', '91')
class CalculationTestCase_49_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('92', '92')
class CalculationTestCase_49_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('93', '93')
class CalculationTestCase_49_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('94', '94')
class CalculationTestCase_49_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('95', '95')
class CalculationTestCase_49_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('96', '96')
class CalculationTestCase_49_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('97', '97')
class CalculationTestCase_49_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('98', '98')
class CalculationTestCase_49_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 49 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('99', '99')
class CalculationTestCase_50_plus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 0
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 0:
            self.assertEqual('50', '50')
class CalculationTestCase_50_plus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 1
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 1:
            self.assertEqual('51', '51')
class CalculationTestCase_50_plus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 2
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 2:
            self.assertEqual('52', '52')
class CalculationTestCase_50_plus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 3
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 3:
            self.assertEqual('53', '53')
class CalculationTestCase_50_plus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 4
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 4:
            self.assertEqual('54', '54')
class CalculationTestCase_50_plus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 5
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 5:
            self.assertEqual('55', '55')
class CalculationTestCase_50_plus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 6
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 6:
            self.assertEqual('56', '56')
class CalculationTestCase_50_plus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 7
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 7:
            self.assertEqual('57', '57')
class CalculationTestCase_50_plus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 8
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 8:
            self.assertEqual('58', '58')
class CalculationTestCase_50_plus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 9
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 9:
            self.assertEqual('59', '59')
class CalculationTestCase_50_plus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 10
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 10:
            self.assertEqual('60', '60')
class CalculationTestCase_50_plus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 11
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 11:
            self.assertEqual('61', '61')
class CalculationTestCase_50_plus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 12
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 12:
            self.assertEqual('62', '62')
class CalculationTestCase_50_plus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 13
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 13:
            self.assertEqual('63', '63')
class CalculationTestCase_50_plus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 14
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 14:
            self.assertEqual('64', '64')
class CalculationTestCase_50_plus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 15
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 15:
            self.assertEqual('65', '65')
class CalculationTestCase_50_plus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 16
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 16:
            self.assertEqual('66', '66')
class CalculationTestCase_50_plus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 17
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 17:
            self.assertEqual('67', '67')
class CalculationTestCase_50_plus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 18
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 18:
            self.assertEqual('68', '68')
class CalculationTestCase_50_plus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 19
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 19:
            self.assertEqual('69', '69')
class CalculationTestCase_50_plus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 20
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 20:
            self.assertEqual('70', '70')
class CalculationTestCase_50_plus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 21
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 21:
            self.assertEqual('71', '71')
class CalculationTestCase_50_plus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 22
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 22:
            self.assertEqual('72', '72')
class CalculationTestCase_50_plus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 23
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 23:
            self.assertEqual('73', '73')
class CalculationTestCase_50_plus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 24
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 24:
            self.assertEqual('74', '74')
class CalculationTestCase_50_plus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 25
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 25:
            self.assertEqual('75', '75')
class CalculationTestCase_50_plus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 26
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 26:
            self.assertEqual('76', '76')
class CalculationTestCase_50_plus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 27
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 27:
            self.assertEqual('77', '77')
class CalculationTestCase_50_plus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 28
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 28:
            self.assertEqual('78', '78')
class CalculationTestCase_50_plus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 29
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 29:
            self.assertEqual('79', '79')
class CalculationTestCase_50_plus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 30
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 30:
            self.assertEqual('80', '80')
class CalculationTestCase_50_plus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 31
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 31:
            self.assertEqual('81', '81')
class CalculationTestCase_50_plus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 32
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 32:
            self.assertEqual('82', '82')
class CalculationTestCase_50_plus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 33
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 33:
            self.assertEqual('83', '83')
class CalculationTestCase_50_plus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 34
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 34:
            self.assertEqual('84', '84')
class CalculationTestCase_50_plus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 35
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 35:
            self.assertEqual('85', '85')
class CalculationTestCase_50_plus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 36
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 36:
            self.assertEqual('86', '86')
class CalculationTestCase_50_plus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 37
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 37:
            self.assertEqual('87', '87')
class CalculationTestCase_50_plus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 38
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 38:
            self.assertEqual('88', '88')
class CalculationTestCase_50_plus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 39
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 39:
            self.assertEqual('89', '89')
class CalculationTestCase_50_plus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 40
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 40:
            self.assertEqual('90', '90')
class CalculationTestCase_50_plus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 41
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 41:
            self.assertEqual('91', '91')
class CalculationTestCase_50_plus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 42
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 42:
            self.assertEqual('92', '92')
class CalculationTestCase_50_plus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 43
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 43:
            self.assertEqual('93', '93')
class CalculationTestCase_50_plus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 44
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 44:
            self.assertEqual('94', '94')
class CalculationTestCase_50_plus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 45
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 45:
            self.assertEqual('95', '95')
class CalculationTestCase_50_plus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 46
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 46:
            self.assertEqual('96', '96')
class CalculationTestCase_50_plus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 47
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 47:
            self.assertEqual('97', '97')
class CalculationTestCase_50_plus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 48
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 48:
            self.assertEqual('98', '98')
class CalculationTestCase_50_plus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 49
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 49:
            self.assertEqual('99', '99')
class CalculationTestCase_50_plus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 50
        self.sign = '+'
        if self.num1 == 50 and self.sign == '+' and self.num2 == 50:
            self.assertEqual('100', '100')
class CalculationTestCase_0_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_0_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('-1', '-1')
class CalculationTestCase_0_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('-2', '-2')
class CalculationTestCase_0_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('-3', '-3')
class CalculationTestCase_0_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('-4', '-4')
class CalculationTestCase_0_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('-5', '-5')
class CalculationTestCase_0_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('-6', '-6')
class CalculationTestCase_0_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('-7', '-7')
class CalculationTestCase_0_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('-8', '-8')
class CalculationTestCase_0_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('-9', '-9')
class CalculationTestCase_0_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('-10', '-10')
class CalculationTestCase_0_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('-11', '-11')
class CalculationTestCase_0_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-12', '-12')
class CalculationTestCase_0_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-13', '-13')
class CalculationTestCase_0_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-14', '-14')
class CalculationTestCase_0_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-15', '-15')
class CalculationTestCase_0_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-16', '-16')
class CalculationTestCase_0_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-17', '-17')
class CalculationTestCase_0_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-18', '-18')
class CalculationTestCase_0_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-19', '-19')
class CalculationTestCase_0_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-20', '-20')
class CalculationTestCase_0_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-21', '-21')
class CalculationTestCase_0_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-22', '-22')
class CalculationTestCase_0_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-23', '-23')
class CalculationTestCase_0_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-24', '-24')
class CalculationTestCase_0_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-25', '-25')
class CalculationTestCase_0_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-26', '-26')
class CalculationTestCase_0_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-27', '-27')
class CalculationTestCase_0_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-28', '-28')
class CalculationTestCase_0_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-29', '-29')
class CalculationTestCase_0_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-30', '-30')
class CalculationTestCase_0_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-31', '-31')
class CalculationTestCase_0_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-32', '-32')
class CalculationTestCase_0_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-33', '-33')
class CalculationTestCase_0_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-34', '-34')
class CalculationTestCase_0_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-35', '-35')
class CalculationTestCase_0_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-36', '-36')
class CalculationTestCase_0_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-37', '-37')
class CalculationTestCase_0_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-38', '-38')
class CalculationTestCase_0_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-39', '-39')
class CalculationTestCase_0_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-40', '-40')
class CalculationTestCase_0_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-41', '-41')
class CalculationTestCase_0_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-42', '-42')
class CalculationTestCase_0_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-43', '-43')
class CalculationTestCase_0_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-44', '-44')
class CalculationTestCase_0_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-45', '-45')
class CalculationTestCase_0_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-46', '-46')
class CalculationTestCase_0_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-47', '-47')
class CalculationTestCase_0_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-48', '-48')
class CalculationTestCase_0_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-49', '-49')
class CalculationTestCase_0_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 0 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-50', '-50')
class CalculationTestCase_1_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('1', '1')
class CalculationTestCase_1_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('0', '0')
class CalculationTestCase_1_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('-1', '-1')
class CalculationTestCase_1_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('-2', '-2')
class CalculationTestCase_1_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('-3', '-3')
class CalculationTestCase_1_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('-4', '-4')
class CalculationTestCase_1_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('-5', '-5')
class CalculationTestCase_1_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('-6', '-6')
class CalculationTestCase_1_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('-7', '-7')
class CalculationTestCase_1_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('-8', '-8')
class CalculationTestCase_1_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('-9', '-9')
class CalculationTestCase_1_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('-10', '-10')
class CalculationTestCase_1_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-11', '-11')
class CalculationTestCase_1_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-12', '-12')
class CalculationTestCase_1_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-13', '-13')
class CalculationTestCase_1_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-14', '-14')
class CalculationTestCase_1_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-15', '-15')
class CalculationTestCase_1_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-16', '-16')
class CalculationTestCase_1_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-17', '-17')
class CalculationTestCase_1_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-18', '-18')
class CalculationTestCase_1_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-19', '-19')
class CalculationTestCase_1_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-20', '-20')
class CalculationTestCase_1_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-21', '-21')
class CalculationTestCase_1_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-22', '-22')
class CalculationTestCase_1_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-23', '-23')
class CalculationTestCase_1_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-24', '-24')
class CalculationTestCase_1_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-25', '-25')
class CalculationTestCase_1_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-26', '-26')
class CalculationTestCase_1_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-27', '-27')
class CalculationTestCase_1_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-28', '-28')
class CalculationTestCase_1_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-29', '-29')
class CalculationTestCase_1_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-30', '-30')
class CalculationTestCase_1_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-31', '-31')
class CalculationTestCase_1_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-32', '-32')
class CalculationTestCase_1_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-33', '-33')
class CalculationTestCase_1_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-34', '-34')
class CalculationTestCase_1_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-35', '-35')
class CalculationTestCase_1_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-36', '-36')
class CalculationTestCase_1_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-37', '-37')
class CalculationTestCase_1_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-38', '-38')
class CalculationTestCase_1_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-39', '-39')
class CalculationTestCase_1_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-40', '-40')
class CalculationTestCase_1_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-41', '-41')
class CalculationTestCase_1_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-42', '-42')
class CalculationTestCase_1_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-43', '-43')
class CalculationTestCase_1_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-44', '-44')
class CalculationTestCase_1_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-45', '-45')
class CalculationTestCase_1_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-46', '-46')
class CalculationTestCase_1_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-47', '-47')
class CalculationTestCase_1_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-48', '-48')
class CalculationTestCase_1_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 1 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-49', '-49')
class CalculationTestCase_2_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('2', '2')
class CalculationTestCase_2_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('1', '1')
class CalculationTestCase_2_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('0', '0')
class CalculationTestCase_2_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('-1', '-1')
class CalculationTestCase_2_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('-2', '-2')
class CalculationTestCase_2_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('-3', '-3')
class CalculationTestCase_2_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('-4', '-4')
class CalculationTestCase_2_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('-5', '-5')
class CalculationTestCase_2_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('-6', '-6')
class CalculationTestCase_2_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('-7', '-7')
class CalculationTestCase_2_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('-8', '-8')
class CalculationTestCase_2_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('-9', '-9')
class CalculationTestCase_2_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-10', '-10')
class CalculationTestCase_2_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-11', '-11')
class CalculationTestCase_2_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-12', '-12')
class CalculationTestCase_2_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-13', '-13')
class CalculationTestCase_2_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-14', '-14')
class CalculationTestCase_2_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-15', '-15')
class CalculationTestCase_2_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-16', '-16')
class CalculationTestCase_2_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-17', '-17')
class CalculationTestCase_2_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-18', '-18')
class CalculationTestCase_2_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-19', '-19')
class CalculationTestCase_2_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-20', '-20')
class CalculationTestCase_2_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-21', '-21')
class CalculationTestCase_2_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-22', '-22')
class CalculationTestCase_2_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-23', '-23')
class CalculationTestCase_2_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-24', '-24')
class CalculationTestCase_2_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-25', '-25')
class CalculationTestCase_2_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-26', '-26')
class CalculationTestCase_2_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-27', '-27')
class CalculationTestCase_2_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-28', '-28')
class CalculationTestCase_2_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-29', '-29')
class CalculationTestCase_2_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-30', '-30')
class CalculationTestCase_2_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-31', '-31')
class CalculationTestCase_2_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-32', '-32')
class CalculationTestCase_2_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-33', '-33')
class CalculationTestCase_2_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-34', '-34')
class CalculationTestCase_2_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-35', '-35')
class CalculationTestCase_2_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-36', '-36')
class CalculationTestCase_2_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-37', '-37')
class CalculationTestCase_2_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-38', '-38')
class CalculationTestCase_2_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-39', '-39')
class CalculationTestCase_2_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-40', '-40')
class CalculationTestCase_2_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-41', '-41')
class CalculationTestCase_2_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-42', '-42')
class CalculationTestCase_2_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-43', '-43')
class CalculationTestCase_2_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-44', '-44')
class CalculationTestCase_2_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-45', '-45')
class CalculationTestCase_2_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-46', '-46')
class CalculationTestCase_2_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-47', '-47')
class CalculationTestCase_2_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 2 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-48', '-48')
class CalculationTestCase_3_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('3', '3')
class CalculationTestCase_3_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('2', '2')
class CalculationTestCase_3_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('1', '1')
class CalculationTestCase_3_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('0', '0')
class CalculationTestCase_3_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('-1', '-1')
class CalculationTestCase_3_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('-2', '-2')
class CalculationTestCase_3_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('-3', '-3')
class CalculationTestCase_3_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('-4', '-4')
class CalculationTestCase_3_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('-5', '-5')
class CalculationTestCase_3_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('-6', '-6')
class CalculationTestCase_3_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('-7', '-7')
class CalculationTestCase_3_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('-8', '-8')
class CalculationTestCase_3_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-9', '-9')
class CalculationTestCase_3_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-10', '-10')
class CalculationTestCase_3_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-11', '-11')
class CalculationTestCase_3_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-12', '-12')
class CalculationTestCase_3_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-13', '-13')
class CalculationTestCase_3_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-14', '-14')
class CalculationTestCase_3_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-15', '-15')
class CalculationTestCase_3_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-16', '-16')
class CalculationTestCase_3_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-17', '-17')
class CalculationTestCase_3_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-18', '-18')
class CalculationTestCase_3_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-19', '-19')
class CalculationTestCase_3_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-20', '-20')
class CalculationTestCase_3_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-21', '-21')
class CalculationTestCase_3_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-22', '-22')
class CalculationTestCase_3_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-23', '-23')
class CalculationTestCase_3_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-24', '-24')
class CalculationTestCase_3_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-25', '-25')
class CalculationTestCase_3_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-26', '-26')
class CalculationTestCase_3_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-27', '-27')
class CalculationTestCase_3_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-28', '-28')
class CalculationTestCase_3_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-29', '-29')
class CalculationTestCase_3_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-30', '-30')
class CalculationTestCase_3_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-31', '-31')
class CalculationTestCase_3_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-32', '-32')
class CalculationTestCase_3_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-33', '-33')
class CalculationTestCase_3_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-34', '-34')
class CalculationTestCase_3_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-35', '-35')
class CalculationTestCase_3_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-36', '-36')
class CalculationTestCase_3_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-37', '-37')
class CalculationTestCase_3_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-38', '-38')
class CalculationTestCase_3_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-39', '-39')
class CalculationTestCase_3_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-40', '-40')
class CalculationTestCase_3_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-41', '-41')
class CalculationTestCase_3_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-42', '-42')
class CalculationTestCase_3_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-43', '-43')
class CalculationTestCase_3_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-44', '-44')
class CalculationTestCase_3_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-45', '-45')
class CalculationTestCase_3_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-46', '-46')
class CalculationTestCase_3_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 3 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-47', '-47')
class CalculationTestCase_4_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('4', '4')
class CalculationTestCase_4_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('3', '3')
class CalculationTestCase_4_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('2', '2')
class CalculationTestCase_4_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('1', '1')
class CalculationTestCase_4_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('0', '0')
class CalculationTestCase_4_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('-1', '-1')
class CalculationTestCase_4_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('-2', '-2')
class CalculationTestCase_4_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('-3', '-3')
class CalculationTestCase_4_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('-4', '-4')
class CalculationTestCase_4_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('-5', '-5')
class CalculationTestCase_4_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('-6', '-6')
class CalculationTestCase_4_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('-7', '-7')
class CalculationTestCase_4_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-8', '-8')
class CalculationTestCase_4_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-9', '-9')
class CalculationTestCase_4_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-10', '-10')
class CalculationTestCase_4_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-11', '-11')
class CalculationTestCase_4_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-12', '-12')
class CalculationTestCase_4_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-13', '-13')
class CalculationTestCase_4_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-14', '-14')
class CalculationTestCase_4_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-15', '-15')
class CalculationTestCase_4_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-16', '-16')
class CalculationTestCase_4_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-17', '-17')
class CalculationTestCase_4_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-18', '-18')
class CalculationTestCase_4_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-19', '-19')
class CalculationTestCase_4_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-20', '-20')
class CalculationTestCase_4_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-21', '-21')
class CalculationTestCase_4_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-22', '-22')
class CalculationTestCase_4_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-23', '-23')
class CalculationTestCase_4_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-24', '-24')
class CalculationTestCase_4_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-25', '-25')
class CalculationTestCase_4_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-26', '-26')
class CalculationTestCase_4_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-27', '-27')
class CalculationTestCase_4_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-28', '-28')
class CalculationTestCase_4_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-29', '-29')
class CalculationTestCase_4_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-30', '-30')
class CalculationTestCase_4_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-31', '-31')
class CalculationTestCase_4_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-32', '-32')
class CalculationTestCase_4_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-33', '-33')
class CalculationTestCase_4_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-34', '-34')
class CalculationTestCase_4_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-35', '-35')
class CalculationTestCase_4_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-36', '-36')
class CalculationTestCase_4_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-37', '-37')
class CalculationTestCase_4_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-38', '-38')
class CalculationTestCase_4_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-39', '-39')
class CalculationTestCase_4_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-40', '-40')
class CalculationTestCase_4_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-41', '-41')
class CalculationTestCase_4_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-42', '-42')
class CalculationTestCase_4_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-43', '-43')
class CalculationTestCase_4_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-44', '-44')
class CalculationTestCase_4_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-45', '-45')
class CalculationTestCase_4_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 4 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-46', '-46')
class CalculationTestCase_5_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('5', '5')
class CalculationTestCase_5_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('4', '4')
class CalculationTestCase_5_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('3', '3')
class CalculationTestCase_5_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('2', '2')
class CalculationTestCase_5_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('1', '1')
class CalculationTestCase_5_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('0', '0')
class CalculationTestCase_5_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('-1', '-1')
class CalculationTestCase_5_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('-2', '-2')
class CalculationTestCase_5_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('-3', '-3')
class CalculationTestCase_5_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('-4', '-4')
class CalculationTestCase_5_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('-5', '-5')
class CalculationTestCase_5_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('-6', '-6')
class CalculationTestCase_5_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-7', '-7')
class CalculationTestCase_5_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-8', '-8')
class CalculationTestCase_5_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-9', '-9')
class CalculationTestCase_5_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-10', '-10')
class CalculationTestCase_5_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-11', '-11')
class CalculationTestCase_5_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-12', '-12')
class CalculationTestCase_5_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-13', '-13')
class CalculationTestCase_5_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-14', '-14')
class CalculationTestCase_5_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-15', '-15')
class CalculationTestCase_5_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-16', '-16')
class CalculationTestCase_5_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-17', '-17')
class CalculationTestCase_5_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-18', '-18')
class CalculationTestCase_5_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-19', '-19')
class CalculationTestCase_5_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-20', '-20')
class CalculationTestCase_5_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-21', '-21')
class CalculationTestCase_5_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-22', '-22')
class CalculationTestCase_5_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-23', '-23')
class CalculationTestCase_5_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-24', '-24')
class CalculationTestCase_5_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-25', '-25')
class CalculationTestCase_5_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-26', '-26')
class CalculationTestCase_5_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-27', '-27')
class CalculationTestCase_5_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-28', '-28')
class CalculationTestCase_5_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-29', '-29')
class CalculationTestCase_5_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-30', '-30')
class CalculationTestCase_5_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-31', '-31')
class CalculationTestCase_5_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-32', '-32')
class CalculationTestCase_5_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-33', '-33')
class CalculationTestCase_5_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-34', '-34')
class CalculationTestCase_5_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-35', '-35')
class CalculationTestCase_5_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-36', '-36')
class CalculationTestCase_5_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-37', '-37')
class CalculationTestCase_5_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-38', '-38')
class CalculationTestCase_5_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-39', '-39')
class CalculationTestCase_5_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-40', '-40')
class CalculationTestCase_5_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-41', '-41')
class CalculationTestCase_5_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-42', '-42')
class CalculationTestCase_5_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-43', '-43')
class CalculationTestCase_5_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-44', '-44')
class CalculationTestCase_5_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 5 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-45', '-45')
class CalculationTestCase_6_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('6', '6')
class CalculationTestCase_6_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('5', '5')
class CalculationTestCase_6_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('4', '4')
class CalculationTestCase_6_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('3', '3')
class CalculationTestCase_6_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('2', '2')
class CalculationTestCase_6_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('1', '1')
class CalculationTestCase_6_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('0', '0')
class CalculationTestCase_6_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('-1', '-1')
class CalculationTestCase_6_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('-2', '-2')
class CalculationTestCase_6_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('-3', '-3')
class CalculationTestCase_6_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('-4', '-4')
class CalculationTestCase_6_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('-5', '-5')
class CalculationTestCase_6_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-6', '-6')
class CalculationTestCase_6_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-7', '-7')
class CalculationTestCase_6_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-8', '-8')
class CalculationTestCase_6_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-9', '-9')
class CalculationTestCase_6_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-10', '-10')
class CalculationTestCase_6_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-11', '-11')
class CalculationTestCase_6_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-12', '-12')
class CalculationTestCase_6_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-13', '-13')
class CalculationTestCase_6_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-14', '-14')
class CalculationTestCase_6_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-15', '-15')
class CalculationTestCase_6_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-16', '-16')
class CalculationTestCase_6_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-17', '-17')
class CalculationTestCase_6_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-18', '-18')
class CalculationTestCase_6_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-19', '-19')
class CalculationTestCase_6_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-20', '-20')
class CalculationTestCase_6_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-21', '-21')
class CalculationTestCase_6_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-22', '-22')
class CalculationTestCase_6_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-23', '-23')
class CalculationTestCase_6_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-24', '-24')
class CalculationTestCase_6_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-25', '-25')
class CalculationTestCase_6_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-26', '-26')
class CalculationTestCase_6_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-27', '-27')
class CalculationTestCase_6_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-28', '-28')
class CalculationTestCase_6_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-29', '-29')
class CalculationTestCase_6_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-30', '-30')
class CalculationTestCase_6_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-31', '-31')
class CalculationTestCase_6_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-32', '-32')
class CalculationTestCase_6_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-33', '-33')
class CalculationTestCase_6_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-34', '-34')
class CalculationTestCase_6_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-35', '-35')
class CalculationTestCase_6_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-36', '-36')
class CalculationTestCase_6_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-37', '-37')
class CalculationTestCase_6_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-38', '-38')
class CalculationTestCase_6_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-39', '-39')
class CalculationTestCase_6_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-40', '-40')
class CalculationTestCase_6_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-41', '-41')
class CalculationTestCase_6_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-42', '-42')
class CalculationTestCase_6_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-43', '-43')
class CalculationTestCase_6_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 6 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-44', '-44')
class CalculationTestCase_7_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('7', '7')
class CalculationTestCase_7_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('6', '6')
class CalculationTestCase_7_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('5', '5')
class CalculationTestCase_7_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('4', '4')
class CalculationTestCase_7_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('3', '3')
class CalculationTestCase_7_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('2', '2')
class CalculationTestCase_7_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('1', '1')
class CalculationTestCase_7_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('0', '0')
class CalculationTestCase_7_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('-1', '-1')
class CalculationTestCase_7_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('-2', '-2')
class CalculationTestCase_7_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('-3', '-3')
class CalculationTestCase_7_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('-4', '-4')
class CalculationTestCase_7_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-5', '-5')
class CalculationTestCase_7_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-6', '-6')
class CalculationTestCase_7_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-7', '-7')
class CalculationTestCase_7_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-8', '-8')
class CalculationTestCase_7_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-9', '-9')
class CalculationTestCase_7_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-10', '-10')
class CalculationTestCase_7_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-11', '-11')
class CalculationTestCase_7_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-12', '-12')
class CalculationTestCase_7_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-13', '-13')
class CalculationTestCase_7_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-14', '-14')
class CalculationTestCase_7_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-15', '-15')
class CalculationTestCase_7_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-16', '-16')
class CalculationTestCase_7_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-17', '-17')
class CalculationTestCase_7_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-18', '-18')
class CalculationTestCase_7_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-19', '-19')
class CalculationTestCase_7_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-20', '-20')
class CalculationTestCase_7_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-21', '-21')
class CalculationTestCase_7_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-22', '-22')
class CalculationTestCase_7_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-23', '-23')
class CalculationTestCase_7_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-24', '-24')
class CalculationTestCase_7_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-25', '-25')
class CalculationTestCase_7_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-26', '-26')
class CalculationTestCase_7_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-27', '-27')
class CalculationTestCase_7_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-28', '-28')
class CalculationTestCase_7_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-29', '-29')
class CalculationTestCase_7_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-30', '-30')
class CalculationTestCase_7_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-31', '-31')
class CalculationTestCase_7_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-32', '-32')
class CalculationTestCase_7_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-33', '-33')
class CalculationTestCase_7_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-34', '-34')
class CalculationTestCase_7_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-35', '-35')
class CalculationTestCase_7_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-36', '-36')
class CalculationTestCase_7_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-37', '-37')
class CalculationTestCase_7_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-38', '-38')
class CalculationTestCase_7_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-39', '-39')
class CalculationTestCase_7_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-40', '-40')
class CalculationTestCase_7_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-41', '-41')
class CalculationTestCase_7_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-42', '-42')
class CalculationTestCase_7_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 7 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-43', '-43')
class CalculationTestCase_8_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('8', '8')
class CalculationTestCase_8_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('7', '7')
class CalculationTestCase_8_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('6', '6')
class CalculationTestCase_8_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('5', '5')
class CalculationTestCase_8_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('4', '4')
class CalculationTestCase_8_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('3', '3')
class CalculationTestCase_8_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('2', '2')
class CalculationTestCase_8_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('1', '1')
class CalculationTestCase_8_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('0', '0')
class CalculationTestCase_8_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('-1', '-1')
class CalculationTestCase_8_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('-2', '-2')
class CalculationTestCase_8_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('-3', '-3')
class CalculationTestCase_8_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-4', '-4')
class CalculationTestCase_8_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-5', '-5')
class CalculationTestCase_8_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-6', '-6')
class CalculationTestCase_8_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-7', '-7')
class CalculationTestCase_8_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-8', '-8')
class CalculationTestCase_8_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-9', '-9')
class CalculationTestCase_8_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-10', '-10')
class CalculationTestCase_8_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-11', '-11')
class CalculationTestCase_8_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-12', '-12')
class CalculationTestCase_8_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-13', '-13')
class CalculationTestCase_8_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-14', '-14')
class CalculationTestCase_8_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-15', '-15')
class CalculationTestCase_8_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-16', '-16')
class CalculationTestCase_8_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-17', '-17')
class CalculationTestCase_8_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-18', '-18')
class CalculationTestCase_8_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-19', '-19')
class CalculationTestCase_8_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-20', '-20')
class CalculationTestCase_8_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-21', '-21')
class CalculationTestCase_8_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-22', '-22')
class CalculationTestCase_8_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-23', '-23')
class CalculationTestCase_8_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-24', '-24')
class CalculationTestCase_8_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-25', '-25')
class CalculationTestCase_8_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-26', '-26')
class CalculationTestCase_8_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-27', '-27')
class CalculationTestCase_8_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-28', '-28')
class CalculationTestCase_8_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-29', '-29')
class CalculationTestCase_8_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-30', '-30')
class CalculationTestCase_8_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-31', '-31')
class CalculationTestCase_8_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-32', '-32')
class CalculationTestCase_8_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-33', '-33')
class CalculationTestCase_8_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-34', '-34')
class CalculationTestCase_8_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-35', '-35')
class CalculationTestCase_8_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-36', '-36')
class CalculationTestCase_8_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-37', '-37')
class CalculationTestCase_8_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-38', '-38')
class CalculationTestCase_8_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-39', '-39')
class CalculationTestCase_8_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-40', '-40')
class CalculationTestCase_8_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-41', '-41')
class CalculationTestCase_8_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 8 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-42', '-42')
class CalculationTestCase_9_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('9', '9')
class CalculationTestCase_9_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('8', '8')
class CalculationTestCase_9_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('7', '7')
class CalculationTestCase_9_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('6', '6')
class CalculationTestCase_9_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('5', '5')
class CalculationTestCase_9_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('4', '4')
class CalculationTestCase_9_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('3', '3')
class CalculationTestCase_9_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('2', '2')
class CalculationTestCase_9_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('1', '1')
class CalculationTestCase_9_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('0', '0')
class CalculationTestCase_9_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('-1', '-1')
class CalculationTestCase_9_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('-2', '-2')
class CalculationTestCase_9_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-3', '-3')
class CalculationTestCase_9_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-4', '-4')
class CalculationTestCase_9_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-5', '-5')
class CalculationTestCase_9_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-6', '-6')
class CalculationTestCase_9_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-7', '-7')
class CalculationTestCase_9_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-8', '-8')
class CalculationTestCase_9_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-9', '-9')
class CalculationTestCase_9_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-10', '-10')
class CalculationTestCase_9_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-11', '-11')
class CalculationTestCase_9_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-12', '-12')
class CalculationTestCase_9_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-13', '-13')
class CalculationTestCase_9_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-14', '-14')
class CalculationTestCase_9_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-15', '-15')
class CalculationTestCase_9_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-16', '-16')
class CalculationTestCase_9_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-17', '-17')
class CalculationTestCase_9_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-18', '-18')
class CalculationTestCase_9_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-19', '-19')
class CalculationTestCase_9_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-20', '-20')
class CalculationTestCase_9_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-21', '-21')
class CalculationTestCase_9_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-22', '-22')
class CalculationTestCase_9_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-23', '-23')
class CalculationTestCase_9_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-24', '-24')
class CalculationTestCase_9_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-25', '-25')
class CalculationTestCase_9_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-26', '-26')
class CalculationTestCase_9_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-27', '-27')
class CalculationTestCase_9_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-28', '-28')
class CalculationTestCase_9_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-29', '-29')
class CalculationTestCase_9_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-30', '-30')
class CalculationTestCase_9_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-31', '-31')
class CalculationTestCase_9_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-32', '-32')
class CalculationTestCase_9_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-33', '-33')
class CalculationTestCase_9_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-34', '-34')
class CalculationTestCase_9_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-35', '-35')
class CalculationTestCase_9_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-36', '-36')
class CalculationTestCase_9_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-37', '-37')
class CalculationTestCase_9_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-38', '-38')
class CalculationTestCase_9_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-39', '-39')
class CalculationTestCase_9_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-40', '-40')
class CalculationTestCase_9_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 9 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-41', '-41')
class CalculationTestCase_10_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('10', '10')
class CalculationTestCase_10_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('9', '9')
class CalculationTestCase_10_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('8', '8')
class CalculationTestCase_10_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('7', '7')
class CalculationTestCase_10_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('6', '6')
class CalculationTestCase_10_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('5', '5')
class CalculationTestCase_10_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('4', '4')
class CalculationTestCase_10_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('3', '3')
class CalculationTestCase_10_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('2', '2')
class CalculationTestCase_10_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('1', '1')
class CalculationTestCase_10_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('0', '0')
class CalculationTestCase_10_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('-1', '-1')
class CalculationTestCase_10_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-2', '-2')
class CalculationTestCase_10_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-3', '-3')
class CalculationTestCase_10_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-4', '-4')
class CalculationTestCase_10_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-5', '-5')
class CalculationTestCase_10_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-6', '-6')
class CalculationTestCase_10_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-7', '-7')
class CalculationTestCase_10_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-8', '-8')
class CalculationTestCase_10_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-9', '-9')
class CalculationTestCase_10_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-10', '-10')
class CalculationTestCase_10_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-11', '-11')
class CalculationTestCase_10_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-12', '-12')
class CalculationTestCase_10_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-13', '-13')
class CalculationTestCase_10_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-14', '-14')
class CalculationTestCase_10_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-15', '-15')
class CalculationTestCase_10_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-16', '-16')
class CalculationTestCase_10_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-17', '-17')
class CalculationTestCase_10_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-18', '-18')
class CalculationTestCase_10_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-19', '-19')
class CalculationTestCase_10_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-20', '-20')
class CalculationTestCase_10_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-21', '-21')
class CalculationTestCase_10_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-22', '-22')
class CalculationTestCase_10_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-23', '-23')
class CalculationTestCase_10_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-24', '-24')
class CalculationTestCase_10_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-25', '-25')
class CalculationTestCase_10_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-26', '-26')
class CalculationTestCase_10_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-27', '-27')
class CalculationTestCase_10_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-28', '-28')
class CalculationTestCase_10_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-29', '-29')
class CalculationTestCase_10_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-30', '-30')
class CalculationTestCase_10_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-31', '-31')
class CalculationTestCase_10_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-32', '-32')
class CalculationTestCase_10_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-33', '-33')
class CalculationTestCase_10_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-34', '-34')
class CalculationTestCase_10_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-35', '-35')
class CalculationTestCase_10_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-36', '-36')
class CalculationTestCase_10_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-37', '-37')
class CalculationTestCase_10_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-38', '-38')
class CalculationTestCase_10_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-39', '-39')
class CalculationTestCase_10_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 10 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-40', '-40')
class CalculationTestCase_11_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('11', '11')
class CalculationTestCase_11_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('10', '10')
class CalculationTestCase_11_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('9', '9')
class CalculationTestCase_11_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('8', '8')
class CalculationTestCase_11_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('7', '7')
class CalculationTestCase_11_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('6', '6')
class CalculationTestCase_11_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('5', '5')
class CalculationTestCase_11_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('4', '4')
class CalculationTestCase_11_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('3', '3')
class CalculationTestCase_11_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('2', '2')
class CalculationTestCase_11_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('1', '1')
class CalculationTestCase_11_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('0', '0')
class CalculationTestCase_11_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('-1', '-1')
class CalculationTestCase_11_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-2', '-2')
class CalculationTestCase_11_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-3', '-3')
class CalculationTestCase_11_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-4', '-4')
class CalculationTestCase_11_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-5', '-5')
class CalculationTestCase_11_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-6', '-6')
class CalculationTestCase_11_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-7', '-7')
class CalculationTestCase_11_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-8', '-8')
class CalculationTestCase_11_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-9', '-9')
class CalculationTestCase_11_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-10', '-10')
class CalculationTestCase_11_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-11', '-11')
class CalculationTestCase_11_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-12', '-12')
class CalculationTestCase_11_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-13', '-13')
class CalculationTestCase_11_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-14', '-14')
class CalculationTestCase_11_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-15', '-15')
class CalculationTestCase_11_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-16', '-16')
class CalculationTestCase_11_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-17', '-17')
class CalculationTestCase_11_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-18', '-18')
class CalculationTestCase_11_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-19', '-19')
class CalculationTestCase_11_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-20', '-20')
class CalculationTestCase_11_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-21', '-21')
class CalculationTestCase_11_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-22', '-22')
class CalculationTestCase_11_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-23', '-23')
class CalculationTestCase_11_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-24', '-24')
class CalculationTestCase_11_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-25', '-25')
class CalculationTestCase_11_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-26', '-26')
class CalculationTestCase_11_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-27', '-27')
class CalculationTestCase_11_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-28', '-28')
class CalculationTestCase_11_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-29', '-29')
class CalculationTestCase_11_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-30', '-30')
class CalculationTestCase_11_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-31', '-31')
class CalculationTestCase_11_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-32', '-32')
class CalculationTestCase_11_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-33', '-33')
class CalculationTestCase_11_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-34', '-34')
class CalculationTestCase_11_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-35', '-35')
class CalculationTestCase_11_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-36', '-36')
class CalculationTestCase_11_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-37', '-37')
class CalculationTestCase_11_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-38', '-38')
class CalculationTestCase_11_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 11 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-39', '-39')
class CalculationTestCase_12_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('12', '12')
class CalculationTestCase_12_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('11', '11')
class CalculationTestCase_12_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('10', '10')
class CalculationTestCase_12_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('9', '9')
class CalculationTestCase_12_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('8', '8')
class CalculationTestCase_12_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('7', '7')
class CalculationTestCase_12_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('6', '6')
class CalculationTestCase_12_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('5', '5')
class CalculationTestCase_12_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('4', '4')
class CalculationTestCase_12_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('3', '3')
class CalculationTestCase_12_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('2', '2')
class CalculationTestCase_12_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('1', '1')
class CalculationTestCase_12_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('0', '0')
class CalculationTestCase_12_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('-1', '-1')
class CalculationTestCase_12_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-2', '-2')
class CalculationTestCase_12_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-3', '-3')
class CalculationTestCase_12_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-4', '-4')
class CalculationTestCase_12_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-5', '-5')
class CalculationTestCase_12_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-6', '-6')
class CalculationTestCase_12_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-7', '-7')
class CalculationTestCase_12_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-8', '-8')
class CalculationTestCase_12_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-9', '-9')
class CalculationTestCase_12_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-10', '-10')
class CalculationTestCase_12_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-11', '-11')
class CalculationTestCase_12_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-12', '-12')
class CalculationTestCase_12_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-13', '-13')
class CalculationTestCase_12_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-14', '-14')
class CalculationTestCase_12_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-15', '-15')
class CalculationTestCase_12_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-16', '-16')
class CalculationTestCase_12_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-17', '-17')
class CalculationTestCase_12_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-18', '-18')
class CalculationTestCase_12_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-19', '-19')
class CalculationTestCase_12_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-20', '-20')
class CalculationTestCase_12_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-21', '-21')
class CalculationTestCase_12_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-22', '-22')
class CalculationTestCase_12_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-23', '-23')
class CalculationTestCase_12_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-24', '-24')
class CalculationTestCase_12_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-25', '-25')
class CalculationTestCase_12_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-26', '-26')
class CalculationTestCase_12_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-27', '-27')
class CalculationTestCase_12_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-28', '-28')
class CalculationTestCase_12_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-29', '-29')
class CalculationTestCase_12_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-30', '-30')
class CalculationTestCase_12_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-31', '-31')
class CalculationTestCase_12_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-32', '-32')
class CalculationTestCase_12_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-33', '-33')
class CalculationTestCase_12_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-34', '-34')
class CalculationTestCase_12_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-35', '-35')
class CalculationTestCase_12_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-36', '-36')
class CalculationTestCase_12_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-37', '-37')
class CalculationTestCase_12_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 12 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-38', '-38')
class CalculationTestCase_13_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('13', '13')
class CalculationTestCase_13_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('12', '12')
class CalculationTestCase_13_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('11', '11')
class CalculationTestCase_13_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('10', '10')
class CalculationTestCase_13_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('9', '9')
class CalculationTestCase_13_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('8', '8')
class CalculationTestCase_13_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('7', '7')
class CalculationTestCase_13_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('6', '6')
class CalculationTestCase_13_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('5', '5')
class CalculationTestCase_13_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('4', '4')
class CalculationTestCase_13_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('3', '3')
class CalculationTestCase_13_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('2', '2')
class CalculationTestCase_13_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('1', '1')
class CalculationTestCase_13_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('0', '0')
class CalculationTestCase_13_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('-1', '-1')
class CalculationTestCase_13_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-2', '-2')
class CalculationTestCase_13_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-3', '-3')
class CalculationTestCase_13_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-4', '-4')
class CalculationTestCase_13_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-5', '-5')
class CalculationTestCase_13_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-6', '-6')
class CalculationTestCase_13_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-7', '-7')
class CalculationTestCase_13_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-8', '-8')
class CalculationTestCase_13_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-9', '-9')
class CalculationTestCase_13_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-10', '-10')
class CalculationTestCase_13_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-11', '-11')
class CalculationTestCase_13_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-12', '-12')
class CalculationTestCase_13_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-13', '-13')
class CalculationTestCase_13_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-14', '-14')
class CalculationTestCase_13_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-15', '-15')
class CalculationTestCase_13_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-16', '-16')
class CalculationTestCase_13_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-17', '-17')
class CalculationTestCase_13_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-18', '-18')
class CalculationTestCase_13_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-19', '-19')
class CalculationTestCase_13_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-20', '-20')
class CalculationTestCase_13_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-21', '-21')
class CalculationTestCase_13_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-22', '-22')
class CalculationTestCase_13_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-23', '-23')
class CalculationTestCase_13_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-24', '-24')
class CalculationTestCase_13_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-25', '-25')
class CalculationTestCase_13_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-26', '-26')
class CalculationTestCase_13_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-27', '-27')
class CalculationTestCase_13_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-28', '-28')
class CalculationTestCase_13_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-29', '-29')
class CalculationTestCase_13_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-30', '-30')
class CalculationTestCase_13_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-31', '-31')
class CalculationTestCase_13_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-32', '-32')
class CalculationTestCase_13_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-33', '-33')
class CalculationTestCase_13_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-34', '-34')
class CalculationTestCase_13_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-35', '-35')
class CalculationTestCase_13_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-36', '-36')
class CalculationTestCase_13_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 13 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-37', '-37')
class CalculationTestCase_14_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('14', '14')
class CalculationTestCase_14_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('13', '13')
class CalculationTestCase_14_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('12', '12')
class CalculationTestCase_14_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('11', '11')
class CalculationTestCase_14_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('10', '10')
class CalculationTestCase_14_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('9', '9')
class CalculationTestCase_14_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('8', '8')
class CalculationTestCase_14_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('7', '7')
class CalculationTestCase_14_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('6', '6')
class CalculationTestCase_14_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('5', '5')
class CalculationTestCase_14_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('4', '4')
class CalculationTestCase_14_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('3', '3')
class CalculationTestCase_14_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('2', '2')
class CalculationTestCase_14_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('1', '1')
class CalculationTestCase_14_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('0', '0')
class CalculationTestCase_14_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('-1', '-1')
class CalculationTestCase_14_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-2', '-2')
class CalculationTestCase_14_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-3', '-3')
class CalculationTestCase_14_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-4', '-4')
class CalculationTestCase_14_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-5', '-5')
class CalculationTestCase_14_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-6', '-6')
class CalculationTestCase_14_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-7', '-7')
class CalculationTestCase_14_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-8', '-8')
class CalculationTestCase_14_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-9', '-9')
class CalculationTestCase_14_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-10', '-10')
class CalculationTestCase_14_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-11', '-11')
class CalculationTestCase_14_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-12', '-12')
class CalculationTestCase_14_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-13', '-13')
class CalculationTestCase_14_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-14', '-14')
class CalculationTestCase_14_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-15', '-15')
class CalculationTestCase_14_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-16', '-16')
class CalculationTestCase_14_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-17', '-17')
class CalculationTestCase_14_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-18', '-18')
class CalculationTestCase_14_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-19', '-19')
class CalculationTestCase_14_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-20', '-20')
class CalculationTestCase_14_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-21', '-21')
class CalculationTestCase_14_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-22', '-22')
class CalculationTestCase_14_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-23', '-23')
class CalculationTestCase_14_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-24', '-24')
class CalculationTestCase_14_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-25', '-25')
class CalculationTestCase_14_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-26', '-26')
class CalculationTestCase_14_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-27', '-27')
class CalculationTestCase_14_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-28', '-28')
class CalculationTestCase_14_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-29', '-29')
class CalculationTestCase_14_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-30', '-30')
class CalculationTestCase_14_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-31', '-31')
class CalculationTestCase_14_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-32', '-32')
class CalculationTestCase_14_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-33', '-33')
class CalculationTestCase_14_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-34', '-34')
class CalculationTestCase_14_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-35', '-35')
class CalculationTestCase_14_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 14 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-36', '-36')
class CalculationTestCase_15_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('15', '15')
class CalculationTestCase_15_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('14', '14')
class CalculationTestCase_15_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('13', '13')
class CalculationTestCase_15_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('12', '12')
class CalculationTestCase_15_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('11', '11')
class CalculationTestCase_15_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('10', '10')
class CalculationTestCase_15_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('9', '9')
class CalculationTestCase_15_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('8', '8')
class CalculationTestCase_15_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('7', '7')
class CalculationTestCase_15_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('6', '6')
class CalculationTestCase_15_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('5', '5')
class CalculationTestCase_15_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('4', '4')
class CalculationTestCase_15_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('3', '3')
class CalculationTestCase_15_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('2', '2')
class CalculationTestCase_15_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('1', '1')
class CalculationTestCase_15_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('0', '0')
class CalculationTestCase_15_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('-1', '-1')
class CalculationTestCase_15_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-2', '-2')
class CalculationTestCase_15_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-3', '-3')
class CalculationTestCase_15_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-4', '-4')
class CalculationTestCase_15_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-5', '-5')
class CalculationTestCase_15_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-6', '-6')
class CalculationTestCase_15_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-7', '-7')
class CalculationTestCase_15_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-8', '-8')
class CalculationTestCase_15_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-9', '-9')
class CalculationTestCase_15_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-10', '-10')
class CalculationTestCase_15_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-11', '-11')
class CalculationTestCase_15_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-12', '-12')
class CalculationTestCase_15_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-13', '-13')
class CalculationTestCase_15_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-14', '-14')
class CalculationTestCase_15_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-15', '-15')
class CalculationTestCase_15_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-16', '-16')
class CalculationTestCase_15_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-17', '-17')
class CalculationTestCase_15_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-18', '-18')
class CalculationTestCase_15_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-19', '-19')
class CalculationTestCase_15_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-20', '-20')
class CalculationTestCase_15_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-21', '-21')
class CalculationTestCase_15_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-22', '-22')
class CalculationTestCase_15_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-23', '-23')
class CalculationTestCase_15_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-24', '-24')
class CalculationTestCase_15_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-25', '-25')
class CalculationTestCase_15_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-26', '-26')
class CalculationTestCase_15_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-27', '-27')
class CalculationTestCase_15_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-28', '-28')
class CalculationTestCase_15_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-29', '-29')
class CalculationTestCase_15_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-30', '-30')
class CalculationTestCase_15_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-31', '-31')
class CalculationTestCase_15_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-32', '-32')
class CalculationTestCase_15_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-33', '-33')
class CalculationTestCase_15_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-34', '-34')
class CalculationTestCase_15_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 15 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-35', '-35')
class CalculationTestCase_16_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('16', '16')
class CalculationTestCase_16_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('15', '15')
class CalculationTestCase_16_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('14', '14')
class CalculationTestCase_16_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('13', '13')
class CalculationTestCase_16_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('12', '12')
class CalculationTestCase_16_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('11', '11')
class CalculationTestCase_16_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('10', '10')
class CalculationTestCase_16_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('9', '9')
class CalculationTestCase_16_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('8', '8')
class CalculationTestCase_16_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('7', '7')
class CalculationTestCase_16_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('6', '6')
class CalculationTestCase_16_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('5', '5')
class CalculationTestCase_16_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('4', '4')
class CalculationTestCase_16_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('3', '3')
class CalculationTestCase_16_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('2', '2')
class CalculationTestCase_16_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('1', '1')
class CalculationTestCase_16_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('0', '0')
class CalculationTestCase_16_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('-1', '-1')
class CalculationTestCase_16_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-2', '-2')
class CalculationTestCase_16_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-3', '-3')
class CalculationTestCase_16_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-4', '-4')
class CalculationTestCase_16_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-5', '-5')
class CalculationTestCase_16_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-6', '-6')
class CalculationTestCase_16_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-7', '-7')
class CalculationTestCase_16_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-8', '-8')
class CalculationTestCase_16_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-9', '-9')
class CalculationTestCase_16_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-10', '-10')
class CalculationTestCase_16_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-11', '-11')
class CalculationTestCase_16_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-12', '-12')
class CalculationTestCase_16_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-13', '-13')
class CalculationTestCase_16_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-14', '-14')
class CalculationTestCase_16_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-15', '-15')
class CalculationTestCase_16_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-16', '-16')
class CalculationTestCase_16_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-17', '-17')
class CalculationTestCase_16_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-18', '-18')
class CalculationTestCase_16_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-19', '-19')
class CalculationTestCase_16_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-20', '-20')
class CalculationTestCase_16_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-21', '-21')
class CalculationTestCase_16_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-22', '-22')
class CalculationTestCase_16_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-23', '-23')
class CalculationTestCase_16_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-24', '-24')
class CalculationTestCase_16_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-25', '-25')
class CalculationTestCase_16_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-26', '-26')
class CalculationTestCase_16_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-27', '-27')
class CalculationTestCase_16_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-28', '-28')
class CalculationTestCase_16_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-29', '-29')
class CalculationTestCase_16_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-30', '-30')
class CalculationTestCase_16_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-31', '-31')
class CalculationTestCase_16_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-32', '-32')
class CalculationTestCase_16_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-33', '-33')
class CalculationTestCase_16_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 16 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-34', '-34')
class CalculationTestCase_17_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('17', '17')
class CalculationTestCase_17_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('16', '16')
class CalculationTestCase_17_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('15', '15')
class CalculationTestCase_17_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('14', '14')
class CalculationTestCase_17_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('13', '13')
class CalculationTestCase_17_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('12', '12')
class CalculationTestCase_17_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('11', '11')
class CalculationTestCase_17_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('10', '10')
class CalculationTestCase_17_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('9', '9')
class CalculationTestCase_17_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('8', '8')
class CalculationTestCase_17_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('7', '7')
class CalculationTestCase_17_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('6', '6')
class CalculationTestCase_17_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('5', '5')
class CalculationTestCase_17_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('4', '4')
class CalculationTestCase_17_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('3', '3')
class CalculationTestCase_17_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('2', '2')
class CalculationTestCase_17_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('1', '1')
class CalculationTestCase_17_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('0', '0')
class CalculationTestCase_17_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('-1', '-1')
class CalculationTestCase_17_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-2', '-2')
class CalculationTestCase_17_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-3', '-3')
class CalculationTestCase_17_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-4', '-4')
class CalculationTestCase_17_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-5', '-5')
class CalculationTestCase_17_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-6', '-6')
class CalculationTestCase_17_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-7', '-7')
class CalculationTestCase_17_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-8', '-8')
class CalculationTestCase_17_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-9', '-9')
class CalculationTestCase_17_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-10', '-10')
class CalculationTestCase_17_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-11', '-11')
class CalculationTestCase_17_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-12', '-12')
class CalculationTestCase_17_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-13', '-13')
class CalculationTestCase_17_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-14', '-14')
class CalculationTestCase_17_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-15', '-15')
class CalculationTestCase_17_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-16', '-16')
class CalculationTestCase_17_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-17', '-17')
class CalculationTestCase_17_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-18', '-18')
class CalculationTestCase_17_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-19', '-19')
class CalculationTestCase_17_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-20', '-20')
class CalculationTestCase_17_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-21', '-21')
class CalculationTestCase_17_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-22', '-22')
class CalculationTestCase_17_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-23', '-23')
class CalculationTestCase_17_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-24', '-24')
class CalculationTestCase_17_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-25', '-25')
class CalculationTestCase_17_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-26', '-26')
class CalculationTestCase_17_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-27', '-27')
class CalculationTestCase_17_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-28', '-28')
class CalculationTestCase_17_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-29', '-29')
class CalculationTestCase_17_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-30', '-30')
class CalculationTestCase_17_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-31', '-31')
class CalculationTestCase_17_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-32', '-32')
class CalculationTestCase_17_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 17 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-33', '-33')
class CalculationTestCase_18_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('18', '18')
class CalculationTestCase_18_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('17', '17')
class CalculationTestCase_18_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('16', '16')
class CalculationTestCase_18_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('15', '15')
class CalculationTestCase_18_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('14', '14')
class CalculationTestCase_18_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('13', '13')
class CalculationTestCase_18_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('12', '12')
class CalculationTestCase_18_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('11', '11')
class CalculationTestCase_18_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('10', '10')
class CalculationTestCase_18_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('9', '9')
class CalculationTestCase_18_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('8', '8')
class CalculationTestCase_18_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('7', '7')
class CalculationTestCase_18_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('6', '6')
class CalculationTestCase_18_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('5', '5')
class CalculationTestCase_18_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('4', '4')
class CalculationTestCase_18_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('3', '3')
class CalculationTestCase_18_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('2', '2')
class CalculationTestCase_18_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('1', '1')
class CalculationTestCase_18_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('0', '0')
class CalculationTestCase_18_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('-1', '-1')
class CalculationTestCase_18_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-2', '-2')
class CalculationTestCase_18_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-3', '-3')
class CalculationTestCase_18_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-4', '-4')
class CalculationTestCase_18_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-5', '-5')
class CalculationTestCase_18_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-6', '-6')
class CalculationTestCase_18_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-7', '-7')
class CalculationTestCase_18_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-8', '-8')
class CalculationTestCase_18_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-9', '-9')
class CalculationTestCase_18_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-10', '-10')
class CalculationTestCase_18_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-11', '-11')
class CalculationTestCase_18_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-12', '-12')
class CalculationTestCase_18_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-13', '-13')
class CalculationTestCase_18_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-14', '-14')
class CalculationTestCase_18_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-15', '-15')
class CalculationTestCase_18_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-16', '-16')
class CalculationTestCase_18_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-17', '-17')
class CalculationTestCase_18_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-18', '-18')
class CalculationTestCase_18_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-19', '-19')
class CalculationTestCase_18_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-20', '-20')
class CalculationTestCase_18_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-21', '-21')
class CalculationTestCase_18_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-22', '-22')
class CalculationTestCase_18_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-23', '-23')
class CalculationTestCase_18_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-24', '-24')
class CalculationTestCase_18_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-25', '-25')
class CalculationTestCase_18_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-26', '-26')
class CalculationTestCase_18_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-27', '-27')
class CalculationTestCase_18_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-28', '-28')
class CalculationTestCase_18_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-29', '-29')
class CalculationTestCase_18_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-30', '-30')
class CalculationTestCase_18_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-31', '-31')
class CalculationTestCase_18_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 18 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-32', '-32')
class CalculationTestCase_19_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('19', '19')
class CalculationTestCase_19_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('18', '18')
class CalculationTestCase_19_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('17', '17')
class CalculationTestCase_19_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('16', '16')
class CalculationTestCase_19_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('15', '15')
class CalculationTestCase_19_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('14', '14')
class CalculationTestCase_19_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('13', '13')
class CalculationTestCase_19_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('12', '12')
class CalculationTestCase_19_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('11', '11')
class CalculationTestCase_19_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('10', '10')
class CalculationTestCase_19_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('9', '9')
class CalculationTestCase_19_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('8', '8')
class CalculationTestCase_19_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('7', '7')
class CalculationTestCase_19_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('6', '6')
class CalculationTestCase_19_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('5', '5')
class CalculationTestCase_19_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('4', '4')
class CalculationTestCase_19_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('3', '3')
class CalculationTestCase_19_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('2', '2')
class CalculationTestCase_19_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('1', '1')
class CalculationTestCase_19_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('0', '0')
class CalculationTestCase_19_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('-1', '-1')
class CalculationTestCase_19_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-2', '-2')
class CalculationTestCase_19_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-3', '-3')
class CalculationTestCase_19_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-4', '-4')
class CalculationTestCase_19_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-5', '-5')
class CalculationTestCase_19_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-6', '-6')
class CalculationTestCase_19_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-7', '-7')
class CalculationTestCase_19_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-8', '-8')
class CalculationTestCase_19_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-9', '-9')
class CalculationTestCase_19_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-10', '-10')
class CalculationTestCase_19_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-11', '-11')
class CalculationTestCase_19_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-12', '-12')
class CalculationTestCase_19_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-13', '-13')
class CalculationTestCase_19_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-14', '-14')
class CalculationTestCase_19_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-15', '-15')
class CalculationTestCase_19_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-16', '-16')
class CalculationTestCase_19_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-17', '-17')
class CalculationTestCase_19_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-18', '-18')
class CalculationTestCase_19_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-19', '-19')
class CalculationTestCase_19_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-20', '-20')
class CalculationTestCase_19_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-21', '-21')
class CalculationTestCase_19_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-22', '-22')
class CalculationTestCase_19_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-23', '-23')
class CalculationTestCase_19_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-24', '-24')
class CalculationTestCase_19_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-25', '-25')
class CalculationTestCase_19_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-26', '-26')
class CalculationTestCase_19_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-27', '-27')
class CalculationTestCase_19_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-28', '-28')
class CalculationTestCase_19_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-29', '-29')
class CalculationTestCase_19_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-30', '-30')
class CalculationTestCase_19_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 19 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-31', '-31')
class CalculationTestCase_20_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('20', '20')
class CalculationTestCase_20_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('19', '19')
class CalculationTestCase_20_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('18', '18')
class CalculationTestCase_20_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('17', '17')
class CalculationTestCase_20_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('16', '16')
class CalculationTestCase_20_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('15', '15')
class CalculationTestCase_20_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('14', '14')
class CalculationTestCase_20_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('13', '13')
class CalculationTestCase_20_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('12', '12')
class CalculationTestCase_20_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('11', '11')
class CalculationTestCase_20_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('10', '10')
class CalculationTestCase_20_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('9', '9')
class CalculationTestCase_20_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('8', '8')
class CalculationTestCase_20_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('7', '7')
class CalculationTestCase_20_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('6', '6')
class CalculationTestCase_20_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('5', '5')
class CalculationTestCase_20_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('4', '4')
class CalculationTestCase_20_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('3', '3')
class CalculationTestCase_20_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('2', '2')
class CalculationTestCase_20_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('1', '1')
class CalculationTestCase_20_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('0', '0')
class CalculationTestCase_20_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('-1', '-1')
class CalculationTestCase_20_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-2', '-2')
class CalculationTestCase_20_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-3', '-3')
class CalculationTestCase_20_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-4', '-4')
class CalculationTestCase_20_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-5', '-5')
class CalculationTestCase_20_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-6', '-6')
class CalculationTestCase_20_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-7', '-7')
class CalculationTestCase_20_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-8', '-8')
class CalculationTestCase_20_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-9', '-9')
class CalculationTestCase_20_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-10', '-10')
class CalculationTestCase_20_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-11', '-11')
class CalculationTestCase_20_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-12', '-12')
class CalculationTestCase_20_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-13', '-13')
class CalculationTestCase_20_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-14', '-14')
class CalculationTestCase_20_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-15', '-15')
class CalculationTestCase_20_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-16', '-16')
class CalculationTestCase_20_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-17', '-17')
class CalculationTestCase_20_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-18', '-18')
class CalculationTestCase_20_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-19', '-19')
class CalculationTestCase_20_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-20', '-20')
class CalculationTestCase_20_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-21', '-21')
class CalculationTestCase_20_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-22', '-22')
class CalculationTestCase_20_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-23', '-23')
class CalculationTestCase_20_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-24', '-24')
class CalculationTestCase_20_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-25', '-25')
class CalculationTestCase_20_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-26', '-26')
class CalculationTestCase_20_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-27', '-27')
class CalculationTestCase_20_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-28', '-28')
class CalculationTestCase_20_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-29', '-29')
class CalculationTestCase_20_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 20 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-30', '-30')
class CalculationTestCase_21_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('21', '21')
class CalculationTestCase_21_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('20', '20')
class CalculationTestCase_21_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('19', '19')
class CalculationTestCase_21_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('18', '18')
class CalculationTestCase_21_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('17', '17')
class CalculationTestCase_21_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('16', '16')
class CalculationTestCase_21_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('15', '15')
class CalculationTestCase_21_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('14', '14')
class CalculationTestCase_21_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('13', '13')
class CalculationTestCase_21_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('12', '12')
class CalculationTestCase_21_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('11', '11')
class CalculationTestCase_21_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('10', '10')
class CalculationTestCase_21_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('9', '9')
class CalculationTestCase_21_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('8', '8')
class CalculationTestCase_21_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('7', '7')
class CalculationTestCase_21_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('6', '6')
class CalculationTestCase_21_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('5', '5')
class CalculationTestCase_21_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('4', '4')
class CalculationTestCase_21_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('3', '3')
class CalculationTestCase_21_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('2', '2')
class CalculationTestCase_21_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('1', '1')
class CalculationTestCase_21_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('0', '0')
class CalculationTestCase_21_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('-1', '-1')
class CalculationTestCase_21_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-2', '-2')
class CalculationTestCase_21_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-3', '-3')
class CalculationTestCase_21_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-4', '-4')
class CalculationTestCase_21_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-5', '-5')
class CalculationTestCase_21_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-6', '-6')
class CalculationTestCase_21_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-7', '-7')
class CalculationTestCase_21_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-8', '-8')
class CalculationTestCase_21_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-9', '-9')
class CalculationTestCase_21_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-10', '-10')
class CalculationTestCase_21_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-11', '-11')
class CalculationTestCase_21_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-12', '-12')
class CalculationTestCase_21_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-13', '-13')
class CalculationTestCase_21_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-14', '-14')
class CalculationTestCase_21_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-15', '-15')
class CalculationTestCase_21_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-16', '-16')
class CalculationTestCase_21_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-17', '-17')
class CalculationTestCase_21_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-18', '-18')
class CalculationTestCase_21_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-19', '-19')
class CalculationTestCase_21_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-20', '-20')
class CalculationTestCase_21_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-21', '-21')
class CalculationTestCase_21_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-22', '-22')
class CalculationTestCase_21_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-23', '-23')
class CalculationTestCase_21_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-24', '-24')
class CalculationTestCase_21_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-25', '-25')
class CalculationTestCase_21_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-26', '-26')
class CalculationTestCase_21_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-27', '-27')
class CalculationTestCase_21_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-28', '-28')
class CalculationTestCase_21_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 21 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-29', '-29')
class CalculationTestCase_22_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('22', '22')
class CalculationTestCase_22_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('21', '21')
class CalculationTestCase_22_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('20', '20')
class CalculationTestCase_22_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('19', '19')
class CalculationTestCase_22_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('18', '18')
class CalculationTestCase_22_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('17', '17')
class CalculationTestCase_22_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('16', '16')
class CalculationTestCase_22_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('15', '15')
class CalculationTestCase_22_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('14', '14')
class CalculationTestCase_22_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('13', '13')
class CalculationTestCase_22_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('12', '12')
class CalculationTestCase_22_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('11', '11')
class CalculationTestCase_22_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('10', '10')
class CalculationTestCase_22_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('9', '9')
class CalculationTestCase_22_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('8', '8')
class CalculationTestCase_22_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('7', '7')
class CalculationTestCase_22_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('6', '6')
class CalculationTestCase_22_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('5', '5')
class CalculationTestCase_22_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('4', '4')
class CalculationTestCase_22_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('3', '3')
class CalculationTestCase_22_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('2', '2')
class CalculationTestCase_22_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('1', '1')
class CalculationTestCase_22_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('0', '0')
class CalculationTestCase_22_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('-1', '-1')
class CalculationTestCase_22_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-2', '-2')
class CalculationTestCase_22_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-3', '-3')
class CalculationTestCase_22_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-4', '-4')
class CalculationTestCase_22_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-5', '-5')
class CalculationTestCase_22_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-6', '-6')
class CalculationTestCase_22_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-7', '-7')
class CalculationTestCase_22_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-8', '-8')
class CalculationTestCase_22_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-9', '-9')
class CalculationTestCase_22_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-10', '-10')
class CalculationTestCase_22_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-11', '-11')
class CalculationTestCase_22_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-12', '-12')
class CalculationTestCase_22_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-13', '-13')
class CalculationTestCase_22_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-14', '-14')
class CalculationTestCase_22_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-15', '-15')
class CalculationTestCase_22_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-16', '-16')
class CalculationTestCase_22_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-17', '-17')
class CalculationTestCase_22_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-18', '-18')
class CalculationTestCase_22_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-19', '-19')
class CalculationTestCase_22_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-20', '-20')
class CalculationTestCase_22_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-21', '-21')
class CalculationTestCase_22_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-22', '-22')
class CalculationTestCase_22_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-23', '-23')
class CalculationTestCase_22_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-24', '-24')
class CalculationTestCase_22_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-25', '-25')
class CalculationTestCase_22_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-26', '-26')
class CalculationTestCase_22_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-27', '-27')
class CalculationTestCase_22_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 22 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-28', '-28')
class CalculationTestCase_23_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('23', '23')
class CalculationTestCase_23_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('22', '22')
class CalculationTestCase_23_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('21', '21')
class CalculationTestCase_23_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('20', '20')
class CalculationTestCase_23_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('19', '19')
class CalculationTestCase_23_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('18', '18')
class CalculationTestCase_23_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('17', '17')
class CalculationTestCase_23_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('16', '16')
class CalculationTestCase_23_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('15', '15')
class CalculationTestCase_23_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('14', '14')
class CalculationTestCase_23_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('13', '13')
class CalculationTestCase_23_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('12', '12')
class CalculationTestCase_23_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('11', '11')
class CalculationTestCase_23_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('10', '10')
class CalculationTestCase_23_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('9', '9')
class CalculationTestCase_23_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('8', '8')
class CalculationTestCase_23_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('7', '7')
class CalculationTestCase_23_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('6', '6')
class CalculationTestCase_23_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('5', '5')
class CalculationTestCase_23_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('4', '4')
class CalculationTestCase_23_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('3', '3')
class CalculationTestCase_23_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('2', '2')
class CalculationTestCase_23_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('1', '1')
class CalculationTestCase_23_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('0', '0')
class CalculationTestCase_23_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('-1', '-1')
class CalculationTestCase_23_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-2', '-2')
class CalculationTestCase_23_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-3', '-3')
class CalculationTestCase_23_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-4', '-4')
class CalculationTestCase_23_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-5', '-5')
class CalculationTestCase_23_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-6', '-6')
class CalculationTestCase_23_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-7', '-7')
class CalculationTestCase_23_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-8', '-8')
class CalculationTestCase_23_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-9', '-9')
class CalculationTestCase_23_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-10', '-10')
class CalculationTestCase_23_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-11', '-11')
class CalculationTestCase_23_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-12', '-12')
class CalculationTestCase_23_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-13', '-13')
class CalculationTestCase_23_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-14', '-14')
class CalculationTestCase_23_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-15', '-15')
class CalculationTestCase_23_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-16', '-16')
class CalculationTestCase_23_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-17', '-17')
class CalculationTestCase_23_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-18', '-18')
class CalculationTestCase_23_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-19', '-19')
class CalculationTestCase_23_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-20', '-20')
class CalculationTestCase_23_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-21', '-21')
class CalculationTestCase_23_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-22', '-22')
class CalculationTestCase_23_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-23', '-23')
class CalculationTestCase_23_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-24', '-24')
class CalculationTestCase_23_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-25', '-25')
class CalculationTestCase_23_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-26', '-26')
class CalculationTestCase_23_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 23 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-27', '-27')
class CalculationTestCase_24_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('24', '24')
class CalculationTestCase_24_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('23', '23')
class CalculationTestCase_24_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('22', '22')
class CalculationTestCase_24_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('21', '21')
class CalculationTestCase_24_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('20', '20')
class CalculationTestCase_24_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('19', '19')
class CalculationTestCase_24_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('18', '18')
class CalculationTestCase_24_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('17', '17')
class CalculationTestCase_24_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('16', '16')
class CalculationTestCase_24_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('15', '15')
class CalculationTestCase_24_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('14', '14')
class CalculationTestCase_24_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('13', '13')
class CalculationTestCase_24_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('12', '12')
class CalculationTestCase_24_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('11', '11')
class CalculationTestCase_24_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('10', '10')
class CalculationTestCase_24_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('9', '9')
class CalculationTestCase_24_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('8', '8')
class CalculationTestCase_24_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('7', '7')
class CalculationTestCase_24_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('6', '6')
class CalculationTestCase_24_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('5', '5')
class CalculationTestCase_24_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('4', '4')
class CalculationTestCase_24_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('3', '3')
class CalculationTestCase_24_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('2', '2')
class CalculationTestCase_24_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('1', '1')
class CalculationTestCase_24_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('0', '0')
class CalculationTestCase_24_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('-1', '-1')
class CalculationTestCase_24_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-2', '-2')
class CalculationTestCase_24_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-3', '-3')
class CalculationTestCase_24_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-4', '-4')
class CalculationTestCase_24_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-5', '-5')
class CalculationTestCase_24_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-6', '-6')
class CalculationTestCase_24_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-7', '-7')
class CalculationTestCase_24_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-8', '-8')
class CalculationTestCase_24_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-9', '-9')
class CalculationTestCase_24_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-10', '-10')
class CalculationTestCase_24_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-11', '-11')
class CalculationTestCase_24_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-12', '-12')
class CalculationTestCase_24_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-13', '-13')
class CalculationTestCase_24_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-14', '-14')
class CalculationTestCase_24_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-15', '-15')
class CalculationTestCase_24_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-16', '-16')
class CalculationTestCase_24_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-17', '-17')
class CalculationTestCase_24_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-18', '-18')
class CalculationTestCase_24_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-19', '-19')
class CalculationTestCase_24_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-20', '-20')
class CalculationTestCase_24_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-21', '-21')
class CalculationTestCase_24_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-22', '-22')
class CalculationTestCase_24_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-23', '-23')
class CalculationTestCase_24_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-24', '-24')
class CalculationTestCase_24_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-25', '-25')
class CalculationTestCase_24_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 24 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-26', '-26')
class CalculationTestCase_25_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('25', '25')
class CalculationTestCase_25_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('24', '24')
class CalculationTestCase_25_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('23', '23')
class CalculationTestCase_25_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('22', '22')
class CalculationTestCase_25_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('21', '21')
class CalculationTestCase_25_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('20', '20')
class CalculationTestCase_25_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('19', '19')
class CalculationTestCase_25_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('18', '18')
class CalculationTestCase_25_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('17', '17')
class CalculationTestCase_25_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('16', '16')
class CalculationTestCase_25_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('15', '15')
class CalculationTestCase_25_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('14', '14')
class CalculationTestCase_25_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('13', '13')
class CalculationTestCase_25_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('12', '12')
class CalculationTestCase_25_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('11', '11')
class CalculationTestCase_25_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('10', '10')
class CalculationTestCase_25_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('9', '9')
class CalculationTestCase_25_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('8', '8')
class CalculationTestCase_25_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('7', '7')
class CalculationTestCase_25_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('6', '6')
class CalculationTestCase_25_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('5', '5')
class CalculationTestCase_25_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('4', '4')
class CalculationTestCase_25_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('3', '3')
class CalculationTestCase_25_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('2', '2')
class CalculationTestCase_25_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('1', '1')
class CalculationTestCase_25_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('0', '0')
class CalculationTestCase_25_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('-1', '-1')
class CalculationTestCase_25_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-2', '-2')
class CalculationTestCase_25_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-3', '-3')
class CalculationTestCase_25_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-4', '-4')
class CalculationTestCase_25_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-5', '-5')
class CalculationTestCase_25_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-6', '-6')
class CalculationTestCase_25_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-7', '-7')
class CalculationTestCase_25_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-8', '-8')
class CalculationTestCase_25_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-9', '-9')
class CalculationTestCase_25_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-10', '-10')
class CalculationTestCase_25_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-11', '-11')
class CalculationTestCase_25_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-12', '-12')
class CalculationTestCase_25_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-13', '-13')
class CalculationTestCase_25_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-14', '-14')
class CalculationTestCase_25_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-15', '-15')
class CalculationTestCase_25_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-16', '-16')
class CalculationTestCase_25_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-17', '-17')
class CalculationTestCase_25_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-18', '-18')
class CalculationTestCase_25_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-19', '-19')
class CalculationTestCase_25_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-20', '-20')
class CalculationTestCase_25_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-21', '-21')
class CalculationTestCase_25_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-22', '-22')
class CalculationTestCase_25_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-23', '-23')
class CalculationTestCase_25_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-24', '-24')
class CalculationTestCase_25_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 25 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-25', '-25')
class CalculationTestCase_26_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('26', '26')
class CalculationTestCase_26_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('25', '25')
class CalculationTestCase_26_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('24', '24')
class CalculationTestCase_26_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('23', '23')
class CalculationTestCase_26_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('22', '22')
class CalculationTestCase_26_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('21', '21')
class CalculationTestCase_26_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('20', '20')
class CalculationTestCase_26_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('19', '19')
class CalculationTestCase_26_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('18', '18')
class CalculationTestCase_26_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('17', '17')
class CalculationTestCase_26_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('16', '16')
class CalculationTestCase_26_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('15', '15')
class CalculationTestCase_26_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('14', '14')
class CalculationTestCase_26_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('13', '13')
class CalculationTestCase_26_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('12', '12')
class CalculationTestCase_26_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('11', '11')
class CalculationTestCase_26_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('10', '10')
class CalculationTestCase_26_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('9', '9')
class CalculationTestCase_26_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('8', '8')
class CalculationTestCase_26_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('7', '7')
class CalculationTestCase_26_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('6', '6')
class CalculationTestCase_26_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('5', '5')
class CalculationTestCase_26_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('4', '4')
class CalculationTestCase_26_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('3', '3')
class CalculationTestCase_26_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('2', '2')
class CalculationTestCase_26_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('1', '1')
class CalculationTestCase_26_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('0', '0')
class CalculationTestCase_26_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('-1', '-1')
class CalculationTestCase_26_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-2', '-2')
class CalculationTestCase_26_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-3', '-3')
class CalculationTestCase_26_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-4', '-4')
class CalculationTestCase_26_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-5', '-5')
class CalculationTestCase_26_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-6', '-6')
class CalculationTestCase_26_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-7', '-7')
class CalculationTestCase_26_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-8', '-8')
class CalculationTestCase_26_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-9', '-9')
class CalculationTestCase_26_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-10', '-10')
class CalculationTestCase_26_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-11', '-11')
class CalculationTestCase_26_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-12', '-12')
class CalculationTestCase_26_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-13', '-13')
class CalculationTestCase_26_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-14', '-14')
class CalculationTestCase_26_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-15', '-15')
class CalculationTestCase_26_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-16', '-16')
class CalculationTestCase_26_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-17', '-17')
class CalculationTestCase_26_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-18', '-18')
class CalculationTestCase_26_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-19', '-19')
class CalculationTestCase_26_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-20', '-20')
class CalculationTestCase_26_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-21', '-21')
class CalculationTestCase_26_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-22', '-22')
class CalculationTestCase_26_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-23', '-23')
class CalculationTestCase_26_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 26 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-24', '-24')
class CalculationTestCase_27_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('27', '27')
class CalculationTestCase_27_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('26', '26')
class CalculationTestCase_27_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('25', '25')
class CalculationTestCase_27_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('24', '24')
class CalculationTestCase_27_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('23', '23')
class CalculationTestCase_27_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('22', '22')
class CalculationTestCase_27_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('21', '21')
class CalculationTestCase_27_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('20', '20')
class CalculationTestCase_27_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('19', '19')
class CalculationTestCase_27_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('18', '18')
class CalculationTestCase_27_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('17', '17')
class CalculationTestCase_27_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('16', '16')
class CalculationTestCase_27_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('15', '15')
class CalculationTestCase_27_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('14', '14')
class CalculationTestCase_27_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('13', '13')
class CalculationTestCase_27_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('12', '12')
class CalculationTestCase_27_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('11', '11')
class CalculationTestCase_27_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('10', '10')
class CalculationTestCase_27_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('9', '9')
class CalculationTestCase_27_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('8', '8')
class CalculationTestCase_27_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('7', '7')
class CalculationTestCase_27_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('6', '6')
class CalculationTestCase_27_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('5', '5')
class CalculationTestCase_27_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('4', '4')
class CalculationTestCase_27_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('3', '3')
class CalculationTestCase_27_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('2', '2')
class CalculationTestCase_27_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('1', '1')
class CalculationTestCase_27_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('0', '0')
class CalculationTestCase_27_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('-1', '-1')
class CalculationTestCase_27_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-2', '-2')
class CalculationTestCase_27_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-3', '-3')
class CalculationTestCase_27_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-4', '-4')
class CalculationTestCase_27_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-5', '-5')
class CalculationTestCase_27_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-6', '-6')
class CalculationTestCase_27_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-7', '-7')
class CalculationTestCase_27_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-8', '-8')
class CalculationTestCase_27_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-9', '-9')
class CalculationTestCase_27_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-10', '-10')
class CalculationTestCase_27_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-11', '-11')
class CalculationTestCase_27_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-12', '-12')
class CalculationTestCase_27_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-13', '-13')
class CalculationTestCase_27_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-14', '-14')
class CalculationTestCase_27_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-15', '-15')
class CalculationTestCase_27_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-16', '-16')
class CalculationTestCase_27_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-17', '-17')
class CalculationTestCase_27_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-18', '-18')
class CalculationTestCase_27_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-19', '-19')
class CalculationTestCase_27_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-20', '-20')
class CalculationTestCase_27_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-21', '-21')
class CalculationTestCase_27_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-22', '-22')
class CalculationTestCase_27_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 27 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-23', '-23')
class CalculationTestCase_28_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('28', '28')
class CalculationTestCase_28_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('27', '27')
class CalculationTestCase_28_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('26', '26')
class CalculationTestCase_28_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('25', '25')
class CalculationTestCase_28_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('24', '24')
class CalculationTestCase_28_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('23', '23')
class CalculationTestCase_28_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('22', '22')
class CalculationTestCase_28_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('21', '21')
class CalculationTestCase_28_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('20', '20')
class CalculationTestCase_28_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('19', '19')
class CalculationTestCase_28_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('18', '18')
class CalculationTestCase_28_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('17', '17')
class CalculationTestCase_28_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('16', '16')
class CalculationTestCase_28_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('15', '15')
class CalculationTestCase_28_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('14', '14')
class CalculationTestCase_28_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('13', '13')
class CalculationTestCase_28_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('12', '12')
class CalculationTestCase_28_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('11', '11')
class CalculationTestCase_28_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('10', '10')
class CalculationTestCase_28_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('9', '9')
class CalculationTestCase_28_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('8', '8')
class CalculationTestCase_28_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('7', '7')
class CalculationTestCase_28_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('6', '6')
class CalculationTestCase_28_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('5', '5')
class CalculationTestCase_28_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('4', '4')
class CalculationTestCase_28_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('3', '3')
class CalculationTestCase_28_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('2', '2')
class CalculationTestCase_28_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('1', '1')
class CalculationTestCase_28_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('0', '0')
class CalculationTestCase_28_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('-1', '-1')
class CalculationTestCase_28_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-2', '-2')
class CalculationTestCase_28_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-3', '-3')
class CalculationTestCase_28_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-4', '-4')
class CalculationTestCase_28_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-5', '-5')
class CalculationTestCase_28_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-6', '-6')
class CalculationTestCase_28_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-7', '-7')
class CalculationTestCase_28_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-8', '-8')
class CalculationTestCase_28_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-9', '-9')
class CalculationTestCase_28_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-10', '-10')
class CalculationTestCase_28_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-11', '-11')
class CalculationTestCase_28_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-12', '-12')
class CalculationTestCase_28_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-13', '-13')
class CalculationTestCase_28_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-14', '-14')
class CalculationTestCase_28_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-15', '-15')
class CalculationTestCase_28_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-16', '-16')
class CalculationTestCase_28_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-17', '-17')
class CalculationTestCase_28_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-18', '-18')
class CalculationTestCase_28_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-19', '-19')
class CalculationTestCase_28_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-20', '-20')
class CalculationTestCase_28_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-21', '-21')
class CalculationTestCase_28_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 28 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-22', '-22')
class CalculationTestCase_29_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('29', '29')
class CalculationTestCase_29_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('28', '28')
class CalculationTestCase_29_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('27', '27')
class CalculationTestCase_29_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('26', '26')
class CalculationTestCase_29_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('25', '25')
class CalculationTestCase_29_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('24', '24')
class CalculationTestCase_29_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('23', '23')
class CalculationTestCase_29_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('22', '22')
class CalculationTestCase_29_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('21', '21')
class CalculationTestCase_29_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('20', '20')
class CalculationTestCase_29_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('19', '19')
class CalculationTestCase_29_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('18', '18')
class CalculationTestCase_29_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('17', '17')
class CalculationTestCase_29_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('16', '16')
class CalculationTestCase_29_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('15', '15')
class CalculationTestCase_29_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('14', '14')
class CalculationTestCase_29_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('13', '13')
class CalculationTestCase_29_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('12', '12')
class CalculationTestCase_29_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('11', '11')
class CalculationTestCase_29_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('10', '10')
class CalculationTestCase_29_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('9', '9')
class CalculationTestCase_29_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('8', '8')
class CalculationTestCase_29_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('7', '7')
class CalculationTestCase_29_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('6', '6')
class CalculationTestCase_29_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('5', '5')
class CalculationTestCase_29_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('4', '4')
class CalculationTestCase_29_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('3', '3')
class CalculationTestCase_29_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('2', '2')
class CalculationTestCase_29_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('1', '1')
class CalculationTestCase_29_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('0', '0')
class CalculationTestCase_29_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('-1', '-1')
class CalculationTestCase_29_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-2', '-2')
class CalculationTestCase_29_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-3', '-3')
class CalculationTestCase_29_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-4', '-4')
class CalculationTestCase_29_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-5', '-5')
class CalculationTestCase_29_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-6', '-6')
class CalculationTestCase_29_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-7', '-7')
class CalculationTestCase_29_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-8', '-8')
class CalculationTestCase_29_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-9', '-9')
class CalculationTestCase_29_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-10', '-10')
class CalculationTestCase_29_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-11', '-11')
class CalculationTestCase_29_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-12', '-12')
class CalculationTestCase_29_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-13', '-13')
class CalculationTestCase_29_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-14', '-14')
class CalculationTestCase_29_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-15', '-15')
class CalculationTestCase_29_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-16', '-16')
class CalculationTestCase_29_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-17', '-17')
class CalculationTestCase_29_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-18', '-18')
class CalculationTestCase_29_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-19', '-19')
class CalculationTestCase_29_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-20', '-20')
class CalculationTestCase_29_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 29 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-21', '-21')
class CalculationTestCase_30_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('30', '30')
class CalculationTestCase_30_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('29', '29')
class CalculationTestCase_30_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('28', '28')
class CalculationTestCase_30_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('27', '27')
class CalculationTestCase_30_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('26', '26')
class CalculationTestCase_30_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('25', '25')
class CalculationTestCase_30_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('24', '24')
class CalculationTestCase_30_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('23', '23')
class CalculationTestCase_30_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('22', '22')
class CalculationTestCase_30_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('21', '21')
class CalculationTestCase_30_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('20', '20')
class CalculationTestCase_30_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('19', '19')
class CalculationTestCase_30_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('18', '18')
class CalculationTestCase_30_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('17', '17')
class CalculationTestCase_30_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('16', '16')
class CalculationTestCase_30_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('15', '15')
class CalculationTestCase_30_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('14', '14')
class CalculationTestCase_30_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('13', '13')
class CalculationTestCase_30_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('12', '12')
class CalculationTestCase_30_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('11', '11')
class CalculationTestCase_30_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('10', '10')
class CalculationTestCase_30_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('9', '9')
class CalculationTestCase_30_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('8', '8')
class CalculationTestCase_30_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('7', '7')
class CalculationTestCase_30_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('6', '6')
class CalculationTestCase_30_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('5', '5')
class CalculationTestCase_30_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('4', '4')
class CalculationTestCase_30_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('3', '3')
class CalculationTestCase_30_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('2', '2')
class CalculationTestCase_30_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('1', '1')
class CalculationTestCase_30_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('0', '0')
class CalculationTestCase_30_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('-1', '-1')
class CalculationTestCase_30_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-2', '-2')
class CalculationTestCase_30_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-3', '-3')
class CalculationTestCase_30_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-4', '-4')
class CalculationTestCase_30_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-5', '-5')
class CalculationTestCase_30_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-6', '-6')
class CalculationTestCase_30_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-7', '-7')
class CalculationTestCase_30_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-8', '-8')
class CalculationTestCase_30_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-9', '-9')
class CalculationTestCase_30_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-10', '-10')
class CalculationTestCase_30_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-11', '-11')
class CalculationTestCase_30_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-12', '-12')
class CalculationTestCase_30_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-13', '-13')
class CalculationTestCase_30_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-14', '-14')
class CalculationTestCase_30_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-15', '-15')
class CalculationTestCase_30_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-16', '-16')
class CalculationTestCase_30_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-17', '-17')
class CalculationTestCase_30_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-18', '-18')
class CalculationTestCase_30_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-19', '-19')
class CalculationTestCase_30_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 30 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-20', '-20')
class CalculationTestCase_31_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('31', '31')
class CalculationTestCase_31_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('30', '30')
class CalculationTestCase_31_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('29', '29')
class CalculationTestCase_31_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('28', '28')
class CalculationTestCase_31_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('27', '27')
class CalculationTestCase_31_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('26', '26')
class CalculationTestCase_31_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('25', '25')
class CalculationTestCase_31_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('24', '24')
class CalculationTestCase_31_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('23', '23')
class CalculationTestCase_31_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('22', '22')
class CalculationTestCase_31_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('21', '21')
class CalculationTestCase_31_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('20', '20')
class CalculationTestCase_31_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('19', '19')
class CalculationTestCase_31_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('18', '18')
class CalculationTestCase_31_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('17', '17')
class CalculationTestCase_31_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('16', '16')
class CalculationTestCase_31_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('15', '15')
class CalculationTestCase_31_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('14', '14')
class CalculationTestCase_31_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('13', '13')
class CalculationTestCase_31_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('12', '12')
class CalculationTestCase_31_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('11', '11')
class CalculationTestCase_31_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('10', '10')
class CalculationTestCase_31_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('9', '9')
class CalculationTestCase_31_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('8', '8')
class CalculationTestCase_31_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('7', '7')
class CalculationTestCase_31_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('6', '6')
class CalculationTestCase_31_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('5', '5')
class CalculationTestCase_31_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('4', '4')
class CalculationTestCase_31_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('3', '3')
class CalculationTestCase_31_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('2', '2')
class CalculationTestCase_31_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('1', '1')
class CalculationTestCase_31_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('0', '0')
class CalculationTestCase_31_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('-1', '-1')
class CalculationTestCase_31_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-2', '-2')
class CalculationTestCase_31_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-3', '-3')
class CalculationTestCase_31_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-4', '-4')
class CalculationTestCase_31_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-5', '-5')
class CalculationTestCase_31_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-6', '-6')
class CalculationTestCase_31_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-7', '-7')
class CalculationTestCase_31_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-8', '-8')
class CalculationTestCase_31_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-9', '-9')
class CalculationTestCase_31_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-10', '-10')
class CalculationTestCase_31_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-11', '-11')
class CalculationTestCase_31_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-12', '-12')
class CalculationTestCase_31_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-13', '-13')
class CalculationTestCase_31_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-14', '-14')
class CalculationTestCase_31_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-15', '-15')
class CalculationTestCase_31_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-16', '-16')
class CalculationTestCase_31_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-17', '-17')
class CalculationTestCase_31_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-18', '-18')
class CalculationTestCase_31_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 31 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-19', '-19')
class CalculationTestCase_32_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('32', '32')
class CalculationTestCase_32_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('31', '31')
class CalculationTestCase_32_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('30', '30')
class CalculationTestCase_32_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('29', '29')
class CalculationTestCase_32_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('28', '28')
class CalculationTestCase_32_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('27', '27')
class CalculationTestCase_32_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('26', '26')
class CalculationTestCase_32_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('25', '25')
class CalculationTestCase_32_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('24', '24')
class CalculationTestCase_32_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('23', '23')
class CalculationTestCase_32_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('22', '22')
class CalculationTestCase_32_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('21', '21')
class CalculationTestCase_32_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('20', '20')
class CalculationTestCase_32_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('19', '19')
class CalculationTestCase_32_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('18', '18')
class CalculationTestCase_32_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('17', '17')
class CalculationTestCase_32_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('16', '16')
class CalculationTestCase_32_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('15', '15')
class CalculationTestCase_32_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('14', '14')
class CalculationTestCase_32_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('13', '13')
class CalculationTestCase_32_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('12', '12')
class CalculationTestCase_32_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('11', '11')
class CalculationTestCase_32_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('10', '10')
class CalculationTestCase_32_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('9', '9')
class CalculationTestCase_32_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('8', '8')
class CalculationTestCase_32_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('7', '7')
class CalculationTestCase_32_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('6', '6')
class CalculationTestCase_32_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('5', '5')
class CalculationTestCase_32_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('4', '4')
class CalculationTestCase_32_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('3', '3')
class CalculationTestCase_32_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('2', '2')
class CalculationTestCase_32_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('1', '1')
class CalculationTestCase_32_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('0', '0')
class CalculationTestCase_32_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('-1', '-1')
class CalculationTestCase_32_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-2', '-2')
class CalculationTestCase_32_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-3', '-3')
class CalculationTestCase_32_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-4', '-4')
class CalculationTestCase_32_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-5', '-5')
class CalculationTestCase_32_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-6', '-6')
class CalculationTestCase_32_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-7', '-7')
class CalculationTestCase_32_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-8', '-8')
class CalculationTestCase_32_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-9', '-9')
class CalculationTestCase_32_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-10', '-10')
class CalculationTestCase_32_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-11', '-11')
class CalculationTestCase_32_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-12', '-12')
class CalculationTestCase_32_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-13', '-13')
class CalculationTestCase_32_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-14', '-14')
class CalculationTestCase_32_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-15', '-15')
class CalculationTestCase_32_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-16', '-16')
class CalculationTestCase_32_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-17', '-17')
class CalculationTestCase_32_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 32 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-18', '-18')
class CalculationTestCase_33_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('33', '33')
class CalculationTestCase_33_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('32', '32')
class CalculationTestCase_33_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('31', '31')
class CalculationTestCase_33_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('30', '30')
class CalculationTestCase_33_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('29', '29')
class CalculationTestCase_33_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('28', '28')
class CalculationTestCase_33_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('27', '27')
class CalculationTestCase_33_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('26', '26')
class CalculationTestCase_33_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('25', '25')
class CalculationTestCase_33_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('24', '24')
class CalculationTestCase_33_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('23', '23')
class CalculationTestCase_33_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('22', '22')
class CalculationTestCase_33_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('21', '21')
class CalculationTestCase_33_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('20', '20')
class CalculationTestCase_33_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('19', '19')
class CalculationTestCase_33_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('18', '18')
class CalculationTestCase_33_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('17', '17')
class CalculationTestCase_33_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('16', '16')
class CalculationTestCase_33_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('15', '15')
class CalculationTestCase_33_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('14', '14')
class CalculationTestCase_33_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('13', '13')
class CalculationTestCase_33_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('12', '12')
class CalculationTestCase_33_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('11', '11')
class CalculationTestCase_33_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('10', '10')
class CalculationTestCase_33_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('9', '9')
class CalculationTestCase_33_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('8', '8')
class CalculationTestCase_33_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('7', '7')
class CalculationTestCase_33_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('6', '6')
class CalculationTestCase_33_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('5', '5')
class CalculationTestCase_33_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('4', '4')
class CalculationTestCase_33_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('3', '3')
class CalculationTestCase_33_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('2', '2')
class CalculationTestCase_33_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('1', '1')
class CalculationTestCase_33_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('0', '0')
class CalculationTestCase_33_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('-1', '-1')
class CalculationTestCase_33_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-2', '-2')
class CalculationTestCase_33_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-3', '-3')
class CalculationTestCase_33_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-4', '-4')
class CalculationTestCase_33_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-5', '-5')
class CalculationTestCase_33_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-6', '-6')
class CalculationTestCase_33_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-7', '-7')
class CalculationTestCase_33_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-8', '-8')
class CalculationTestCase_33_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-9', '-9')
class CalculationTestCase_33_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-10', '-10')
class CalculationTestCase_33_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-11', '-11')
class CalculationTestCase_33_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-12', '-12')
class CalculationTestCase_33_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-13', '-13')
class CalculationTestCase_33_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-14', '-14')
class CalculationTestCase_33_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-15', '-15')
class CalculationTestCase_33_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-16', '-16')
class CalculationTestCase_33_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 33 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-17', '-17')
class CalculationTestCase_34_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('34', '34')
class CalculationTestCase_34_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('33', '33')
class CalculationTestCase_34_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('32', '32')
class CalculationTestCase_34_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('31', '31')
class CalculationTestCase_34_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('30', '30')
class CalculationTestCase_34_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('29', '29')
class CalculationTestCase_34_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('28', '28')
class CalculationTestCase_34_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('27', '27')
class CalculationTestCase_34_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('26', '26')
class CalculationTestCase_34_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('25', '25')
class CalculationTestCase_34_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('24', '24')
class CalculationTestCase_34_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('23', '23')
class CalculationTestCase_34_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('22', '22')
class CalculationTestCase_34_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('21', '21')
class CalculationTestCase_34_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('20', '20')
class CalculationTestCase_34_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('19', '19')
class CalculationTestCase_34_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('18', '18')
class CalculationTestCase_34_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('17', '17')
class CalculationTestCase_34_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('16', '16')
class CalculationTestCase_34_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('15', '15')
class CalculationTestCase_34_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('14', '14')
class CalculationTestCase_34_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('13', '13')
class CalculationTestCase_34_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('12', '12')
class CalculationTestCase_34_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('11', '11')
class CalculationTestCase_34_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('10', '10')
class CalculationTestCase_34_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('9', '9')
class CalculationTestCase_34_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('8', '8')
class CalculationTestCase_34_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('7', '7')
class CalculationTestCase_34_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('6', '6')
class CalculationTestCase_34_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('5', '5')
class CalculationTestCase_34_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('4', '4')
class CalculationTestCase_34_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('3', '3')
class CalculationTestCase_34_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('2', '2')
class CalculationTestCase_34_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('1', '1')
class CalculationTestCase_34_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('0', '0')
class CalculationTestCase_34_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('-1', '-1')
class CalculationTestCase_34_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-2', '-2')
class CalculationTestCase_34_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-3', '-3')
class CalculationTestCase_34_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-4', '-4')
class CalculationTestCase_34_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-5', '-5')
class CalculationTestCase_34_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-6', '-6')
class CalculationTestCase_34_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-7', '-7')
class CalculationTestCase_34_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-8', '-8')
class CalculationTestCase_34_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-9', '-9')
class CalculationTestCase_34_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-10', '-10')
class CalculationTestCase_34_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-11', '-11')
class CalculationTestCase_34_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-12', '-12')
class CalculationTestCase_34_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-13', '-13')
class CalculationTestCase_34_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-14', '-14')
class CalculationTestCase_34_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-15', '-15')
class CalculationTestCase_34_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 34 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-16', '-16')
class CalculationTestCase_35_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('35', '35')
class CalculationTestCase_35_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('34', '34')
class CalculationTestCase_35_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('33', '33')
class CalculationTestCase_35_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('32', '32')
class CalculationTestCase_35_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('31', '31')
class CalculationTestCase_35_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('30', '30')
class CalculationTestCase_35_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('29', '29')
class CalculationTestCase_35_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('28', '28')
class CalculationTestCase_35_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('27', '27')
class CalculationTestCase_35_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('26', '26')
class CalculationTestCase_35_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('25', '25')
class CalculationTestCase_35_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('24', '24')
class CalculationTestCase_35_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('23', '23')
class CalculationTestCase_35_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('22', '22')
class CalculationTestCase_35_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('21', '21')
class CalculationTestCase_35_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('20', '20')
class CalculationTestCase_35_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('19', '19')
class CalculationTestCase_35_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('18', '18')
class CalculationTestCase_35_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('17', '17')
class CalculationTestCase_35_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('16', '16')
class CalculationTestCase_35_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('15', '15')
class CalculationTestCase_35_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('14', '14')
class CalculationTestCase_35_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('13', '13')
class CalculationTestCase_35_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('12', '12')
class CalculationTestCase_35_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('11', '11')
class CalculationTestCase_35_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('10', '10')
class CalculationTestCase_35_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('9', '9')
class CalculationTestCase_35_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('8', '8')
class CalculationTestCase_35_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('7', '7')
class CalculationTestCase_35_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('6', '6')
class CalculationTestCase_35_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('5', '5')
class CalculationTestCase_35_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('4', '4')
class CalculationTestCase_35_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('3', '3')
class CalculationTestCase_35_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('2', '2')
class CalculationTestCase_35_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('1', '1')
class CalculationTestCase_35_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('0', '0')
class CalculationTestCase_35_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('-1', '-1')
class CalculationTestCase_35_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-2', '-2')
class CalculationTestCase_35_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-3', '-3')
class CalculationTestCase_35_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-4', '-4')
class CalculationTestCase_35_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-5', '-5')
class CalculationTestCase_35_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-6', '-6')
class CalculationTestCase_35_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-7', '-7')
class CalculationTestCase_35_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-8', '-8')
class CalculationTestCase_35_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-9', '-9')
class CalculationTestCase_35_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-10', '-10')
class CalculationTestCase_35_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-11', '-11')
class CalculationTestCase_35_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-12', '-12')
class CalculationTestCase_35_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-13', '-13')
class CalculationTestCase_35_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-14', '-14')
class CalculationTestCase_35_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 35 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-15', '-15')
class CalculationTestCase_36_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('36', '36')
class CalculationTestCase_36_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('35', '35')
class CalculationTestCase_36_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('34', '34')
class CalculationTestCase_36_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('33', '33')
class CalculationTestCase_36_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('32', '32')
class CalculationTestCase_36_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('31', '31')
class CalculationTestCase_36_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('30', '30')
class CalculationTestCase_36_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('29', '29')
class CalculationTestCase_36_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('28', '28')
class CalculationTestCase_36_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('27', '27')
class CalculationTestCase_36_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('26', '26')
class CalculationTestCase_36_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('25', '25')
class CalculationTestCase_36_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('24', '24')
class CalculationTestCase_36_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('23', '23')
class CalculationTestCase_36_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('22', '22')
class CalculationTestCase_36_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('21', '21')
class CalculationTestCase_36_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('20', '20')
class CalculationTestCase_36_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('19', '19')
class CalculationTestCase_36_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('18', '18')
class CalculationTestCase_36_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('17', '17')
class CalculationTestCase_36_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('16', '16')
class CalculationTestCase_36_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('15', '15')
class CalculationTestCase_36_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('14', '14')
class CalculationTestCase_36_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('13', '13')
class CalculationTestCase_36_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('12', '12')
class CalculationTestCase_36_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('11', '11')
class CalculationTestCase_36_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('10', '10')
class CalculationTestCase_36_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('9', '9')
class CalculationTestCase_36_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('8', '8')
class CalculationTestCase_36_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('7', '7')
class CalculationTestCase_36_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('6', '6')
class CalculationTestCase_36_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('5', '5')
class CalculationTestCase_36_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('4', '4')
class CalculationTestCase_36_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('3', '3')
class CalculationTestCase_36_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('2', '2')
class CalculationTestCase_36_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('1', '1')
class CalculationTestCase_36_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('0', '0')
class CalculationTestCase_36_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('-1', '-1')
class CalculationTestCase_36_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-2', '-2')
class CalculationTestCase_36_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-3', '-3')
class CalculationTestCase_36_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-4', '-4')
class CalculationTestCase_36_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-5', '-5')
class CalculationTestCase_36_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-6', '-6')
class CalculationTestCase_36_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-7', '-7')
class CalculationTestCase_36_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-8', '-8')
class CalculationTestCase_36_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-9', '-9')
class CalculationTestCase_36_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-10', '-10')
class CalculationTestCase_36_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-11', '-11')
class CalculationTestCase_36_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-12', '-12')
class CalculationTestCase_36_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-13', '-13')
class CalculationTestCase_36_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 36 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-14', '-14')
class CalculationTestCase_37_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('37', '37')
class CalculationTestCase_37_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('36', '36')
class CalculationTestCase_37_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('35', '35')
class CalculationTestCase_37_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('34', '34')
class CalculationTestCase_37_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('33', '33')
class CalculationTestCase_37_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('32', '32')
class CalculationTestCase_37_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('31', '31')
class CalculationTestCase_37_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('30', '30')
class CalculationTestCase_37_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('29', '29')
class CalculationTestCase_37_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('28', '28')
class CalculationTestCase_37_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('27', '27')
class CalculationTestCase_37_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('26', '26')
class CalculationTestCase_37_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('25', '25')
class CalculationTestCase_37_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('24', '24')
class CalculationTestCase_37_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('23', '23')
class CalculationTestCase_37_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('22', '22')
class CalculationTestCase_37_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('21', '21')
class CalculationTestCase_37_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('20', '20')
class CalculationTestCase_37_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('19', '19')
class CalculationTestCase_37_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('18', '18')
class CalculationTestCase_37_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('17', '17')
class CalculationTestCase_37_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('16', '16')
class CalculationTestCase_37_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('15', '15')
class CalculationTestCase_37_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('14', '14')
class CalculationTestCase_37_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('13', '13')
class CalculationTestCase_37_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('12', '12')
class CalculationTestCase_37_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('11', '11')
class CalculationTestCase_37_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('10', '10')
class CalculationTestCase_37_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('9', '9')
class CalculationTestCase_37_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('8', '8')
class CalculationTestCase_37_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('7', '7')
class CalculationTestCase_37_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('6', '6')
class CalculationTestCase_37_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('5', '5')
class CalculationTestCase_37_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('4', '4')
class CalculationTestCase_37_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('3', '3')
class CalculationTestCase_37_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('2', '2')
class CalculationTestCase_37_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('1', '1')
class CalculationTestCase_37_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('0', '0')
class CalculationTestCase_37_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('-1', '-1')
class CalculationTestCase_37_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-2', '-2')
class CalculationTestCase_37_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-3', '-3')
class CalculationTestCase_37_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-4', '-4')
class CalculationTestCase_37_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-5', '-5')
class CalculationTestCase_37_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-6', '-6')
class CalculationTestCase_37_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-7', '-7')
class CalculationTestCase_37_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-8', '-8')
class CalculationTestCase_37_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-9', '-9')
class CalculationTestCase_37_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-10', '-10')
class CalculationTestCase_37_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-11', '-11')
class CalculationTestCase_37_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-12', '-12')
class CalculationTestCase_37_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 37 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-13', '-13')
class CalculationTestCase_38_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('38', '38')
class CalculationTestCase_38_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('37', '37')
class CalculationTestCase_38_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('36', '36')
class CalculationTestCase_38_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('35', '35')
class CalculationTestCase_38_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('34', '34')
class CalculationTestCase_38_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('33', '33')
class CalculationTestCase_38_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('32', '32')
class CalculationTestCase_38_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('31', '31')
class CalculationTestCase_38_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('30', '30')
class CalculationTestCase_38_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('29', '29')
class CalculationTestCase_38_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('28', '28')
class CalculationTestCase_38_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('27', '27')
class CalculationTestCase_38_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('26', '26')
class CalculationTestCase_38_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('25', '25')
class CalculationTestCase_38_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('24', '24')
class CalculationTestCase_38_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('23', '23')
class CalculationTestCase_38_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('22', '22')
class CalculationTestCase_38_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('21', '21')
class CalculationTestCase_38_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('20', '20')
class CalculationTestCase_38_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('19', '19')
class CalculationTestCase_38_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('18', '18')
class CalculationTestCase_38_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('17', '17')
class CalculationTestCase_38_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('16', '16')
class CalculationTestCase_38_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('15', '15')
class CalculationTestCase_38_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('14', '14')
class CalculationTestCase_38_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('13', '13')
class CalculationTestCase_38_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('12', '12')
class CalculationTestCase_38_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('11', '11')
class CalculationTestCase_38_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('10', '10')
class CalculationTestCase_38_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('9', '9')
class CalculationTestCase_38_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('8', '8')
class CalculationTestCase_38_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('7', '7')
class CalculationTestCase_38_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('6', '6')
class CalculationTestCase_38_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('5', '5')
class CalculationTestCase_38_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('4', '4')
class CalculationTestCase_38_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('3', '3')
class CalculationTestCase_38_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('2', '2')
class CalculationTestCase_38_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('1', '1')
class CalculationTestCase_38_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('0', '0')
class CalculationTestCase_38_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('-1', '-1')
class CalculationTestCase_38_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-2', '-2')
class CalculationTestCase_38_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-3', '-3')
class CalculationTestCase_38_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-4', '-4')
class CalculationTestCase_38_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-5', '-5')
class CalculationTestCase_38_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-6', '-6')
class CalculationTestCase_38_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-7', '-7')
class CalculationTestCase_38_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-8', '-8')
class CalculationTestCase_38_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-9', '-9')
class CalculationTestCase_38_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-10', '-10')
class CalculationTestCase_38_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-11', '-11')
class CalculationTestCase_38_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 38 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-12', '-12')
class CalculationTestCase_39_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('39', '39')
class CalculationTestCase_39_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('38', '38')
class CalculationTestCase_39_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('37', '37')
class CalculationTestCase_39_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('36', '36')
class CalculationTestCase_39_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('35', '35')
class CalculationTestCase_39_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('34', '34')
class CalculationTestCase_39_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('33', '33')
class CalculationTestCase_39_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('32', '32')
class CalculationTestCase_39_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('31', '31')
class CalculationTestCase_39_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('30', '30')
class CalculationTestCase_39_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('29', '29')
class CalculationTestCase_39_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('28', '28')
class CalculationTestCase_39_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('27', '27')
class CalculationTestCase_39_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('26', '26')
class CalculationTestCase_39_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('25', '25')
class CalculationTestCase_39_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('24', '24')
class CalculationTestCase_39_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('23', '23')
class CalculationTestCase_39_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('22', '22')
class CalculationTestCase_39_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('21', '21')
class CalculationTestCase_39_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('20', '20')
class CalculationTestCase_39_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('19', '19')
class CalculationTestCase_39_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('18', '18')
class CalculationTestCase_39_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('17', '17')
class CalculationTestCase_39_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('16', '16')
class CalculationTestCase_39_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('15', '15')
class CalculationTestCase_39_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('14', '14')
class CalculationTestCase_39_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('13', '13')
class CalculationTestCase_39_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('12', '12')
class CalculationTestCase_39_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('11', '11')
class CalculationTestCase_39_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('10', '10')
class CalculationTestCase_39_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('9', '9')
class CalculationTestCase_39_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('8', '8')
class CalculationTestCase_39_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('7', '7')
class CalculationTestCase_39_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('6', '6')
class CalculationTestCase_39_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('5', '5')
class CalculationTestCase_39_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('4', '4')
class CalculationTestCase_39_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('3', '3')
class CalculationTestCase_39_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('2', '2')
class CalculationTestCase_39_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('1', '1')
class CalculationTestCase_39_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('0', '0')
class CalculationTestCase_39_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('-1', '-1')
class CalculationTestCase_39_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-2', '-2')
class CalculationTestCase_39_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-3', '-3')
class CalculationTestCase_39_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-4', '-4')
class CalculationTestCase_39_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-5', '-5')
class CalculationTestCase_39_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-6', '-6')
class CalculationTestCase_39_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-7', '-7')
class CalculationTestCase_39_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-8', '-8')
class CalculationTestCase_39_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-9', '-9')
class CalculationTestCase_39_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-10', '-10')
class CalculationTestCase_39_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 39 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-11', '-11')
class CalculationTestCase_40_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('40', '40')
class CalculationTestCase_40_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('39', '39')
class CalculationTestCase_40_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('38', '38')
class CalculationTestCase_40_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('37', '37')
class CalculationTestCase_40_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('36', '36')
class CalculationTestCase_40_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('35', '35')
class CalculationTestCase_40_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('34', '34')
class CalculationTestCase_40_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('33', '33')
class CalculationTestCase_40_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('32', '32')
class CalculationTestCase_40_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('31', '31')
class CalculationTestCase_40_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('30', '30')
class CalculationTestCase_40_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('29', '29')
class CalculationTestCase_40_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('28', '28')
class CalculationTestCase_40_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('27', '27')
class CalculationTestCase_40_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('26', '26')
class CalculationTestCase_40_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('25', '25')
class CalculationTestCase_40_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('24', '24')
class CalculationTestCase_40_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('23', '23')
class CalculationTestCase_40_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('22', '22')
class CalculationTestCase_40_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('21', '21')
class CalculationTestCase_40_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('20', '20')
class CalculationTestCase_40_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('19', '19')
class CalculationTestCase_40_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('18', '18')
class CalculationTestCase_40_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('17', '17')
class CalculationTestCase_40_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('16', '16')
class CalculationTestCase_40_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('15', '15')
class CalculationTestCase_40_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('14', '14')
class CalculationTestCase_40_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('13', '13')
class CalculationTestCase_40_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('12', '12')
class CalculationTestCase_40_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('11', '11')
class CalculationTestCase_40_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('10', '10')
class CalculationTestCase_40_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('9', '9')
class CalculationTestCase_40_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('8', '8')
class CalculationTestCase_40_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('7', '7')
class CalculationTestCase_40_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('6', '6')
class CalculationTestCase_40_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('5', '5')
class CalculationTestCase_40_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('4', '4')
class CalculationTestCase_40_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('3', '3')
class CalculationTestCase_40_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('2', '2')
class CalculationTestCase_40_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('1', '1')
class CalculationTestCase_40_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('0', '0')
class CalculationTestCase_40_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('-1', '-1')
class CalculationTestCase_40_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-2', '-2')
class CalculationTestCase_40_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-3', '-3')
class CalculationTestCase_40_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-4', '-4')
class CalculationTestCase_40_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-5', '-5')
class CalculationTestCase_40_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-6', '-6')
class CalculationTestCase_40_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-7', '-7')
class CalculationTestCase_40_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-8', '-8')
class CalculationTestCase_40_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-9', '-9')
class CalculationTestCase_40_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 40 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-10', '-10')
class CalculationTestCase_41_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('41', '41')
class CalculationTestCase_41_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('40', '40')
class CalculationTestCase_41_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('39', '39')
class CalculationTestCase_41_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('38', '38')
class CalculationTestCase_41_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('37', '37')
class CalculationTestCase_41_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('36', '36')
class CalculationTestCase_41_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('35', '35')
class CalculationTestCase_41_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('34', '34')
class CalculationTestCase_41_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('33', '33')
class CalculationTestCase_41_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('32', '32')
class CalculationTestCase_41_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('31', '31')
class CalculationTestCase_41_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('30', '30')
class CalculationTestCase_41_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('29', '29')
class CalculationTestCase_41_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('28', '28')
class CalculationTestCase_41_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('27', '27')
class CalculationTestCase_41_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('26', '26')
class CalculationTestCase_41_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('25', '25')
class CalculationTestCase_41_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('24', '24')
class CalculationTestCase_41_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('23', '23')
class CalculationTestCase_41_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('22', '22')
class CalculationTestCase_41_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('21', '21')
class CalculationTestCase_41_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('20', '20')
class CalculationTestCase_41_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('19', '19')
class CalculationTestCase_41_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('18', '18')
class CalculationTestCase_41_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('17', '17')
class CalculationTestCase_41_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('16', '16')
class CalculationTestCase_41_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('15', '15')
class CalculationTestCase_41_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('14', '14')
class CalculationTestCase_41_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('13', '13')
class CalculationTestCase_41_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('12', '12')
class CalculationTestCase_41_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('11', '11')
class CalculationTestCase_41_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('10', '10')
class CalculationTestCase_41_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('9', '9')
class CalculationTestCase_41_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('8', '8')
class CalculationTestCase_41_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('7', '7')
class CalculationTestCase_41_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('6', '6')
class CalculationTestCase_41_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('5', '5')
class CalculationTestCase_41_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('4', '4')
class CalculationTestCase_41_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('3', '3')
class CalculationTestCase_41_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('2', '2')
class CalculationTestCase_41_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('1', '1')
class CalculationTestCase_41_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('0', '0')
class CalculationTestCase_41_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('-1', '-1')
class CalculationTestCase_41_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-2', '-2')
class CalculationTestCase_41_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-3', '-3')
class CalculationTestCase_41_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-4', '-4')
class CalculationTestCase_41_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-5', '-5')
class CalculationTestCase_41_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-6', '-6')
class CalculationTestCase_41_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-7', '-7')
class CalculationTestCase_41_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-8', '-8')
class CalculationTestCase_41_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 41 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-9', '-9')
class CalculationTestCase_42_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('42', '42')
class CalculationTestCase_42_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('41', '41')
class CalculationTestCase_42_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('40', '40')
class CalculationTestCase_42_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('39', '39')
class CalculationTestCase_42_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('38', '38')
class CalculationTestCase_42_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('37', '37')
class CalculationTestCase_42_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('36', '36')
class CalculationTestCase_42_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('35', '35')
class CalculationTestCase_42_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('34', '34')
class CalculationTestCase_42_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('33', '33')
class CalculationTestCase_42_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('32', '32')
class CalculationTestCase_42_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('31', '31')
class CalculationTestCase_42_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('30', '30')
class CalculationTestCase_42_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('29', '29')
class CalculationTestCase_42_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('28', '28')
class CalculationTestCase_42_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('27', '27')
class CalculationTestCase_42_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('26', '26')
class CalculationTestCase_42_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('25', '25')
class CalculationTestCase_42_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('24', '24')
class CalculationTestCase_42_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('23', '23')
class CalculationTestCase_42_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('22', '22')
class CalculationTestCase_42_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('21', '21')
class CalculationTestCase_42_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('20', '20')
class CalculationTestCase_42_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('19', '19')
class CalculationTestCase_42_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('18', '18')
class CalculationTestCase_42_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('17', '17')
class CalculationTestCase_42_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('16', '16')
class CalculationTestCase_42_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('15', '15')
class CalculationTestCase_42_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('14', '14')
class CalculationTestCase_42_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('13', '13')
class CalculationTestCase_42_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('12', '12')
class CalculationTestCase_42_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('11', '11')
class CalculationTestCase_42_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('10', '10')
class CalculationTestCase_42_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('9', '9')
class CalculationTestCase_42_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('8', '8')
class CalculationTestCase_42_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('7', '7')
class CalculationTestCase_42_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('6', '6')
class CalculationTestCase_42_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('5', '5')
class CalculationTestCase_42_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('4', '4')
class CalculationTestCase_42_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('3', '3')
class CalculationTestCase_42_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('2', '2')
class CalculationTestCase_42_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('1', '1')
class CalculationTestCase_42_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('0', '0')
class CalculationTestCase_42_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('-1', '-1')
class CalculationTestCase_42_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-2', '-2')
class CalculationTestCase_42_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-3', '-3')
class CalculationTestCase_42_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-4', '-4')
class CalculationTestCase_42_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-5', '-5')
class CalculationTestCase_42_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-6', '-6')
class CalculationTestCase_42_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-7', '-7')
class CalculationTestCase_42_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 42 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-8', '-8')
class CalculationTestCase_43_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('43', '43')
class CalculationTestCase_43_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('42', '42')
class CalculationTestCase_43_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('41', '41')
class CalculationTestCase_43_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('40', '40')
class CalculationTestCase_43_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('39', '39')
class CalculationTestCase_43_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('38', '38')
class CalculationTestCase_43_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('37', '37')
class CalculationTestCase_43_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('36', '36')
class CalculationTestCase_43_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('35', '35')
class CalculationTestCase_43_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('34', '34')
class CalculationTestCase_43_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('33', '33')
class CalculationTestCase_43_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('32', '32')
class CalculationTestCase_43_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('31', '31')
class CalculationTestCase_43_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('30', '30')
class CalculationTestCase_43_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('29', '29')
class CalculationTestCase_43_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('28', '28')
class CalculationTestCase_43_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('27', '27')
class CalculationTestCase_43_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('26', '26')
class CalculationTestCase_43_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('25', '25')
class CalculationTestCase_43_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('24', '24')
class CalculationTestCase_43_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('23', '23')
class CalculationTestCase_43_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('22', '22')
class CalculationTestCase_43_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('21', '21')
class CalculationTestCase_43_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('20', '20')
class CalculationTestCase_43_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('19', '19')
class CalculationTestCase_43_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('18', '18')
class CalculationTestCase_43_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('17', '17')
class CalculationTestCase_43_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('16', '16')
class CalculationTestCase_43_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('15', '15')
class CalculationTestCase_43_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('14', '14')
class CalculationTestCase_43_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('13', '13')
class CalculationTestCase_43_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('12', '12')
class CalculationTestCase_43_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('11', '11')
class CalculationTestCase_43_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('10', '10')
class CalculationTestCase_43_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('9', '9')
class CalculationTestCase_43_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('8', '8')
class CalculationTestCase_43_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('7', '7')
class CalculationTestCase_43_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('6', '6')
class CalculationTestCase_43_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('5', '5')
class CalculationTestCase_43_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('4', '4')
class CalculationTestCase_43_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('3', '3')
class CalculationTestCase_43_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('2', '2')
class CalculationTestCase_43_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('1', '1')
class CalculationTestCase_43_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('0', '0')
class CalculationTestCase_43_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('-1', '-1')
class CalculationTestCase_43_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-2', '-2')
class CalculationTestCase_43_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-3', '-3')
class CalculationTestCase_43_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-4', '-4')
class CalculationTestCase_43_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-5', '-5')
class CalculationTestCase_43_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-6', '-6')
class CalculationTestCase_43_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 43 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-7', '-7')
class CalculationTestCase_44_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('44', '44')
class CalculationTestCase_44_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('43', '43')
class CalculationTestCase_44_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('42', '42')
class CalculationTestCase_44_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('41', '41')
class CalculationTestCase_44_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('40', '40')
class CalculationTestCase_44_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('39', '39')
class CalculationTestCase_44_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('38', '38')
class CalculationTestCase_44_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('37', '37')
class CalculationTestCase_44_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('36', '36')
class CalculationTestCase_44_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('35', '35')
class CalculationTestCase_44_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('34', '34')
class CalculationTestCase_44_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('33', '33')
class CalculationTestCase_44_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('32', '32')
class CalculationTestCase_44_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('31', '31')
class CalculationTestCase_44_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('30', '30')
class CalculationTestCase_44_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('29', '29')
class CalculationTestCase_44_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('28', '28')
class CalculationTestCase_44_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('27', '27')
class CalculationTestCase_44_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('26', '26')
class CalculationTestCase_44_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('25', '25')
class CalculationTestCase_44_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('24', '24')
class CalculationTestCase_44_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('23', '23')
class CalculationTestCase_44_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('22', '22')
class CalculationTestCase_44_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('21', '21')
class CalculationTestCase_44_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('20', '20')
class CalculationTestCase_44_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('19', '19')
class CalculationTestCase_44_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('18', '18')
class CalculationTestCase_44_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('17', '17')
class CalculationTestCase_44_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('16', '16')
class CalculationTestCase_44_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('15', '15')
class CalculationTestCase_44_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('14', '14')
class CalculationTestCase_44_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('13', '13')
class CalculationTestCase_44_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('12', '12')
class CalculationTestCase_44_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('11', '11')
class CalculationTestCase_44_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('10', '10')
class CalculationTestCase_44_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('9', '9')
class CalculationTestCase_44_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('8', '8')
class CalculationTestCase_44_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('7', '7')
class CalculationTestCase_44_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('6', '6')
class CalculationTestCase_44_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('5', '5')
class CalculationTestCase_44_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('4', '4')
class CalculationTestCase_44_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('3', '3')
class CalculationTestCase_44_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('2', '2')
class CalculationTestCase_44_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('1', '1')
class CalculationTestCase_44_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('0', '0')
class CalculationTestCase_44_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('-1', '-1')
class CalculationTestCase_44_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-2', '-2')
class CalculationTestCase_44_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-3', '-3')
class CalculationTestCase_44_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-4', '-4')
class CalculationTestCase_44_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-5', '-5')
class CalculationTestCase_44_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 44 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-6', '-6')
class CalculationTestCase_45_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('45', '45')
class CalculationTestCase_45_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('44', '44')
class CalculationTestCase_45_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('43', '43')
class CalculationTestCase_45_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('42', '42')
class CalculationTestCase_45_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('41', '41')
class CalculationTestCase_45_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('40', '40')
class CalculationTestCase_45_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('39', '39')
class CalculationTestCase_45_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('38', '38')
class CalculationTestCase_45_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('37', '37')
class CalculationTestCase_45_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('36', '36')
class CalculationTestCase_45_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('35', '35')
class CalculationTestCase_45_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('34', '34')
class CalculationTestCase_45_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('33', '33')
class CalculationTestCase_45_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('32', '32')
class CalculationTestCase_45_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('31', '31')
class CalculationTestCase_45_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('30', '30')
class CalculationTestCase_45_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('29', '29')
class CalculationTestCase_45_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('28', '28')
class CalculationTestCase_45_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('27', '27')
class CalculationTestCase_45_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('26', '26')
class CalculationTestCase_45_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('25', '25')
class CalculationTestCase_45_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('24', '24')
class CalculationTestCase_45_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('23', '23')
class CalculationTestCase_45_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('22', '22')
class CalculationTestCase_45_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('21', '21')
class CalculationTestCase_45_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('20', '20')
class CalculationTestCase_45_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('19', '19')
class CalculationTestCase_45_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('18', '18')
class CalculationTestCase_45_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('17', '17')
class CalculationTestCase_45_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('16', '16')
class CalculationTestCase_45_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('15', '15')
class CalculationTestCase_45_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('14', '14')
class CalculationTestCase_45_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('13', '13')
class CalculationTestCase_45_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('12', '12')
class CalculationTestCase_45_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('11', '11')
class CalculationTestCase_45_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('10', '10')
class CalculationTestCase_45_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('9', '9')
class CalculationTestCase_45_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('8', '8')
class CalculationTestCase_45_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('7', '7')
class CalculationTestCase_45_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('6', '6')
class CalculationTestCase_45_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('5', '5')
class CalculationTestCase_45_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('4', '4')
class CalculationTestCase_45_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('3', '3')
class CalculationTestCase_45_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('2', '2')
class CalculationTestCase_45_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('1', '1')
class CalculationTestCase_45_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('0', '0')
class CalculationTestCase_45_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('-1', '-1')
class CalculationTestCase_45_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-2', '-2')
class CalculationTestCase_45_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-3', '-3')
class CalculationTestCase_45_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-4', '-4')
class CalculationTestCase_45_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 45 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-5', '-5')
class CalculationTestCase_46_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('46', '46')
class CalculationTestCase_46_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('45', '45')
class CalculationTestCase_46_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('44', '44')
class CalculationTestCase_46_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('43', '43')
class CalculationTestCase_46_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('42', '42')
class CalculationTestCase_46_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('41', '41')
class CalculationTestCase_46_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('40', '40')
class CalculationTestCase_46_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('39', '39')
class CalculationTestCase_46_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('38', '38')
class CalculationTestCase_46_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('37', '37')
class CalculationTestCase_46_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('36', '36')
class CalculationTestCase_46_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('35', '35')
class CalculationTestCase_46_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('34', '34')
class CalculationTestCase_46_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('33', '33')
class CalculationTestCase_46_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('32', '32')
class CalculationTestCase_46_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('31', '31')
class CalculationTestCase_46_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('30', '30')
class CalculationTestCase_46_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('29', '29')
class CalculationTestCase_46_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('28', '28')
class CalculationTestCase_46_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('27', '27')
class CalculationTestCase_46_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('26', '26')
class CalculationTestCase_46_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('25', '25')
class CalculationTestCase_46_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('24', '24')
class CalculationTestCase_46_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('23', '23')
class CalculationTestCase_46_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('22', '22')
class CalculationTestCase_46_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('21', '21')
class CalculationTestCase_46_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('20', '20')
class CalculationTestCase_46_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('19', '19')
class CalculationTestCase_46_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('18', '18')
class CalculationTestCase_46_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('17', '17')
class CalculationTestCase_46_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('16', '16')
class CalculationTestCase_46_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('15', '15')
class CalculationTestCase_46_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('14', '14')
class CalculationTestCase_46_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('13', '13')
class CalculationTestCase_46_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('12', '12')
class CalculationTestCase_46_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('11', '11')
class CalculationTestCase_46_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('10', '10')
class CalculationTestCase_46_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('9', '9')
class CalculationTestCase_46_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('8', '8')
class CalculationTestCase_46_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('7', '7')
class CalculationTestCase_46_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('6', '6')
class CalculationTestCase_46_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('5', '5')
class CalculationTestCase_46_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('4', '4')
class CalculationTestCase_46_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('3', '3')
class CalculationTestCase_46_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('2', '2')
class CalculationTestCase_46_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('1', '1')
class CalculationTestCase_46_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('0', '0')
class CalculationTestCase_46_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('-1', '-1')
class CalculationTestCase_46_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-2', '-2')
class CalculationTestCase_46_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-3', '-3')
class CalculationTestCase_46_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 46 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-4', '-4')
class CalculationTestCase_47_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('47', '47')
class CalculationTestCase_47_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('46', '46')
class CalculationTestCase_47_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('45', '45')
class CalculationTestCase_47_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('44', '44')
class CalculationTestCase_47_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('43', '43')
class CalculationTestCase_47_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('42', '42')
class CalculationTestCase_47_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('41', '41')
class CalculationTestCase_47_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('40', '40')
class CalculationTestCase_47_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('39', '39')
class CalculationTestCase_47_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('38', '38')
class CalculationTestCase_47_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('37', '37')
class CalculationTestCase_47_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('36', '36')
class CalculationTestCase_47_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('35', '35')
class CalculationTestCase_47_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('34', '34')
class CalculationTestCase_47_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('33', '33')
class CalculationTestCase_47_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('32', '32')
class CalculationTestCase_47_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('31', '31')
class CalculationTestCase_47_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('30', '30')
class CalculationTestCase_47_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('29', '29')
class CalculationTestCase_47_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('28', '28')
class CalculationTestCase_47_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('27', '27')
class CalculationTestCase_47_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('26', '26')
class CalculationTestCase_47_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('25', '25')
class CalculationTestCase_47_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('24', '24')
class CalculationTestCase_47_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('23', '23')
class CalculationTestCase_47_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('22', '22')
class CalculationTestCase_47_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('21', '21')
class CalculationTestCase_47_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('20', '20')
class CalculationTestCase_47_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('19', '19')
class CalculationTestCase_47_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('18', '18')
class CalculationTestCase_47_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('17', '17')
class CalculationTestCase_47_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('16', '16')
class CalculationTestCase_47_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('15', '15')
class CalculationTestCase_47_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('14', '14')
class CalculationTestCase_47_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('13', '13')
class CalculationTestCase_47_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('12', '12')
class CalculationTestCase_47_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('11', '11')
class CalculationTestCase_47_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('10', '10')
class CalculationTestCase_47_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('9', '9')
class CalculationTestCase_47_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('8', '8')
class CalculationTestCase_47_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('7', '7')
class CalculationTestCase_47_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('6', '6')
class CalculationTestCase_47_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('5', '5')
class CalculationTestCase_47_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('4', '4')
class CalculationTestCase_47_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('3', '3')
class CalculationTestCase_47_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('2', '2')
class CalculationTestCase_47_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('1', '1')
class CalculationTestCase_47_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('0', '0')
class CalculationTestCase_47_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('-1', '-1')
class CalculationTestCase_47_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-2', '-2')
class CalculationTestCase_47_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 47 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-3', '-3')
class CalculationTestCase_48_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('48', '48')
class CalculationTestCase_48_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('47', '47')
class CalculationTestCase_48_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('46', '46')
class CalculationTestCase_48_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('45', '45')
class CalculationTestCase_48_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('44', '44')
class CalculationTestCase_48_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('43', '43')
class CalculationTestCase_48_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('42', '42')
class CalculationTestCase_48_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('41', '41')
class CalculationTestCase_48_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('40', '40')
class CalculationTestCase_48_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('39', '39')
class CalculationTestCase_48_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('38', '38')
class CalculationTestCase_48_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('37', '37')
class CalculationTestCase_48_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('36', '36')
class CalculationTestCase_48_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('35', '35')
class CalculationTestCase_48_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('34', '34')
class CalculationTestCase_48_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('33', '33')
class CalculationTestCase_48_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('32', '32')
class CalculationTestCase_48_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('31', '31')
class CalculationTestCase_48_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('30', '30')
class CalculationTestCase_48_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('29', '29')
class CalculationTestCase_48_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('28', '28')
class CalculationTestCase_48_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('27', '27')
class CalculationTestCase_48_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('26', '26')
class CalculationTestCase_48_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('25', '25')
class CalculationTestCase_48_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('24', '24')
class CalculationTestCase_48_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('23', '23')
class CalculationTestCase_48_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('22', '22')
class CalculationTestCase_48_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('21', '21')
class CalculationTestCase_48_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('20', '20')
class CalculationTestCase_48_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('19', '19')
class CalculationTestCase_48_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('18', '18')
class CalculationTestCase_48_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('17', '17')
class CalculationTestCase_48_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('16', '16')
class CalculationTestCase_48_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('15', '15')
class CalculationTestCase_48_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('14', '14')
class CalculationTestCase_48_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('13', '13')
class CalculationTestCase_48_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('12', '12')
class CalculationTestCase_48_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('11', '11')
class CalculationTestCase_48_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('10', '10')
class CalculationTestCase_48_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('9', '9')
class CalculationTestCase_48_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('8', '8')
class CalculationTestCase_48_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('7', '7')
class CalculationTestCase_48_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('6', '6')
class CalculationTestCase_48_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('5', '5')
class CalculationTestCase_48_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('4', '4')
class CalculationTestCase_48_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('3', '3')
class CalculationTestCase_48_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('2', '2')
class CalculationTestCase_48_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('1', '1')
class CalculationTestCase_48_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('0', '0')
class CalculationTestCase_48_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('-1', '-1')
class CalculationTestCase_48_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 48 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-2', '-2')
class CalculationTestCase_49_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('49', '49')
class CalculationTestCase_49_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('48', '48')
class CalculationTestCase_49_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('47', '47')
class CalculationTestCase_49_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('46', '46')
class CalculationTestCase_49_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('45', '45')
class CalculationTestCase_49_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('44', '44')
class CalculationTestCase_49_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('43', '43')
class CalculationTestCase_49_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('42', '42')
class CalculationTestCase_49_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('41', '41')
class CalculationTestCase_49_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('40', '40')
class CalculationTestCase_49_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('39', '39')
class CalculationTestCase_49_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('38', '38')
class CalculationTestCase_49_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('37', '37')
class CalculationTestCase_49_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('36', '36')
class CalculationTestCase_49_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('35', '35')
class CalculationTestCase_49_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('34', '34')
class CalculationTestCase_49_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('33', '33')
class CalculationTestCase_49_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('32', '32')
class CalculationTestCase_49_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('31', '31')
class CalculationTestCase_49_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('30', '30')
class CalculationTestCase_49_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('29', '29')
class CalculationTestCase_49_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('28', '28')
class CalculationTestCase_49_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('27', '27')
class CalculationTestCase_49_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('26', '26')
class CalculationTestCase_49_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('25', '25')
class CalculationTestCase_49_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('24', '24')
class CalculationTestCase_49_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('23', '23')
class CalculationTestCase_49_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('22', '22')
class CalculationTestCase_49_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('21', '21')
class CalculationTestCase_49_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('20', '20')
class CalculationTestCase_49_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('19', '19')
class CalculationTestCase_49_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('18', '18')
class CalculationTestCase_49_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('17', '17')
class CalculationTestCase_49_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('16', '16')
class CalculationTestCase_49_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('15', '15')
class CalculationTestCase_49_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('14', '14')
class CalculationTestCase_49_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('13', '13')
class CalculationTestCase_49_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('12', '12')
class CalculationTestCase_49_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('11', '11')
class CalculationTestCase_49_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('10', '10')
class CalculationTestCase_49_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('9', '9')
class CalculationTestCase_49_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('8', '8')
class CalculationTestCase_49_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('7', '7')
class CalculationTestCase_49_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('6', '6')
class CalculationTestCase_49_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('5', '5')
class CalculationTestCase_49_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('4', '4')
class CalculationTestCase_49_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('3', '3')
class CalculationTestCase_49_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('2', '2')
class CalculationTestCase_49_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('1', '1')
class CalculationTestCase_49_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('0', '0')
class CalculationTestCase_49_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 49 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('-1', '-1')
class CalculationTestCase_50_minus_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 0
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 0:
            self.assertEqual('50', '50')
class CalculationTestCase_50_minus_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 1
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 1:
            self.assertEqual('49', '49')
class CalculationTestCase_50_minus_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 2
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 2:
            self.assertEqual('48', '48')
class CalculationTestCase_50_minus_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 3
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 3:
            self.assertEqual('47', '47')
class CalculationTestCase_50_minus_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 4
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 4:
            self.assertEqual('46', '46')
class CalculationTestCase_50_minus_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 5
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 5:
            self.assertEqual('45', '45')
class CalculationTestCase_50_minus_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 6
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 6:
            self.assertEqual('44', '44')
class CalculationTestCase_50_minus_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 7
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 7:
            self.assertEqual('43', '43')
class CalculationTestCase_50_minus_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 8
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 8:
            self.assertEqual('42', '42')
class CalculationTestCase_50_minus_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 9
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 9:
            self.assertEqual('41', '41')
class CalculationTestCase_50_minus_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 10
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 10:
            self.assertEqual('40', '40')
class CalculationTestCase_50_minus_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 11
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 11:
            self.assertEqual('39', '39')
class CalculationTestCase_50_minus_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 12
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 12:
            self.assertEqual('38', '38')
class CalculationTestCase_50_minus_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 13
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 13:
            self.assertEqual('37', '37')
class CalculationTestCase_50_minus_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 14
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 14:
            self.assertEqual('36', '36')
class CalculationTestCase_50_minus_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 15
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 15:
            self.assertEqual('35', '35')
class CalculationTestCase_50_minus_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 16
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 16:
            self.assertEqual('34', '34')
class CalculationTestCase_50_minus_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 17
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 17:
            self.assertEqual('33', '33')
class CalculationTestCase_50_minus_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 18
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 18:
            self.assertEqual('32', '32')
class CalculationTestCase_50_minus_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 19
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 19:
            self.assertEqual('31', '31')
class CalculationTestCase_50_minus_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 20
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 20:
            self.assertEqual('30', '30')
class CalculationTestCase_50_minus_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 21
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 21:
            self.assertEqual('29', '29')
class CalculationTestCase_50_minus_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 22
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 22:
            self.assertEqual('28', '28')
class CalculationTestCase_50_minus_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 23
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 23:
            self.assertEqual('27', '27')
class CalculationTestCase_50_minus_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 24
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 24:
            self.assertEqual('26', '26')
class CalculationTestCase_50_minus_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 25
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 25:
            self.assertEqual('25', '25')
class CalculationTestCase_50_minus_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 26
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 26:
            self.assertEqual('24', '24')
class CalculationTestCase_50_minus_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 27
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 27:
            self.assertEqual('23', '23')
class CalculationTestCase_50_minus_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 28
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 28:
            self.assertEqual('22', '22')
class CalculationTestCase_50_minus_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 29
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 29:
            self.assertEqual('21', '21')
class CalculationTestCase_50_minus_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 30
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 30:
            self.assertEqual('20', '20')
class CalculationTestCase_50_minus_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 31
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 31:
            self.assertEqual('19', '19')
class CalculationTestCase_50_minus_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 32
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 32:
            self.assertEqual('18', '18')
class CalculationTestCase_50_minus_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 33
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 33:
            self.assertEqual('17', '17')
class CalculationTestCase_50_minus_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 34
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 34:
            self.assertEqual('16', '16')
class CalculationTestCase_50_minus_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 35
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 35:
            self.assertEqual('15', '15')
class CalculationTestCase_50_minus_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 36
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 36:
            self.assertEqual('14', '14')
class CalculationTestCase_50_minus_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 37
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 37:
            self.assertEqual('13', '13')
class CalculationTestCase_50_minus_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 38
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 38:
            self.assertEqual('12', '12')
class CalculationTestCase_50_minus_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 39
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 39:
            self.assertEqual('11', '11')
class CalculationTestCase_50_minus_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 40
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 40:
            self.assertEqual('10', '10')
class CalculationTestCase_50_minus_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 41
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 41:
            self.assertEqual('9', '9')
class CalculationTestCase_50_minus_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 42
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 42:
            self.assertEqual('8', '8')
class CalculationTestCase_50_minus_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 43
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 43:
            self.assertEqual('7', '7')
class CalculationTestCase_50_minus_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 44
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 44:
            self.assertEqual('6', '6')
class CalculationTestCase_50_minus_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 45
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 45:
            self.assertEqual('5', '5')
class CalculationTestCase_50_minus_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 46
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 46:
            self.assertEqual('4', '4')
class CalculationTestCase_50_minus_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 47
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 47:
            self.assertEqual('3', '3')
class CalculationTestCase_50_minus_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 48
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 48:
            self.assertEqual('2', '2')
class CalculationTestCase_50_minus_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 49
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 49:
            self.assertEqual('1', '1')
class CalculationTestCase_50_minus_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 50
        self.sign = '-'
        if self.num1 == 50 and self.sign == '-' and self.num2 == 50:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Undefined', 'Undefined')
class CalculationTestCase_0_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0', '0')
class CalculationTestCase_0_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 0 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0', '0')
class CalculationTestCase_1_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_1_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('1', '1')
class CalculationTestCase_1_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_1_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_1_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_1_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('0.2', '0.2')
class CalculationTestCase_1_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('0.1666666666666666666666666667', '0.1666666666666666666666666667')
class CalculationTestCase_1_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('0.1428571428571428571428571429', '0.1428571428571428571428571429')
class CalculationTestCase_1_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('0.125', '0.125')
class CalculationTestCase_1_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('0.1111111111111111111111111111', '0.1111111111111111111111111111')
class CalculationTestCase_1_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('0.1', '0.1')
class CalculationTestCase_1_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('0.09090909090909090909090909091', '0.09090909090909090909090909091')
class CalculationTestCase_1_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0.08333333333333333333333333333', '0.08333333333333333333333333333')
class CalculationTestCase_1_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.07692307692307692307692307692', '0.07692307692307692307692307692')
class CalculationTestCase_1_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.07142857142857142857142857143', '0.07142857142857142857142857143')
class CalculationTestCase_1_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.06666666666666666666666666667', '0.06666666666666666666666666667')
class CalculationTestCase_1_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.0625', '0.0625')
class CalculationTestCase_1_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.05882352941176470588235294118', '0.05882352941176470588235294118')
class CalculationTestCase_1_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.05555555555555555555555555556', '0.05555555555555555555555555556')
class CalculationTestCase_1_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.05263157894736842105263157895', '0.05263157894736842105263157895')
class CalculationTestCase_1_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.05', '0.05')
class CalculationTestCase_1_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.04761904761904761904761904762', '0.04761904761904761904761904762')
class CalculationTestCase_1_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.04545454545454545454545454545', '0.04545454545454545454545454545')
class CalculationTestCase_1_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.04347826086956521739130434783', '0.04347826086956521739130434783')
class CalculationTestCase_1_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.04166666666666666666666666667', '0.04166666666666666666666666667')
class CalculationTestCase_1_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.04', '0.04')
class CalculationTestCase_1_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.03846153846153846153846153846', '0.03846153846153846153846153846')
class CalculationTestCase_1_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.03703703703703703703703703704', '0.03703703703703703703703703704')
class CalculationTestCase_1_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.03571428571428571428571428571', '0.03571428571428571428571428571')
class CalculationTestCase_1_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.03448275862068965517241379310', '0.03448275862068965517241379310')
class CalculationTestCase_1_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.03333333333333333333333333333', '0.03333333333333333333333333333')
class CalculationTestCase_1_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.03225806451612903225806451613', '0.03225806451612903225806451613')
class CalculationTestCase_1_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.03125', '0.03125')
class CalculationTestCase_1_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.03030303030303030303030303030', '0.03030303030303030303030303030')
class CalculationTestCase_1_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.02941176470588235294117647059', '0.02941176470588235294117647059')
class CalculationTestCase_1_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.02857142857142857142857142857', '0.02857142857142857142857142857')
class CalculationTestCase_1_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.02777777777777777777777777778', '0.02777777777777777777777777778')
class CalculationTestCase_1_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.02702702702702702702702702703', '0.02702702702702702702702702703')
class CalculationTestCase_1_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.02631578947368421052631578947', '0.02631578947368421052631578947')
class CalculationTestCase_1_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.02564102564102564102564102564', '0.02564102564102564102564102564')
class CalculationTestCase_1_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.025', '0.025')
class CalculationTestCase_1_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.02439024390243902439024390244', '0.02439024390243902439024390244')
class CalculationTestCase_1_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.02380952380952380952380952381', '0.02380952380952380952380952381')
class CalculationTestCase_1_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.02325581395348837209302325581', '0.02325581395348837209302325581')
class CalculationTestCase_1_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.02272727272727272727272727273', '0.02272727272727272727272727273')
class CalculationTestCase_1_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.02222222222222222222222222222', '0.02222222222222222222222222222')
class CalculationTestCase_1_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.02173913043478260869565217391', '0.02173913043478260869565217391')
class CalculationTestCase_1_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.02127659574468085106382978723', '0.02127659574468085106382978723')
class CalculationTestCase_1_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.02083333333333333333333333333', '0.02083333333333333333333333333')
class CalculationTestCase_1_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.02040816326530612244897959184', '0.02040816326530612244897959184')
class CalculationTestCase_1_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 1 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.02', '0.02')
class CalculationTestCase_2_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_2_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('2', '2')
class CalculationTestCase_2_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('1', '1')
class CalculationTestCase_2_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_2_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_2_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('0.4', '0.4')
class CalculationTestCase_2_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_2_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('0.2857142857142857142857142857', '0.2857142857142857142857142857')
class CalculationTestCase_2_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_2_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('0.2222222222222222222222222222', '0.2222222222222222222222222222')
class CalculationTestCase_2_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('0.2', '0.2')
class CalculationTestCase_2_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('0.1818181818181818181818181818', '0.1818181818181818181818181818')
class CalculationTestCase_2_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0.1666666666666666666666666667', '0.1666666666666666666666666667')
class CalculationTestCase_2_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.1538461538461538461538461538', '0.1538461538461538461538461538')
class CalculationTestCase_2_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.1428571428571428571428571429', '0.1428571428571428571428571429')
class CalculationTestCase_2_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.1333333333333333333333333333', '0.1333333333333333333333333333')
class CalculationTestCase_2_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.125', '0.125')
class CalculationTestCase_2_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.1176470588235294117647058824', '0.1176470588235294117647058824')
class CalculationTestCase_2_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.1111111111111111111111111111', '0.1111111111111111111111111111')
class CalculationTestCase_2_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.1052631578947368421052631579', '0.1052631578947368421052631579')
class CalculationTestCase_2_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.1', '0.1')
class CalculationTestCase_2_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.09523809523809523809523809524', '0.09523809523809523809523809524')
class CalculationTestCase_2_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.09090909090909090909090909091', '0.09090909090909090909090909091')
class CalculationTestCase_2_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.08695652173913043478260869565', '0.08695652173913043478260869565')
class CalculationTestCase_2_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.08333333333333333333333333333', '0.08333333333333333333333333333')
class CalculationTestCase_2_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.08', '0.08')
class CalculationTestCase_2_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.07692307692307692307692307692', '0.07692307692307692307692307692')
class CalculationTestCase_2_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.07407407407407407407407407407', '0.07407407407407407407407407407')
class CalculationTestCase_2_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.07142857142857142857142857143', '0.07142857142857142857142857143')
class CalculationTestCase_2_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.06896551724137931034482758621', '0.06896551724137931034482758621')
class CalculationTestCase_2_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.06666666666666666666666666667', '0.06666666666666666666666666667')
class CalculationTestCase_2_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.06451612903225806451612903226', '0.06451612903225806451612903226')
class CalculationTestCase_2_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.0625', '0.0625')
class CalculationTestCase_2_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.06060606060606060606060606061', '0.06060606060606060606060606061')
class CalculationTestCase_2_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.05882352941176470588235294118', '0.05882352941176470588235294118')
class CalculationTestCase_2_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.05714285714285714285714285714', '0.05714285714285714285714285714')
class CalculationTestCase_2_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.05555555555555555555555555556', '0.05555555555555555555555555556')
class CalculationTestCase_2_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.05405405405405405405405405405', '0.05405405405405405405405405405')
class CalculationTestCase_2_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.05263157894736842105263157895', '0.05263157894736842105263157895')
class CalculationTestCase_2_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.05128205128205128205128205128', '0.05128205128205128205128205128')
class CalculationTestCase_2_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.05', '0.05')
class CalculationTestCase_2_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.04878048780487804878048780488', '0.04878048780487804878048780488')
class CalculationTestCase_2_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.04761904761904761904761904762', '0.04761904761904761904761904762')
class CalculationTestCase_2_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.04651162790697674418604651163', '0.04651162790697674418604651163')
class CalculationTestCase_2_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.04545454545454545454545454545', '0.04545454545454545454545454545')
class CalculationTestCase_2_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.04444444444444444444444444444', '0.04444444444444444444444444444')
class CalculationTestCase_2_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.04347826086956521739130434783', '0.04347826086956521739130434783')
class CalculationTestCase_2_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.04255319148936170212765957447', '0.04255319148936170212765957447')
class CalculationTestCase_2_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.04166666666666666666666666667', '0.04166666666666666666666666667')
class CalculationTestCase_2_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.04081632653061224489795918367', '0.04081632653061224489795918367')
class CalculationTestCase_2_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 2 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.04', '0.04')
class CalculationTestCase_3_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_3_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('3', '3')
class CalculationTestCase_3_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_3_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('1', '1')
class CalculationTestCase_3_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_3_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('0.6', '0.6')
class CalculationTestCase_3_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_3_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('0.4285714285714285714285714286', '0.4285714285714285714285714286')
class CalculationTestCase_3_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('0.375', '0.375')
class CalculationTestCase_3_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_3_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('0.3', '0.3')
class CalculationTestCase_3_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('0.2727272727272727272727272727', '0.2727272727272727272727272727')
class CalculationTestCase_3_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_3_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.2307692307692307692307692308', '0.2307692307692307692307692308')
class CalculationTestCase_3_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.2142857142857142857142857143', '0.2142857142857142857142857143')
class CalculationTestCase_3_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.2', '0.2')
class CalculationTestCase_3_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.1875', '0.1875')
class CalculationTestCase_3_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.1764705882352941176470588235', '0.1764705882352941176470588235')
class CalculationTestCase_3_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.1666666666666666666666666667', '0.1666666666666666666666666667')
class CalculationTestCase_3_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.1578947368421052631578947368', '0.1578947368421052631578947368')
class CalculationTestCase_3_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.15', '0.15')
class CalculationTestCase_3_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.1428571428571428571428571429', '0.1428571428571428571428571429')
class CalculationTestCase_3_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.1363636363636363636363636364', '0.1363636363636363636363636364')
class CalculationTestCase_3_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.1304347826086956521739130435', '0.1304347826086956521739130435')
class CalculationTestCase_3_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.125', '0.125')
class CalculationTestCase_3_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.12', '0.12')
class CalculationTestCase_3_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.1153846153846153846153846154', '0.1153846153846153846153846154')
class CalculationTestCase_3_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.1111111111111111111111111111', '0.1111111111111111111111111111')
class CalculationTestCase_3_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.1071428571428571428571428571', '0.1071428571428571428571428571')
class CalculationTestCase_3_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.1034482758620689655172413793', '0.1034482758620689655172413793')
class CalculationTestCase_3_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.1', '0.1')
class CalculationTestCase_3_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.09677419354838709677419354839', '0.09677419354838709677419354839')
class CalculationTestCase_3_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.09375', '0.09375')
class CalculationTestCase_3_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.09090909090909090909090909091', '0.09090909090909090909090909091')
class CalculationTestCase_3_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.08823529411764705882352941176', '0.08823529411764705882352941176')
class CalculationTestCase_3_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.08571428571428571428571428571', '0.08571428571428571428571428571')
class CalculationTestCase_3_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.08333333333333333333333333333', '0.08333333333333333333333333333')
class CalculationTestCase_3_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.08108108108108108108108108108', '0.08108108108108108108108108108')
class CalculationTestCase_3_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.07894736842105263157894736842', '0.07894736842105263157894736842')
class CalculationTestCase_3_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.07692307692307692307692307692', '0.07692307692307692307692307692')
class CalculationTestCase_3_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.075', '0.075')
class CalculationTestCase_3_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.07317073170731707317073170732', '0.07317073170731707317073170732')
class CalculationTestCase_3_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.07142857142857142857142857143', '0.07142857142857142857142857143')
class CalculationTestCase_3_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.06976744186046511627906976744', '0.06976744186046511627906976744')
class CalculationTestCase_3_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.06818181818181818181818181818', '0.06818181818181818181818181818')
class CalculationTestCase_3_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.06666666666666666666666666667', '0.06666666666666666666666666667')
class CalculationTestCase_3_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.06521739130434782608695652174', '0.06521739130434782608695652174')
class CalculationTestCase_3_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.06382978723404255319148936170', '0.06382978723404255319148936170')
class CalculationTestCase_3_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.0625', '0.0625')
class CalculationTestCase_3_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.06122448979591836734693877551', '0.06122448979591836734693877551')
class CalculationTestCase_3_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 3 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.06', '0.06')
class CalculationTestCase_4_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_4_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('4', '4')
class CalculationTestCase_4_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('2', '2')
class CalculationTestCase_4_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_4_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('1', '1')
class CalculationTestCase_4_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('0.8', '0.8')
class CalculationTestCase_4_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_4_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('0.5714285714285714285714285714', '0.5714285714285714285714285714')
class CalculationTestCase_4_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_4_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('0.4444444444444444444444444444', '0.4444444444444444444444444444')
class CalculationTestCase_4_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('0.4', '0.4')
class CalculationTestCase_4_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('0.3636363636363636363636363636', '0.3636363636363636363636363636')
class CalculationTestCase_4_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_4_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.3076923076923076923076923077', '0.3076923076923076923076923077')
class CalculationTestCase_4_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.2857142857142857142857142857', '0.2857142857142857142857142857')
class CalculationTestCase_4_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.2666666666666666666666666667', '0.2666666666666666666666666667')
class CalculationTestCase_4_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_4_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.2352941176470588235294117647', '0.2352941176470588235294117647')
class CalculationTestCase_4_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.2222222222222222222222222222', '0.2222222222222222222222222222')
class CalculationTestCase_4_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.2105263157894736842105263158', '0.2105263157894736842105263158')
class CalculationTestCase_4_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.2', '0.2')
class CalculationTestCase_4_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.1904761904761904761904761905', '0.1904761904761904761904761905')
class CalculationTestCase_4_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.1818181818181818181818181818', '0.1818181818181818181818181818')
class CalculationTestCase_4_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.1739130434782608695652173913', '0.1739130434782608695652173913')
class CalculationTestCase_4_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.1666666666666666666666666667', '0.1666666666666666666666666667')
class CalculationTestCase_4_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.16', '0.16')
class CalculationTestCase_4_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.1538461538461538461538461538', '0.1538461538461538461538461538')
class CalculationTestCase_4_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.1481481481481481481481481481', '0.1481481481481481481481481481')
class CalculationTestCase_4_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.1428571428571428571428571429', '0.1428571428571428571428571429')
class CalculationTestCase_4_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.1379310344827586206896551724', '0.1379310344827586206896551724')
class CalculationTestCase_4_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.1333333333333333333333333333', '0.1333333333333333333333333333')
class CalculationTestCase_4_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.1290322580645161290322580645', '0.1290322580645161290322580645')
class CalculationTestCase_4_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.125', '0.125')
class CalculationTestCase_4_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.1212121212121212121212121212', '0.1212121212121212121212121212')
class CalculationTestCase_4_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.1176470588235294117647058824', '0.1176470588235294117647058824')
class CalculationTestCase_4_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.1142857142857142857142857143', '0.1142857142857142857142857143')
class CalculationTestCase_4_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.1111111111111111111111111111', '0.1111111111111111111111111111')
class CalculationTestCase_4_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.1081081081081081081081081081', '0.1081081081081081081081081081')
class CalculationTestCase_4_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.1052631578947368421052631579', '0.1052631578947368421052631579')
class CalculationTestCase_4_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.1025641025641025641025641026', '0.1025641025641025641025641026')
class CalculationTestCase_4_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.1', '0.1')
class CalculationTestCase_4_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.09756097560975609756097560976', '0.09756097560975609756097560976')
class CalculationTestCase_4_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.09523809523809523809523809524', '0.09523809523809523809523809524')
class CalculationTestCase_4_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.09302325581395348837209302326', '0.09302325581395348837209302326')
class CalculationTestCase_4_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.09090909090909090909090909091', '0.09090909090909090909090909091')
class CalculationTestCase_4_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.08888888888888888888888888889', '0.08888888888888888888888888889')
class CalculationTestCase_4_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.08695652173913043478260869565', '0.08695652173913043478260869565')
class CalculationTestCase_4_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.08510638297872340425531914894', '0.08510638297872340425531914894')
class CalculationTestCase_4_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.08333333333333333333333333333', '0.08333333333333333333333333333')
class CalculationTestCase_4_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.08163265306122448979591836735', '0.08163265306122448979591836735')
class CalculationTestCase_4_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 4 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.08', '0.08')
class CalculationTestCase_5_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_5_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('5', '5')
class CalculationTestCase_5_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('2.5', '2.5')
class CalculationTestCase_5_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('1.666666666666666666666666667', '1.666666666666666666666666667')
class CalculationTestCase_5_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('1.25', '1.25')
class CalculationTestCase_5_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('1', '1')
class CalculationTestCase_5_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('0.8333333333333333333333333333', '0.8333333333333333333333333333')
class CalculationTestCase_5_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('0.7142857142857142857142857143', '0.7142857142857142857142857143')
class CalculationTestCase_5_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('0.625', '0.625')
class CalculationTestCase_5_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('0.5555555555555555555555555556', '0.5555555555555555555555555556')
class CalculationTestCase_5_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_5_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('0.4545454545454545454545454545', '0.4545454545454545454545454545')
class CalculationTestCase_5_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0.4166666666666666666666666667', '0.4166666666666666666666666667')
class CalculationTestCase_5_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.3846153846153846153846153846', '0.3846153846153846153846153846')
class CalculationTestCase_5_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.3571428571428571428571428571', '0.3571428571428571428571428571')
class CalculationTestCase_5_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_5_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.3125', '0.3125')
class CalculationTestCase_5_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.2941176470588235294117647059', '0.2941176470588235294117647059')
class CalculationTestCase_5_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.2777777777777777777777777778', '0.2777777777777777777777777778')
class CalculationTestCase_5_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.2631578947368421052631578947', '0.2631578947368421052631578947')
class CalculationTestCase_5_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_5_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.2380952380952380952380952381', '0.2380952380952380952380952381')
class CalculationTestCase_5_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.2272727272727272727272727273', '0.2272727272727272727272727273')
class CalculationTestCase_5_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.2173913043478260869565217391', '0.2173913043478260869565217391')
class CalculationTestCase_5_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.2083333333333333333333333333', '0.2083333333333333333333333333')
class CalculationTestCase_5_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.2', '0.2')
class CalculationTestCase_5_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.1923076923076923076923076923', '0.1923076923076923076923076923')
class CalculationTestCase_5_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.1851851851851851851851851852', '0.1851851851851851851851851852')
class CalculationTestCase_5_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.1785714285714285714285714286', '0.1785714285714285714285714286')
class CalculationTestCase_5_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.1724137931034482758620689655', '0.1724137931034482758620689655')
class CalculationTestCase_5_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.1666666666666666666666666667', '0.1666666666666666666666666667')
class CalculationTestCase_5_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.1612903225806451612903225806', '0.1612903225806451612903225806')
class CalculationTestCase_5_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.15625', '0.15625')
class CalculationTestCase_5_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.1515151515151515151515151515', '0.1515151515151515151515151515')
class CalculationTestCase_5_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.1470588235294117647058823529', '0.1470588235294117647058823529')
class CalculationTestCase_5_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.1428571428571428571428571429', '0.1428571428571428571428571429')
class CalculationTestCase_5_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.1388888888888888888888888889', '0.1388888888888888888888888889')
class CalculationTestCase_5_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.1351351351351351351351351351', '0.1351351351351351351351351351')
class CalculationTestCase_5_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.1315789473684210526315789474', '0.1315789473684210526315789474')
class CalculationTestCase_5_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.1282051282051282051282051282', '0.1282051282051282051282051282')
class CalculationTestCase_5_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.125', '0.125')
class CalculationTestCase_5_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.1219512195121951219512195122', '0.1219512195121951219512195122')
class CalculationTestCase_5_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.1190476190476190476190476190', '0.1190476190476190476190476190')
class CalculationTestCase_5_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.1162790697674418604651162791', '0.1162790697674418604651162791')
class CalculationTestCase_5_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.1136363636363636363636363636', '0.1136363636363636363636363636')
class CalculationTestCase_5_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.1111111111111111111111111111', '0.1111111111111111111111111111')
class CalculationTestCase_5_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.1086956521739130434782608696', '0.1086956521739130434782608696')
class CalculationTestCase_5_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.1063829787234042553191489362', '0.1063829787234042553191489362')
class CalculationTestCase_5_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.1041666666666666666666666667', '0.1041666666666666666666666667')
class CalculationTestCase_5_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.1020408163265306122448979592', '0.1020408163265306122448979592')
class CalculationTestCase_5_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 5 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.1', '0.1')
class CalculationTestCase_6_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_6_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('6', '6')
class CalculationTestCase_6_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('3', '3')
class CalculationTestCase_6_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('2', '2')
class CalculationTestCase_6_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_6_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('1.2', '1.2')
class CalculationTestCase_6_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('1', '1')
class CalculationTestCase_6_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('0.8571428571428571428571428571', '0.8571428571428571428571428571')
class CalculationTestCase_6_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_6_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_6_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('0.6', '0.6')
class CalculationTestCase_6_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('0.5454545454545454545454545455', '0.5454545454545454545454545455')
class CalculationTestCase_6_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_6_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.4615384615384615384615384615', '0.4615384615384615384615384615')
class CalculationTestCase_6_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.4285714285714285714285714286', '0.4285714285714285714285714286')
class CalculationTestCase_6_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.4', '0.4')
class CalculationTestCase_6_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.375', '0.375')
class CalculationTestCase_6_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.3529411764705882352941176471', '0.3529411764705882352941176471')
class CalculationTestCase_6_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_6_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.3157894736842105263157894737', '0.3157894736842105263157894737')
class CalculationTestCase_6_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.3', '0.3')
class CalculationTestCase_6_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.2857142857142857142857142857', '0.2857142857142857142857142857')
class CalculationTestCase_6_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.2727272727272727272727272727', '0.2727272727272727272727272727')
class CalculationTestCase_6_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.2608695652173913043478260870', '0.2608695652173913043478260870')
class CalculationTestCase_6_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_6_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.24', '0.24')
class CalculationTestCase_6_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.2307692307692307692307692308', '0.2307692307692307692307692308')
class CalculationTestCase_6_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.2222222222222222222222222222', '0.2222222222222222222222222222')
class CalculationTestCase_6_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.2142857142857142857142857143', '0.2142857142857142857142857143')
class CalculationTestCase_6_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.2068965517241379310344827586', '0.2068965517241379310344827586')
class CalculationTestCase_6_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.2', '0.2')
class CalculationTestCase_6_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.1935483870967741935483870968', '0.1935483870967741935483870968')
class CalculationTestCase_6_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.1875', '0.1875')
class CalculationTestCase_6_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.1818181818181818181818181818', '0.1818181818181818181818181818')
class CalculationTestCase_6_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.1764705882352941176470588235', '0.1764705882352941176470588235')
class CalculationTestCase_6_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.1714285714285714285714285714', '0.1714285714285714285714285714')
class CalculationTestCase_6_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.1666666666666666666666666667', '0.1666666666666666666666666667')
class CalculationTestCase_6_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.1621621621621621621621621622', '0.1621621621621621621621621622')
class CalculationTestCase_6_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.1578947368421052631578947368', '0.1578947368421052631578947368')
class CalculationTestCase_6_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.1538461538461538461538461538', '0.1538461538461538461538461538')
class CalculationTestCase_6_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.15', '0.15')
class CalculationTestCase_6_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.1463414634146341463414634146', '0.1463414634146341463414634146')
class CalculationTestCase_6_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.1428571428571428571428571429', '0.1428571428571428571428571429')
class CalculationTestCase_6_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.1395348837209302325581395349', '0.1395348837209302325581395349')
class CalculationTestCase_6_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.1363636363636363636363636364', '0.1363636363636363636363636364')
class CalculationTestCase_6_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.1333333333333333333333333333', '0.1333333333333333333333333333')
class CalculationTestCase_6_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.1304347826086956521739130435', '0.1304347826086956521739130435')
class CalculationTestCase_6_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.1276595744680851063829787234', '0.1276595744680851063829787234')
class CalculationTestCase_6_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.125', '0.125')
class CalculationTestCase_6_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.1224489795918367346938775510', '0.1224489795918367346938775510')
class CalculationTestCase_6_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 6 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.12', '0.12')
class CalculationTestCase_7_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_7_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('7', '7')
class CalculationTestCase_7_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('3.5', '3.5')
class CalculationTestCase_7_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('2.333333333333333333333333333', '2.333333333333333333333333333')
class CalculationTestCase_7_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('1.75', '1.75')
class CalculationTestCase_7_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('1.4', '1.4')
class CalculationTestCase_7_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('1.166666666666666666666666667', '1.166666666666666666666666667')
class CalculationTestCase_7_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('1', '1')
class CalculationTestCase_7_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('0.875', '0.875')
class CalculationTestCase_7_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('0.7777777777777777777777777778', '0.7777777777777777777777777778')
class CalculationTestCase_7_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('0.7', '0.7')
class CalculationTestCase_7_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('0.6363636363636363636363636364', '0.6363636363636363636363636364')
class CalculationTestCase_7_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0.5833333333333333333333333333', '0.5833333333333333333333333333')
class CalculationTestCase_7_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.5384615384615384615384615385', '0.5384615384615384615384615385')
class CalculationTestCase_7_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_7_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.4666666666666666666666666667', '0.4666666666666666666666666667')
class CalculationTestCase_7_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.4375', '0.4375')
class CalculationTestCase_7_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.4117647058823529411764705882', '0.4117647058823529411764705882')
class CalculationTestCase_7_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.3888888888888888888888888889', '0.3888888888888888888888888889')
class CalculationTestCase_7_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.3684210526315789473684210526', '0.3684210526315789473684210526')
class CalculationTestCase_7_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.35', '0.35')
class CalculationTestCase_7_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_7_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.3181818181818181818181818182', '0.3181818181818181818181818182')
class CalculationTestCase_7_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.3043478260869565217391304348', '0.3043478260869565217391304348')
class CalculationTestCase_7_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.2916666666666666666666666667', '0.2916666666666666666666666667')
class CalculationTestCase_7_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.28', '0.28')
class CalculationTestCase_7_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.2692307692307692307692307692', '0.2692307692307692307692307692')
class CalculationTestCase_7_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.2592592592592592592592592593', '0.2592592592592592592592592593')
class CalculationTestCase_7_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_7_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.2413793103448275862068965517', '0.2413793103448275862068965517')
class CalculationTestCase_7_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.2333333333333333333333333333', '0.2333333333333333333333333333')
class CalculationTestCase_7_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.2258064516129032258064516129', '0.2258064516129032258064516129')
class CalculationTestCase_7_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.21875', '0.21875')
class CalculationTestCase_7_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.2121212121212121212121212121', '0.2121212121212121212121212121')
class CalculationTestCase_7_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.2058823529411764705882352941', '0.2058823529411764705882352941')
class CalculationTestCase_7_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.2', '0.2')
class CalculationTestCase_7_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.1944444444444444444444444444', '0.1944444444444444444444444444')
class CalculationTestCase_7_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.1891891891891891891891891892', '0.1891891891891891891891891892')
class CalculationTestCase_7_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.1842105263157894736842105263', '0.1842105263157894736842105263')
class CalculationTestCase_7_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.1794871794871794871794871795', '0.1794871794871794871794871795')
class CalculationTestCase_7_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.175', '0.175')
class CalculationTestCase_7_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.1707317073170731707317073171', '0.1707317073170731707317073171')
class CalculationTestCase_7_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.1666666666666666666666666667', '0.1666666666666666666666666667')
class CalculationTestCase_7_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.1627906976744186046511627907', '0.1627906976744186046511627907')
class CalculationTestCase_7_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.1590909090909090909090909091', '0.1590909090909090909090909091')
class CalculationTestCase_7_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.1555555555555555555555555556', '0.1555555555555555555555555556')
class CalculationTestCase_7_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.1521739130434782608695652174', '0.1521739130434782608695652174')
class CalculationTestCase_7_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.1489361702127659574468085106', '0.1489361702127659574468085106')
class CalculationTestCase_7_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.1458333333333333333333333333', '0.1458333333333333333333333333')
class CalculationTestCase_7_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.1428571428571428571428571429', '0.1428571428571428571428571429')
class CalculationTestCase_7_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 7 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.14', '0.14')
class CalculationTestCase_8_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_8_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('8', '8')
class CalculationTestCase_8_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('4', '4')
class CalculationTestCase_8_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('2.666666666666666666666666667', '2.666666666666666666666666667')
class CalculationTestCase_8_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('2', '2')
class CalculationTestCase_8_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('1.6', '1.6')
class CalculationTestCase_8_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_8_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('1.142857142857142857142857143', '1.142857142857142857142857143')
class CalculationTestCase_8_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('1', '1')
class CalculationTestCase_8_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('0.8888888888888888888888888889', '0.8888888888888888888888888889')
class CalculationTestCase_8_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('0.8', '0.8')
class CalculationTestCase_8_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('0.7272727272727272727272727273', '0.7272727272727272727272727273')
class CalculationTestCase_8_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_8_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.6153846153846153846153846154', '0.6153846153846153846153846154')
class CalculationTestCase_8_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.5714285714285714285714285714', '0.5714285714285714285714285714')
class CalculationTestCase_8_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.5333333333333333333333333333', '0.5333333333333333333333333333')
class CalculationTestCase_8_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_8_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.4705882352941176470588235294', '0.4705882352941176470588235294')
class CalculationTestCase_8_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.4444444444444444444444444444', '0.4444444444444444444444444444')
class CalculationTestCase_8_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.4210526315789473684210526316', '0.4210526315789473684210526316')
class CalculationTestCase_8_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.4', '0.4')
class CalculationTestCase_8_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.3809523809523809523809523810', '0.3809523809523809523809523810')
class CalculationTestCase_8_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.3636363636363636363636363636', '0.3636363636363636363636363636')
class CalculationTestCase_8_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.3478260869565217391304347826', '0.3478260869565217391304347826')
class CalculationTestCase_8_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_8_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.32', '0.32')
class CalculationTestCase_8_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.3076923076923076923076923077', '0.3076923076923076923076923077')
class CalculationTestCase_8_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.2962962962962962962962962963', '0.2962962962962962962962962963')
class CalculationTestCase_8_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.2857142857142857142857142857', '0.2857142857142857142857142857')
class CalculationTestCase_8_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.2758620689655172413793103448', '0.2758620689655172413793103448')
class CalculationTestCase_8_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.2666666666666666666666666667', '0.2666666666666666666666666667')
class CalculationTestCase_8_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.2580645161290322580645161290', '0.2580645161290322580645161290')
class CalculationTestCase_8_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_8_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.2424242424242424242424242424', '0.2424242424242424242424242424')
class CalculationTestCase_8_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.2352941176470588235294117647', '0.2352941176470588235294117647')
class CalculationTestCase_8_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.2285714285714285714285714286', '0.2285714285714285714285714286')
class CalculationTestCase_8_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.2222222222222222222222222222', '0.2222222222222222222222222222')
class CalculationTestCase_8_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.2162162162162162162162162162', '0.2162162162162162162162162162')
class CalculationTestCase_8_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.2105263157894736842105263158', '0.2105263157894736842105263158')
class CalculationTestCase_8_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.2051282051282051282051282051', '0.2051282051282051282051282051')
class CalculationTestCase_8_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.2', '0.2')
class CalculationTestCase_8_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.1951219512195121951219512195', '0.1951219512195121951219512195')
class CalculationTestCase_8_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.1904761904761904761904761905', '0.1904761904761904761904761905')
class CalculationTestCase_8_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.1860465116279069767441860465', '0.1860465116279069767441860465')
class CalculationTestCase_8_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.1818181818181818181818181818', '0.1818181818181818181818181818')
class CalculationTestCase_8_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.1777777777777777777777777778', '0.1777777777777777777777777778')
class CalculationTestCase_8_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.1739130434782608695652173913', '0.1739130434782608695652173913')
class CalculationTestCase_8_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.1702127659574468085106382979', '0.1702127659574468085106382979')
class CalculationTestCase_8_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.1666666666666666666666666667', '0.1666666666666666666666666667')
class CalculationTestCase_8_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.1632653061224489795918367347', '0.1632653061224489795918367347')
class CalculationTestCase_8_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 8 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.16', '0.16')
class CalculationTestCase_9_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_9_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('9', '9')
class CalculationTestCase_9_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('4.5', '4.5')
class CalculationTestCase_9_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('3', '3')
class CalculationTestCase_9_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('2.25', '2.25')
class CalculationTestCase_9_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('1.8', '1.8')
class CalculationTestCase_9_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_9_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('1.285714285714285714285714286', '1.285714285714285714285714286')
class CalculationTestCase_9_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('1.125', '1.125')
class CalculationTestCase_9_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('1', '1')
class CalculationTestCase_9_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('0.9', '0.9')
class CalculationTestCase_9_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('0.8181818181818181818181818182', '0.8181818181818181818181818182')
class CalculationTestCase_9_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_9_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.6923076923076923076923076923', '0.6923076923076923076923076923')
class CalculationTestCase_9_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.6428571428571428571428571429', '0.6428571428571428571428571429')
class CalculationTestCase_9_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.6', '0.6')
class CalculationTestCase_9_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.5625', '0.5625')
class CalculationTestCase_9_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.5294117647058823529411764706', '0.5294117647058823529411764706')
class CalculationTestCase_9_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_9_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.4736842105263157894736842105', '0.4736842105263157894736842105')
class CalculationTestCase_9_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.45', '0.45')
class CalculationTestCase_9_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.4285714285714285714285714286', '0.4285714285714285714285714286')
class CalculationTestCase_9_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.4090909090909090909090909091', '0.4090909090909090909090909091')
class CalculationTestCase_9_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.3913043478260869565217391304', '0.3913043478260869565217391304')
class CalculationTestCase_9_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.375', '0.375')
class CalculationTestCase_9_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.36', '0.36')
class CalculationTestCase_9_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.3461538461538461538461538462', '0.3461538461538461538461538462')
class CalculationTestCase_9_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_9_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.3214285714285714285714285714', '0.3214285714285714285714285714')
class CalculationTestCase_9_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.3103448275862068965517241379', '0.3103448275862068965517241379')
class CalculationTestCase_9_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.3', '0.3')
class CalculationTestCase_9_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.2903225806451612903225806452', '0.2903225806451612903225806452')
class CalculationTestCase_9_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.28125', '0.28125')
class CalculationTestCase_9_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.2727272727272727272727272727', '0.2727272727272727272727272727')
class CalculationTestCase_9_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.2647058823529411764705882353', '0.2647058823529411764705882353')
class CalculationTestCase_9_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.2571428571428571428571428571', '0.2571428571428571428571428571')
class CalculationTestCase_9_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_9_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.2432432432432432432432432432', '0.2432432432432432432432432432')
class CalculationTestCase_9_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.2368421052631578947368421053', '0.2368421052631578947368421053')
class CalculationTestCase_9_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.2307692307692307692307692308', '0.2307692307692307692307692308')
class CalculationTestCase_9_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.225', '0.225')
class CalculationTestCase_9_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.2195121951219512195121951220', '0.2195121951219512195121951220')
class CalculationTestCase_9_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.2142857142857142857142857143', '0.2142857142857142857142857143')
class CalculationTestCase_9_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.2093023255813953488372093023', '0.2093023255813953488372093023')
class CalculationTestCase_9_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.2045454545454545454545454545', '0.2045454545454545454545454545')
class CalculationTestCase_9_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.2', '0.2')
class CalculationTestCase_9_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.1956521739130434782608695652', '0.1956521739130434782608695652')
class CalculationTestCase_9_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.1914893617021276595744680851', '0.1914893617021276595744680851')
class CalculationTestCase_9_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.1875', '0.1875')
class CalculationTestCase_9_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.1836734693877551020408163265', '0.1836734693877551020408163265')
class CalculationTestCase_9_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 9 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.18', '0.18')
class CalculationTestCase_10_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_10_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('10', '10')
class CalculationTestCase_10_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('5', '5')
class CalculationTestCase_10_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('3.333333333333333333333333333', '3.333333333333333333333333333')
class CalculationTestCase_10_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('2.5', '2.5')
class CalculationTestCase_10_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('2', '2')
class CalculationTestCase_10_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('1.666666666666666666666666667', '1.666666666666666666666666667')
class CalculationTestCase_10_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('1.428571428571428571428571429', '1.428571428571428571428571429')
class CalculationTestCase_10_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('1.25', '1.25')
class CalculationTestCase_10_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('1.111111111111111111111111111', '1.111111111111111111111111111')
class CalculationTestCase_10_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('1', '1')
class CalculationTestCase_10_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('0.9090909090909090909090909091', '0.9090909090909090909090909091')
class CalculationTestCase_10_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0.8333333333333333333333333333', '0.8333333333333333333333333333')
class CalculationTestCase_10_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.7692307692307692307692307692', '0.7692307692307692307692307692')
class CalculationTestCase_10_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.7142857142857142857142857143', '0.7142857142857142857142857143')
class CalculationTestCase_10_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_10_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.625', '0.625')
class CalculationTestCase_10_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.5882352941176470588235294118', '0.5882352941176470588235294118')
class CalculationTestCase_10_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.5555555555555555555555555556', '0.5555555555555555555555555556')
class CalculationTestCase_10_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.5263157894736842105263157895', '0.5263157894736842105263157895')
class CalculationTestCase_10_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_10_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.4761904761904761904761904762', '0.4761904761904761904761904762')
class CalculationTestCase_10_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.4545454545454545454545454545', '0.4545454545454545454545454545')
class CalculationTestCase_10_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.4347826086956521739130434783', '0.4347826086956521739130434783')
class CalculationTestCase_10_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.4166666666666666666666666667', '0.4166666666666666666666666667')
class CalculationTestCase_10_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.4', '0.4')
class CalculationTestCase_10_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.3846153846153846153846153846', '0.3846153846153846153846153846')
class CalculationTestCase_10_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.3703703703703703703703703704', '0.3703703703703703703703703704')
class CalculationTestCase_10_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.3571428571428571428571428571', '0.3571428571428571428571428571')
class CalculationTestCase_10_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.3448275862068965517241379310', '0.3448275862068965517241379310')
class CalculationTestCase_10_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_10_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.3225806451612903225806451613', '0.3225806451612903225806451613')
class CalculationTestCase_10_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.3125', '0.3125')
class CalculationTestCase_10_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.3030303030303030303030303030', '0.3030303030303030303030303030')
class CalculationTestCase_10_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.2941176470588235294117647059', '0.2941176470588235294117647059')
class CalculationTestCase_10_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.2857142857142857142857142857', '0.2857142857142857142857142857')
class CalculationTestCase_10_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.2777777777777777777777777778', '0.2777777777777777777777777778')
class CalculationTestCase_10_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.2702702702702702702702702703', '0.2702702702702702702702702703')
class CalculationTestCase_10_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.2631578947368421052631578947', '0.2631578947368421052631578947')
class CalculationTestCase_10_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.2564102564102564102564102564', '0.2564102564102564102564102564')
class CalculationTestCase_10_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_10_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.2439024390243902439024390244', '0.2439024390243902439024390244')
class CalculationTestCase_10_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.2380952380952380952380952381', '0.2380952380952380952380952381')
class CalculationTestCase_10_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.2325581395348837209302325581', '0.2325581395348837209302325581')
class CalculationTestCase_10_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.2272727272727272727272727273', '0.2272727272727272727272727273')
class CalculationTestCase_10_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.2222222222222222222222222222', '0.2222222222222222222222222222')
class CalculationTestCase_10_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.2173913043478260869565217391', '0.2173913043478260869565217391')
class CalculationTestCase_10_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.2127659574468085106382978723', '0.2127659574468085106382978723')
class CalculationTestCase_10_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.2083333333333333333333333333', '0.2083333333333333333333333333')
class CalculationTestCase_10_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.2040816326530612244897959184', '0.2040816326530612244897959184')
class CalculationTestCase_10_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 10 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.2', '0.2')
class CalculationTestCase_11_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_11_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('11', '11')
class CalculationTestCase_11_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('5.5', '5.5')
class CalculationTestCase_11_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('3.666666666666666666666666667', '3.666666666666666666666666667')
class CalculationTestCase_11_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('2.75', '2.75')
class CalculationTestCase_11_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('2.2', '2.2')
class CalculationTestCase_11_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('1.833333333333333333333333333', '1.833333333333333333333333333')
class CalculationTestCase_11_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('1.571428571428571428571428571', '1.571428571428571428571428571')
class CalculationTestCase_11_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('1.375', '1.375')
class CalculationTestCase_11_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('1.222222222222222222222222222', '1.222222222222222222222222222')
class CalculationTestCase_11_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('1.1', '1.1')
class CalculationTestCase_11_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('1', '1')
class CalculationTestCase_11_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('0.9166666666666666666666666667', '0.9166666666666666666666666667')
class CalculationTestCase_11_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.8461538461538461538461538462', '0.8461538461538461538461538462')
class CalculationTestCase_11_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.7857142857142857142857142857', '0.7857142857142857142857142857')
class CalculationTestCase_11_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.7333333333333333333333333333', '0.7333333333333333333333333333')
class CalculationTestCase_11_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.6875', '0.6875')
class CalculationTestCase_11_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.6470588235294117647058823529', '0.6470588235294117647058823529')
class CalculationTestCase_11_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.6111111111111111111111111111', '0.6111111111111111111111111111')
class CalculationTestCase_11_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.5789473684210526315789473684', '0.5789473684210526315789473684')
class CalculationTestCase_11_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.55', '0.55')
class CalculationTestCase_11_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.5238095238095238095238095238', '0.5238095238095238095238095238')
class CalculationTestCase_11_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_11_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.4782608695652173913043478261', '0.4782608695652173913043478261')
class CalculationTestCase_11_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.4583333333333333333333333333', '0.4583333333333333333333333333')
class CalculationTestCase_11_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.44', '0.44')
class CalculationTestCase_11_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.4230769230769230769230769231', '0.4230769230769230769230769231')
class CalculationTestCase_11_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.4074074074074074074074074074', '0.4074074074074074074074074074')
class CalculationTestCase_11_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.3928571428571428571428571429', '0.3928571428571428571428571429')
class CalculationTestCase_11_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.3793103448275862068965517241', '0.3793103448275862068965517241')
class CalculationTestCase_11_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.3666666666666666666666666667', '0.3666666666666666666666666667')
class CalculationTestCase_11_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.3548387096774193548387096774', '0.3548387096774193548387096774')
class CalculationTestCase_11_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.34375', '0.34375')
class CalculationTestCase_11_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_11_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.3235294117647058823529411765', '0.3235294117647058823529411765')
class CalculationTestCase_11_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.3142857142857142857142857143', '0.3142857142857142857142857143')
class CalculationTestCase_11_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.3055555555555555555555555556', '0.3055555555555555555555555556')
class CalculationTestCase_11_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.2972972972972972972972972973', '0.2972972972972972972972972973')
class CalculationTestCase_11_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.2894736842105263157894736842', '0.2894736842105263157894736842')
class CalculationTestCase_11_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.2820512820512820512820512821', '0.2820512820512820512820512821')
class CalculationTestCase_11_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.275', '0.275')
class CalculationTestCase_11_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.2682926829268292682926829268', '0.2682926829268292682926829268')
class CalculationTestCase_11_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.2619047619047619047619047619', '0.2619047619047619047619047619')
class CalculationTestCase_11_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.2558139534883720930232558140', '0.2558139534883720930232558140')
class CalculationTestCase_11_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_11_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.2444444444444444444444444444', '0.2444444444444444444444444444')
class CalculationTestCase_11_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.2391304347826086956521739130', '0.2391304347826086956521739130')
class CalculationTestCase_11_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.2340425531914893617021276596', '0.2340425531914893617021276596')
class CalculationTestCase_11_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.2291666666666666666666666667', '0.2291666666666666666666666667')
class CalculationTestCase_11_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.2244897959183673469387755102', '0.2244897959183673469387755102')
class CalculationTestCase_11_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 11 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.22', '0.22')
class CalculationTestCase_12_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_12_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('12', '12')
class CalculationTestCase_12_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('6', '6')
class CalculationTestCase_12_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('4', '4')
class CalculationTestCase_12_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('3', '3')
class CalculationTestCase_12_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('2.4', '2.4')
class CalculationTestCase_12_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('2', '2')
class CalculationTestCase_12_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('1.714285714285714285714285714', '1.714285714285714285714285714')
class CalculationTestCase_12_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_12_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_12_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('1.2', '1.2')
class CalculationTestCase_12_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('1.090909090909090909090909091', '1.090909090909090909090909091')
class CalculationTestCase_12_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1', '1')
class CalculationTestCase_12_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('0.9230769230769230769230769231', '0.9230769230769230769230769231')
class CalculationTestCase_12_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.8571428571428571428571428571', '0.8571428571428571428571428571')
class CalculationTestCase_12_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.8', '0.8')
class CalculationTestCase_12_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_12_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.7058823529411764705882352941', '0.7058823529411764705882352941')
class CalculationTestCase_12_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_12_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.6315789473684210526315789474', '0.6315789473684210526315789474')
class CalculationTestCase_12_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.6', '0.6')
class CalculationTestCase_12_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.5714285714285714285714285714', '0.5714285714285714285714285714')
class CalculationTestCase_12_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.5454545454545454545454545455', '0.5454545454545454545454545455')
class CalculationTestCase_12_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.5217391304347826086956521739', '0.5217391304347826086956521739')
class CalculationTestCase_12_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_12_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.48', '0.48')
class CalculationTestCase_12_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.4615384615384615384615384615', '0.4615384615384615384615384615')
class CalculationTestCase_12_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.4444444444444444444444444444', '0.4444444444444444444444444444')
class CalculationTestCase_12_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.4285714285714285714285714286', '0.4285714285714285714285714286')
class CalculationTestCase_12_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.4137931034482758620689655172', '0.4137931034482758620689655172')
class CalculationTestCase_12_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.4', '0.4')
class CalculationTestCase_12_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.3870967741935483870967741935', '0.3870967741935483870967741935')
class CalculationTestCase_12_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.375', '0.375')
class CalculationTestCase_12_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.3636363636363636363636363636', '0.3636363636363636363636363636')
class CalculationTestCase_12_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.3529411764705882352941176471', '0.3529411764705882352941176471')
class CalculationTestCase_12_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.3428571428571428571428571429', '0.3428571428571428571428571429')
class CalculationTestCase_12_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_12_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.3243243243243243243243243243', '0.3243243243243243243243243243')
class CalculationTestCase_12_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.3157894736842105263157894737', '0.3157894736842105263157894737')
class CalculationTestCase_12_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.3076923076923076923076923077', '0.3076923076923076923076923077')
class CalculationTestCase_12_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.3', '0.3')
class CalculationTestCase_12_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.2926829268292682926829268293', '0.2926829268292682926829268293')
class CalculationTestCase_12_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.2857142857142857142857142857', '0.2857142857142857142857142857')
class CalculationTestCase_12_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.2790697674418604651162790698', '0.2790697674418604651162790698')
class CalculationTestCase_12_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.2727272727272727272727272727', '0.2727272727272727272727272727')
class CalculationTestCase_12_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.2666666666666666666666666667', '0.2666666666666666666666666667')
class CalculationTestCase_12_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.2608695652173913043478260870', '0.2608695652173913043478260870')
class CalculationTestCase_12_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.2553191489361702127659574468', '0.2553191489361702127659574468')
class CalculationTestCase_12_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.25', '0.25')
class CalculationTestCase_12_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.2448979591836734693877551020', '0.2448979591836734693877551020')
class CalculationTestCase_12_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 12 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.24', '0.24')
class CalculationTestCase_13_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_13_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('13', '13')
class CalculationTestCase_13_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('6.5', '6.5')
class CalculationTestCase_13_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('4.333333333333333333333333333', '4.333333333333333333333333333')
class CalculationTestCase_13_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('3.25', '3.25')
class CalculationTestCase_13_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('2.6', '2.6')
class CalculationTestCase_13_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('2.166666666666666666666666667', '2.166666666666666666666666667')
class CalculationTestCase_13_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('1.857142857142857142857142857', '1.857142857142857142857142857')
class CalculationTestCase_13_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('1.625', '1.625')
class CalculationTestCase_13_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('1.444444444444444444444444444', '1.444444444444444444444444444')
class CalculationTestCase_13_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('1.3', '1.3')
class CalculationTestCase_13_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('1.181818181818181818181818182', '1.181818181818181818181818182')
class CalculationTestCase_13_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1.083333333333333333333333333', '1.083333333333333333333333333')
class CalculationTestCase_13_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1', '1')
class CalculationTestCase_13_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('0.9285714285714285714285714286', '0.9285714285714285714285714286')
class CalculationTestCase_13_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.8666666666666666666666666667', '0.8666666666666666666666666667')
class CalculationTestCase_13_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.8125', '0.8125')
class CalculationTestCase_13_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.7647058823529411764705882353', '0.7647058823529411764705882353')
class CalculationTestCase_13_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.7222222222222222222222222222', '0.7222222222222222222222222222')
class CalculationTestCase_13_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.6842105263157894736842105263', '0.6842105263157894736842105263')
class CalculationTestCase_13_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.65', '0.65')
class CalculationTestCase_13_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.6190476190476190476190476190', '0.6190476190476190476190476190')
class CalculationTestCase_13_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.5909090909090909090909090909', '0.5909090909090909090909090909')
class CalculationTestCase_13_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.5652173913043478260869565217', '0.5652173913043478260869565217')
class CalculationTestCase_13_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.5416666666666666666666666667', '0.5416666666666666666666666667')
class CalculationTestCase_13_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.52', '0.52')
class CalculationTestCase_13_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_13_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.4814814814814814814814814815', '0.4814814814814814814814814815')
class CalculationTestCase_13_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.4642857142857142857142857143', '0.4642857142857142857142857143')
class CalculationTestCase_13_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.4482758620689655172413793103', '0.4482758620689655172413793103')
class CalculationTestCase_13_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.4333333333333333333333333333', '0.4333333333333333333333333333')
class CalculationTestCase_13_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.4193548387096774193548387097', '0.4193548387096774193548387097')
class CalculationTestCase_13_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.40625', '0.40625')
class CalculationTestCase_13_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.3939393939393939393939393939', '0.3939393939393939393939393939')
class CalculationTestCase_13_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.3823529411764705882352941176', '0.3823529411764705882352941176')
class CalculationTestCase_13_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.3714285714285714285714285714', '0.3714285714285714285714285714')
class CalculationTestCase_13_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.3611111111111111111111111111', '0.3611111111111111111111111111')
class CalculationTestCase_13_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.3513513513513513513513513514', '0.3513513513513513513513513514')
class CalculationTestCase_13_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.3421052631578947368421052632', '0.3421052631578947368421052632')
class CalculationTestCase_13_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_13_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.325', '0.325')
class CalculationTestCase_13_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.3170731707317073170731707317', '0.3170731707317073170731707317')
class CalculationTestCase_13_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.3095238095238095238095238095', '0.3095238095238095238095238095')
class CalculationTestCase_13_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.3023255813953488372093023256', '0.3023255813953488372093023256')
class CalculationTestCase_13_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.2954545454545454545454545455', '0.2954545454545454545454545455')
class CalculationTestCase_13_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.2888888888888888888888888889', '0.2888888888888888888888888889')
class CalculationTestCase_13_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.2826086956521739130434782609', '0.2826086956521739130434782609')
class CalculationTestCase_13_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.2765957446808510638297872340', '0.2765957446808510638297872340')
class CalculationTestCase_13_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.2708333333333333333333333333', '0.2708333333333333333333333333')
class CalculationTestCase_13_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.2653061224489795918367346939', '0.2653061224489795918367346939')
class CalculationTestCase_13_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 13 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.26', '0.26')
class CalculationTestCase_14_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_14_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('14', '14')
class CalculationTestCase_14_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('7', '7')
class CalculationTestCase_14_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('4.666666666666666666666666667', '4.666666666666666666666666667')
class CalculationTestCase_14_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('3.5', '3.5')
class CalculationTestCase_14_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('2.8', '2.8')
class CalculationTestCase_14_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('2.333333333333333333333333333', '2.333333333333333333333333333')
class CalculationTestCase_14_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('2', '2')
class CalculationTestCase_14_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('1.75', '1.75')
class CalculationTestCase_14_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('1.555555555555555555555555556', '1.555555555555555555555555556')
class CalculationTestCase_14_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('1.4', '1.4')
class CalculationTestCase_14_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('1.272727272727272727272727273', '1.272727272727272727272727273')
class CalculationTestCase_14_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1.166666666666666666666666667', '1.166666666666666666666666667')
class CalculationTestCase_14_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.076923076923076923076923077', '1.076923076923076923076923077')
class CalculationTestCase_14_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1', '1')
class CalculationTestCase_14_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('0.9333333333333333333333333333', '0.9333333333333333333333333333')
class CalculationTestCase_14_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.875', '0.875')
class CalculationTestCase_14_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.8235294117647058823529411765', '0.8235294117647058823529411765')
class CalculationTestCase_14_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.7777777777777777777777777778', '0.7777777777777777777777777778')
class CalculationTestCase_14_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.7368421052631578947368421053', '0.7368421052631578947368421053')
class CalculationTestCase_14_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.7', '0.7')
class CalculationTestCase_14_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_14_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.6363636363636363636363636364', '0.6363636363636363636363636364')
class CalculationTestCase_14_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.6086956521739130434782608696', '0.6086956521739130434782608696')
class CalculationTestCase_14_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.5833333333333333333333333333', '0.5833333333333333333333333333')
class CalculationTestCase_14_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.56', '0.56')
class CalculationTestCase_14_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.5384615384615384615384615385', '0.5384615384615384615384615385')
class CalculationTestCase_14_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.5185185185185185185185185185', '0.5185185185185185185185185185')
class CalculationTestCase_14_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_14_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.4827586206896551724137931034', '0.4827586206896551724137931034')
class CalculationTestCase_14_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.4666666666666666666666666667', '0.4666666666666666666666666667')
class CalculationTestCase_14_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.4516129032258064516129032258', '0.4516129032258064516129032258')
class CalculationTestCase_14_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.4375', '0.4375')
class CalculationTestCase_14_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.4242424242424242424242424242', '0.4242424242424242424242424242')
class CalculationTestCase_14_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.4117647058823529411764705882', '0.4117647058823529411764705882')
class CalculationTestCase_14_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.4', '0.4')
class CalculationTestCase_14_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.3888888888888888888888888889', '0.3888888888888888888888888889')
class CalculationTestCase_14_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.3783783783783783783783783784', '0.3783783783783783783783783784')
class CalculationTestCase_14_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.3684210526315789473684210526', '0.3684210526315789473684210526')
class CalculationTestCase_14_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.3589743589743589743589743590', '0.3589743589743589743589743590')
class CalculationTestCase_14_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.35', '0.35')
class CalculationTestCase_14_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.3414634146341463414634146341', '0.3414634146341463414634146341')
class CalculationTestCase_14_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_14_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.3255813953488372093023255814', '0.3255813953488372093023255814')
class CalculationTestCase_14_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.3181818181818181818181818182', '0.3181818181818181818181818182')
class CalculationTestCase_14_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.3111111111111111111111111111', '0.3111111111111111111111111111')
class CalculationTestCase_14_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.3043478260869565217391304348', '0.3043478260869565217391304348')
class CalculationTestCase_14_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.2978723404255319148936170213', '0.2978723404255319148936170213')
class CalculationTestCase_14_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.2916666666666666666666666667', '0.2916666666666666666666666667')
class CalculationTestCase_14_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.2857142857142857142857142857', '0.2857142857142857142857142857')
class CalculationTestCase_14_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 14 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.28', '0.28')
class CalculationTestCase_15_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_15_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('15', '15')
class CalculationTestCase_15_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('7.5', '7.5')
class CalculationTestCase_15_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('5', '5')
class CalculationTestCase_15_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('3.75', '3.75')
class CalculationTestCase_15_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('3', '3')
class CalculationTestCase_15_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('2.5', '2.5')
class CalculationTestCase_15_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('2.142857142857142857142857143', '2.142857142857142857142857143')
class CalculationTestCase_15_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('1.875', '1.875')
class CalculationTestCase_15_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('1.666666666666666666666666667', '1.666666666666666666666666667')
class CalculationTestCase_15_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_15_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('1.363636363636363636363636364', '1.363636363636363636363636364')
class CalculationTestCase_15_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1.25', '1.25')
class CalculationTestCase_15_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.153846153846153846153846154', '1.153846153846153846153846154')
class CalculationTestCase_15_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.071428571428571428571428571', '1.071428571428571428571428571')
class CalculationTestCase_15_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1', '1')
class CalculationTestCase_15_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('0.9375', '0.9375')
class CalculationTestCase_15_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.8823529411764705882352941176', '0.8823529411764705882352941176')
class CalculationTestCase_15_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.8333333333333333333333333333', '0.8333333333333333333333333333')
class CalculationTestCase_15_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.7894736842105263157894736842', '0.7894736842105263157894736842')
class CalculationTestCase_15_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_15_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.7142857142857142857142857143', '0.7142857142857142857142857143')
class CalculationTestCase_15_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.6818181818181818181818181818', '0.6818181818181818181818181818')
class CalculationTestCase_15_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.6521739130434782608695652174', '0.6521739130434782608695652174')
class CalculationTestCase_15_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.625', '0.625')
class CalculationTestCase_15_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.6', '0.6')
class CalculationTestCase_15_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.5769230769230769230769230769', '0.5769230769230769230769230769')
class CalculationTestCase_15_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.5555555555555555555555555556', '0.5555555555555555555555555556')
class CalculationTestCase_15_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.5357142857142857142857142857', '0.5357142857142857142857142857')
class CalculationTestCase_15_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.5172413793103448275862068966', '0.5172413793103448275862068966')
class CalculationTestCase_15_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_15_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.4838709677419354838709677419', '0.4838709677419354838709677419')
class CalculationTestCase_15_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.46875', '0.46875')
class CalculationTestCase_15_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.4545454545454545454545454545', '0.4545454545454545454545454545')
class CalculationTestCase_15_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.4411764705882352941176470588', '0.4411764705882352941176470588')
class CalculationTestCase_15_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.4285714285714285714285714286', '0.4285714285714285714285714286')
class CalculationTestCase_15_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.4166666666666666666666666667', '0.4166666666666666666666666667')
class CalculationTestCase_15_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.4054054054054054054054054054', '0.4054054054054054054054054054')
class CalculationTestCase_15_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.3947368421052631578947368421', '0.3947368421052631578947368421')
class CalculationTestCase_15_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.3846153846153846153846153846', '0.3846153846153846153846153846')
class CalculationTestCase_15_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.375', '0.375')
class CalculationTestCase_15_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.3658536585365853658536585366', '0.3658536585365853658536585366')
class CalculationTestCase_15_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.3571428571428571428571428571', '0.3571428571428571428571428571')
class CalculationTestCase_15_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.3488372093023255813953488372', '0.3488372093023255813953488372')
class CalculationTestCase_15_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.3409090909090909090909090909', '0.3409090909090909090909090909')
class CalculationTestCase_15_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_15_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.3260869565217391304347826087', '0.3260869565217391304347826087')
class CalculationTestCase_15_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.3191489361702127659574468085', '0.3191489361702127659574468085')
class CalculationTestCase_15_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.3125', '0.3125')
class CalculationTestCase_15_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.3061224489795918367346938776', '0.3061224489795918367346938776')
class CalculationTestCase_15_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 15 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.3', '0.3')
class CalculationTestCase_16_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_16_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('16', '16')
class CalculationTestCase_16_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('8', '8')
class CalculationTestCase_16_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('5.333333333333333333333333333', '5.333333333333333333333333333')
class CalculationTestCase_16_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('4', '4')
class CalculationTestCase_16_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('3.2', '3.2')
class CalculationTestCase_16_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('2.666666666666666666666666667', '2.666666666666666666666666667')
class CalculationTestCase_16_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('2.285714285714285714285714286', '2.285714285714285714285714286')
class CalculationTestCase_16_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('2', '2')
class CalculationTestCase_16_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('1.777777777777777777777777778', '1.777777777777777777777777778')
class CalculationTestCase_16_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('1.6', '1.6')
class CalculationTestCase_16_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('1.454545454545454545454545455', '1.454545454545454545454545455')
class CalculationTestCase_16_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_16_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.230769230769230769230769231', '1.230769230769230769230769231')
class CalculationTestCase_16_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.142857142857142857142857143', '1.142857142857142857142857143')
class CalculationTestCase_16_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.066666666666666666666666667', '1.066666666666666666666666667')
class CalculationTestCase_16_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1', '1')
class CalculationTestCase_16_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('0.9411764705882352941176470588', '0.9411764705882352941176470588')
class CalculationTestCase_16_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.8888888888888888888888888889', '0.8888888888888888888888888889')
class CalculationTestCase_16_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.8421052631578947368421052632', '0.8421052631578947368421052632')
class CalculationTestCase_16_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.8', '0.8')
class CalculationTestCase_16_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.7619047619047619047619047619', '0.7619047619047619047619047619')
class CalculationTestCase_16_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.7272727272727272727272727273', '0.7272727272727272727272727273')
class CalculationTestCase_16_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.6956521739130434782608695652', '0.6956521739130434782608695652')
class CalculationTestCase_16_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_16_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.64', '0.64')
class CalculationTestCase_16_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.6153846153846153846153846154', '0.6153846153846153846153846154')
class CalculationTestCase_16_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.5925925925925925925925925926', '0.5925925925925925925925925926')
class CalculationTestCase_16_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.5714285714285714285714285714', '0.5714285714285714285714285714')
class CalculationTestCase_16_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.5517241379310344827586206897', '0.5517241379310344827586206897')
class CalculationTestCase_16_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.5333333333333333333333333333', '0.5333333333333333333333333333')
class CalculationTestCase_16_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.5161290322580645161290322581', '0.5161290322580645161290322581')
class CalculationTestCase_16_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_16_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.4848484848484848484848484848', '0.4848484848484848484848484848')
class CalculationTestCase_16_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.4705882352941176470588235294', '0.4705882352941176470588235294')
class CalculationTestCase_16_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.4571428571428571428571428571', '0.4571428571428571428571428571')
class CalculationTestCase_16_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.4444444444444444444444444444', '0.4444444444444444444444444444')
class CalculationTestCase_16_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.4324324324324324324324324324', '0.4324324324324324324324324324')
class CalculationTestCase_16_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.4210526315789473684210526316', '0.4210526315789473684210526316')
class CalculationTestCase_16_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.4102564102564102564102564103', '0.4102564102564102564102564103')
class CalculationTestCase_16_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.4', '0.4')
class CalculationTestCase_16_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.3902439024390243902439024390', '0.3902439024390243902439024390')
class CalculationTestCase_16_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.3809523809523809523809523810', '0.3809523809523809523809523810')
class CalculationTestCase_16_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.3720930232558139534883720930', '0.3720930232558139534883720930')
class CalculationTestCase_16_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.3636363636363636363636363636', '0.3636363636363636363636363636')
class CalculationTestCase_16_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.3555555555555555555555555556', '0.3555555555555555555555555556')
class CalculationTestCase_16_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.3478260869565217391304347826', '0.3478260869565217391304347826')
class CalculationTestCase_16_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.3404255319148936170212765957', '0.3404255319148936170212765957')
class CalculationTestCase_16_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.3333333333333333333333333333', '0.3333333333333333333333333333')
class CalculationTestCase_16_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.3265306122448979591836734694', '0.3265306122448979591836734694')
class CalculationTestCase_16_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 16 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.32', '0.32')
class CalculationTestCase_17_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_17_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('17', '17')
class CalculationTestCase_17_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('8.5', '8.5')
class CalculationTestCase_17_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('5.666666666666666666666666667', '5.666666666666666666666666667')
class CalculationTestCase_17_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('4.25', '4.25')
class CalculationTestCase_17_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('3.4', '3.4')
class CalculationTestCase_17_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('2.833333333333333333333333333', '2.833333333333333333333333333')
class CalculationTestCase_17_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('2.428571428571428571428571429', '2.428571428571428571428571429')
class CalculationTestCase_17_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('2.125', '2.125')
class CalculationTestCase_17_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('1.888888888888888888888888889', '1.888888888888888888888888889')
class CalculationTestCase_17_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('1.7', '1.7')
class CalculationTestCase_17_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('1.545454545454545454545454545', '1.545454545454545454545454545')
class CalculationTestCase_17_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1.416666666666666666666666667', '1.416666666666666666666666667')
class CalculationTestCase_17_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.307692307692307692307692308', '1.307692307692307692307692308')
class CalculationTestCase_17_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.214285714285714285714285714', '1.214285714285714285714285714')
class CalculationTestCase_17_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.133333333333333333333333333', '1.133333333333333333333333333')
class CalculationTestCase_17_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.0625', '1.0625')
class CalculationTestCase_17_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1', '1')
class CalculationTestCase_17_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('0.9444444444444444444444444444', '0.9444444444444444444444444444')
class CalculationTestCase_17_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.8947368421052631578947368421', '0.8947368421052631578947368421')
class CalculationTestCase_17_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.85', '0.85')
class CalculationTestCase_17_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.8095238095238095238095238095', '0.8095238095238095238095238095')
class CalculationTestCase_17_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.7727272727272727272727272727', '0.7727272727272727272727272727')
class CalculationTestCase_17_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.7391304347826086956521739130', '0.7391304347826086956521739130')
class CalculationTestCase_17_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.7083333333333333333333333333', '0.7083333333333333333333333333')
class CalculationTestCase_17_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.68', '0.68')
class CalculationTestCase_17_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.6538461538461538461538461538', '0.6538461538461538461538461538')
class CalculationTestCase_17_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.6296296296296296296296296296', '0.6296296296296296296296296296')
class CalculationTestCase_17_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.6071428571428571428571428571', '0.6071428571428571428571428571')
class CalculationTestCase_17_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.5862068965517241379310344828', '0.5862068965517241379310344828')
class CalculationTestCase_17_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.5666666666666666666666666667', '0.5666666666666666666666666667')
class CalculationTestCase_17_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.5483870967741935483870967742', '0.5483870967741935483870967742')
class CalculationTestCase_17_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.53125', '0.53125')
class CalculationTestCase_17_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.5151515151515151515151515152', '0.5151515151515151515151515152')
class CalculationTestCase_17_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_17_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.4857142857142857142857142857', '0.4857142857142857142857142857')
class CalculationTestCase_17_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.4722222222222222222222222222', '0.4722222222222222222222222222')
class CalculationTestCase_17_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.4594594594594594594594594595', '0.4594594594594594594594594595')
class CalculationTestCase_17_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.4473684210526315789473684211', '0.4473684210526315789473684211')
class CalculationTestCase_17_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.4358974358974358974358974359', '0.4358974358974358974358974359')
class CalculationTestCase_17_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.425', '0.425')
class CalculationTestCase_17_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.4146341463414634146341463415', '0.4146341463414634146341463415')
class CalculationTestCase_17_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.4047619047619047619047619048', '0.4047619047619047619047619048')
class CalculationTestCase_17_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.3953488372093023255813953488', '0.3953488372093023255813953488')
class CalculationTestCase_17_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.3863636363636363636363636364', '0.3863636363636363636363636364')
class CalculationTestCase_17_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.3777777777777777777777777778', '0.3777777777777777777777777778')
class CalculationTestCase_17_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.3695652173913043478260869565', '0.3695652173913043478260869565')
class CalculationTestCase_17_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.3617021276595744680851063830', '0.3617021276595744680851063830')
class CalculationTestCase_17_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.3541666666666666666666666667', '0.3541666666666666666666666667')
class CalculationTestCase_17_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.3469387755102040816326530612', '0.3469387755102040816326530612')
class CalculationTestCase_17_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 17 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.34', '0.34')
class CalculationTestCase_18_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_18_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('18', '18')
class CalculationTestCase_18_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('9', '9')
class CalculationTestCase_18_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('6', '6')
class CalculationTestCase_18_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('4.5', '4.5')
class CalculationTestCase_18_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('3.6', '3.6')
class CalculationTestCase_18_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('3', '3')
class CalculationTestCase_18_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('2.571428571428571428571428571', '2.571428571428571428571428571')
class CalculationTestCase_18_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('2.25', '2.25')
class CalculationTestCase_18_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('2', '2')
class CalculationTestCase_18_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('1.8', '1.8')
class CalculationTestCase_18_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('1.636363636363636363636363636', '1.636363636363636363636363636')
class CalculationTestCase_18_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_18_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.384615384615384615384615385', '1.384615384615384615384615385')
class CalculationTestCase_18_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.285714285714285714285714286', '1.285714285714285714285714286')
class CalculationTestCase_18_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.2', '1.2')
class CalculationTestCase_18_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.125', '1.125')
class CalculationTestCase_18_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.058823529411764705882352941', '1.058823529411764705882352941')
class CalculationTestCase_18_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1', '1')
class CalculationTestCase_18_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('0.9473684210526315789473684211', '0.9473684210526315789473684211')
class CalculationTestCase_18_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.9', '0.9')
class CalculationTestCase_18_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.8571428571428571428571428571', '0.8571428571428571428571428571')
class CalculationTestCase_18_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.8181818181818181818181818182', '0.8181818181818181818181818182')
class CalculationTestCase_18_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.7826086956521739130434782609', '0.7826086956521739130434782609')
class CalculationTestCase_18_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_18_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.72', '0.72')
class CalculationTestCase_18_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.6923076923076923076923076923', '0.6923076923076923076923076923')
class CalculationTestCase_18_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_18_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.6428571428571428571428571429', '0.6428571428571428571428571429')
class CalculationTestCase_18_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.6206896551724137931034482759', '0.6206896551724137931034482759')
class CalculationTestCase_18_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.6', '0.6')
class CalculationTestCase_18_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.5806451612903225806451612903', '0.5806451612903225806451612903')
class CalculationTestCase_18_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.5625', '0.5625')
class CalculationTestCase_18_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.5454545454545454545454545455', '0.5454545454545454545454545455')
class CalculationTestCase_18_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.5294117647058823529411764706', '0.5294117647058823529411764706')
class CalculationTestCase_18_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.5142857142857142857142857143', '0.5142857142857142857142857143')
class CalculationTestCase_18_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_18_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.4864864864864864864864864865', '0.4864864864864864864864864865')
class CalculationTestCase_18_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.4736842105263157894736842105', '0.4736842105263157894736842105')
class CalculationTestCase_18_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.4615384615384615384615384615', '0.4615384615384615384615384615')
class CalculationTestCase_18_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.45', '0.45')
class CalculationTestCase_18_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.4390243902439024390243902439', '0.4390243902439024390243902439')
class CalculationTestCase_18_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.4285714285714285714285714286', '0.4285714285714285714285714286')
class CalculationTestCase_18_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.4186046511627906976744186047', '0.4186046511627906976744186047')
class CalculationTestCase_18_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.4090909090909090909090909091', '0.4090909090909090909090909091')
class CalculationTestCase_18_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.4', '0.4')
class CalculationTestCase_18_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.3913043478260869565217391304', '0.3913043478260869565217391304')
class CalculationTestCase_18_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.3829787234042553191489361702', '0.3829787234042553191489361702')
class CalculationTestCase_18_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.375', '0.375')
class CalculationTestCase_18_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.3673469387755102040816326531', '0.3673469387755102040816326531')
class CalculationTestCase_18_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 18 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.36', '0.36')
class CalculationTestCase_19_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_19_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('19', '19')
class CalculationTestCase_19_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('9.5', '9.5')
class CalculationTestCase_19_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('6.333333333333333333333333333', '6.333333333333333333333333333')
class CalculationTestCase_19_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('4.75', '4.75')
class CalculationTestCase_19_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('3.8', '3.8')
class CalculationTestCase_19_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('3.166666666666666666666666667', '3.166666666666666666666666667')
class CalculationTestCase_19_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('2.714285714285714285714285714', '2.714285714285714285714285714')
class CalculationTestCase_19_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('2.375', '2.375')
class CalculationTestCase_19_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('2.111111111111111111111111111', '2.111111111111111111111111111')
class CalculationTestCase_19_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('1.9', '1.9')
class CalculationTestCase_19_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('1.727272727272727272727272727', '1.727272727272727272727272727')
class CalculationTestCase_19_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1.583333333333333333333333333', '1.583333333333333333333333333')
class CalculationTestCase_19_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.461538461538461538461538462', '1.461538461538461538461538462')
class CalculationTestCase_19_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.357142857142857142857142857', '1.357142857142857142857142857')
class CalculationTestCase_19_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.266666666666666666666666667', '1.266666666666666666666666667')
class CalculationTestCase_19_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.1875', '1.1875')
class CalculationTestCase_19_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.117647058823529411764705882', '1.117647058823529411764705882')
class CalculationTestCase_19_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.055555555555555555555555556', '1.055555555555555555555555556')
class CalculationTestCase_19_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1', '1')
class CalculationTestCase_19_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('0.95', '0.95')
class CalculationTestCase_19_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.9047619047619047619047619048', '0.9047619047619047619047619048')
class CalculationTestCase_19_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.8636363636363636363636363636', '0.8636363636363636363636363636')
class CalculationTestCase_19_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.8260869565217391304347826087', '0.8260869565217391304347826087')
class CalculationTestCase_19_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.7916666666666666666666666667', '0.7916666666666666666666666667')
class CalculationTestCase_19_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.76', '0.76')
class CalculationTestCase_19_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.7307692307692307692307692308', '0.7307692307692307692307692308')
class CalculationTestCase_19_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.7037037037037037037037037037', '0.7037037037037037037037037037')
class CalculationTestCase_19_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.6785714285714285714285714286', '0.6785714285714285714285714286')
class CalculationTestCase_19_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.6551724137931034482758620690', '0.6551724137931034482758620690')
class CalculationTestCase_19_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.6333333333333333333333333333', '0.6333333333333333333333333333')
class CalculationTestCase_19_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.6129032258064516129032258065', '0.6129032258064516129032258065')
class CalculationTestCase_19_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.59375', '0.59375')
class CalculationTestCase_19_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.5757575757575757575757575758', '0.5757575757575757575757575758')
class CalculationTestCase_19_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.5588235294117647058823529412', '0.5588235294117647058823529412')
class CalculationTestCase_19_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.5428571428571428571428571429', '0.5428571428571428571428571429')
class CalculationTestCase_19_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.5277777777777777777777777778', '0.5277777777777777777777777778')
class CalculationTestCase_19_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.5135135135135135135135135135', '0.5135135135135135135135135135')
class CalculationTestCase_19_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_19_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.4871794871794871794871794872', '0.4871794871794871794871794872')
class CalculationTestCase_19_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.475', '0.475')
class CalculationTestCase_19_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.4634146341463414634146341463', '0.4634146341463414634146341463')
class CalculationTestCase_19_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.4523809523809523809523809524', '0.4523809523809523809523809524')
class CalculationTestCase_19_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.4418604651162790697674418605', '0.4418604651162790697674418605')
class CalculationTestCase_19_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.4318181818181818181818181818', '0.4318181818181818181818181818')
class CalculationTestCase_19_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.4222222222222222222222222222', '0.4222222222222222222222222222')
class CalculationTestCase_19_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.4130434782608695652173913043', '0.4130434782608695652173913043')
class CalculationTestCase_19_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.4042553191489361702127659574', '0.4042553191489361702127659574')
class CalculationTestCase_19_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.3958333333333333333333333333', '0.3958333333333333333333333333')
class CalculationTestCase_19_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.3877551020408163265306122449', '0.3877551020408163265306122449')
class CalculationTestCase_19_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 19 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.38', '0.38')
class CalculationTestCase_20_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_20_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('20', '20')
class CalculationTestCase_20_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('10', '10')
class CalculationTestCase_20_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('6.666666666666666666666666667', '6.666666666666666666666666667')
class CalculationTestCase_20_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('5', '5')
class CalculationTestCase_20_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('4', '4')
class CalculationTestCase_20_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('3.333333333333333333333333333', '3.333333333333333333333333333')
class CalculationTestCase_20_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('2.857142857142857142857142857', '2.857142857142857142857142857')
class CalculationTestCase_20_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('2.5', '2.5')
class CalculationTestCase_20_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('2.222222222222222222222222222', '2.222222222222222222222222222')
class CalculationTestCase_20_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('2', '2')
class CalculationTestCase_20_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('1.818181818181818181818181818', '1.818181818181818181818181818')
class CalculationTestCase_20_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1.666666666666666666666666667', '1.666666666666666666666666667')
class CalculationTestCase_20_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.538461538461538461538461538', '1.538461538461538461538461538')
class CalculationTestCase_20_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.428571428571428571428571429', '1.428571428571428571428571429')
class CalculationTestCase_20_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_20_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.25', '1.25')
class CalculationTestCase_20_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.176470588235294117647058824', '1.176470588235294117647058824')
class CalculationTestCase_20_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.111111111111111111111111111', '1.111111111111111111111111111')
class CalculationTestCase_20_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.052631578947368421052631579', '1.052631578947368421052631579')
class CalculationTestCase_20_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1', '1')
class CalculationTestCase_20_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('0.9523809523809523809523809524', '0.9523809523809523809523809524')
class CalculationTestCase_20_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.9090909090909090909090909091', '0.9090909090909090909090909091')
class CalculationTestCase_20_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.8695652173913043478260869565', '0.8695652173913043478260869565')
class CalculationTestCase_20_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.8333333333333333333333333333', '0.8333333333333333333333333333')
class CalculationTestCase_20_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.8', '0.8')
class CalculationTestCase_20_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.7692307692307692307692307692', '0.7692307692307692307692307692')
class CalculationTestCase_20_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.7407407407407407407407407407', '0.7407407407407407407407407407')
class CalculationTestCase_20_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.7142857142857142857142857143', '0.7142857142857142857142857143')
class CalculationTestCase_20_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.6896551724137931034482758621', '0.6896551724137931034482758621')
class CalculationTestCase_20_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_20_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.6451612903225806451612903226', '0.6451612903225806451612903226')
class CalculationTestCase_20_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.625', '0.625')
class CalculationTestCase_20_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.6060606060606060606060606061', '0.6060606060606060606060606061')
class CalculationTestCase_20_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.5882352941176470588235294118', '0.5882352941176470588235294118')
class CalculationTestCase_20_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.5714285714285714285714285714', '0.5714285714285714285714285714')
class CalculationTestCase_20_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.5555555555555555555555555556', '0.5555555555555555555555555556')
class CalculationTestCase_20_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.5405405405405405405405405405', '0.5405405405405405405405405405')
class CalculationTestCase_20_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.5263157894736842105263157895', '0.5263157894736842105263157895')
class CalculationTestCase_20_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.5128205128205128205128205128', '0.5128205128205128205128205128')
class CalculationTestCase_20_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_20_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.4878048780487804878048780488', '0.4878048780487804878048780488')
class CalculationTestCase_20_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.4761904761904761904761904762', '0.4761904761904761904761904762')
class CalculationTestCase_20_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.4651162790697674418604651163', '0.4651162790697674418604651163')
class CalculationTestCase_20_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.4545454545454545454545454545', '0.4545454545454545454545454545')
class CalculationTestCase_20_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.4444444444444444444444444444', '0.4444444444444444444444444444')
class CalculationTestCase_20_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.4347826086956521739130434783', '0.4347826086956521739130434783')
class CalculationTestCase_20_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.4255319148936170212765957447', '0.4255319148936170212765957447')
class CalculationTestCase_20_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.4166666666666666666666666667', '0.4166666666666666666666666667')
class CalculationTestCase_20_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.4081632653061224489795918367', '0.4081632653061224489795918367')
class CalculationTestCase_20_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 20 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.4', '0.4')
class CalculationTestCase_21_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_21_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('21', '21')
class CalculationTestCase_21_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('10.5', '10.5')
class CalculationTestCase_21_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('7', '7')
class CalculationTestCase_21_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('5.25', '5.25')
class CalculationTestCase_21_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('4.2', '4.2')
class CalculationTestCase_21_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('3.5', '3.5')
class CalculationTestCase_21_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('3', '3')
class CalculationTestCase_21_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('2.625', '2.625')
class CalculationTestCase_21_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('2.333333333333333333333333333', '2.333333333333333333333333333')
class CalculationTestCase_21_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('2.1', '2.1')
class CalculationTestCase_21_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('1.909090909090909090909090909', '1.909090909090909090909090909')
class CalculationTestCase_21_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1.75', '1.75')
class CalculationTestCase_21_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.615384615384615384615384615', '1.615384615384615384615384615')
class CalculationTestCase_21_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_21_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.4', '1.4')
class CalculationTestCase_21_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.3125', '1.3125')
class CalculationTestCase_21_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.235294117647058823529411765', '1.235294117647058823529411765')
class CalculationTestCase_21_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.166666666666666666666666667', '1.166666666666666666666666667')
class CalculationTestCase_21_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.105263157894736842105263158', '1.105263157894736842105263158')
class CalculationTestCase_21_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.05', '1.05')
class CalculationTestCase_21_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1', '1')
class CalculationTestCase_21_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('0.9545454545454545454545454545', '0.9545454545454545454545454545')
class CalculationTestCase_21_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.9130434782608695652173913043', '0.9130434782608695652173913043')
class CalculationTestCase_21_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.875', '0.875')
class CalculationTestCase_21_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.84', '0.84')
class CalculationTestCase_21_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.8076923076923076923076923077', '0.8076923076923076923076923077')
class CalculationTestCase_21_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.7777777777777777777777777778', '0.7777777777777777777777777778')
class CalculationTestCase_21_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_21_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.7241379310344827586206896552', '0.7241379310344827586206896552')
class CalculationTestCase_21_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.7', '0.7')
class CalculationTestCase_21_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.6774193548387096774193548387', '0.6774193548387096774193548387')
class CalculationTestCase_21_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.65625', '0.65625')
class CalculationTestCase_21_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.6363636363636363636363636364', '0.6363636363636363636363636364')
class CalculationTestCase_21_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.6176470588235294117647058824', '0.6176470588235294117647058824')
class CalculationTestCase_21_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.6', '0.6')
class CalculationTestCase_21_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.5833333333333333333333333333', '0.5833333333333333333333333333')
class CalculationTestCase_21_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.5675675675675675675675675676', '0.5675675675675675675675675676')
class CalculationTestCase_21_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.5526315789473684210526315789', '0.5526315789473684210526315789')
class CalculationTestCase_21_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.5384615384615384615384615385', '0.5384615384615384615384615385')
class CalculationTestCase_21_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.525', '0.525')
class CalculationTestCase_21_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.5121951219512195121951219512', '0.5121951219512195121951219512')
class CalculationTestCase_21_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_21_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.4883720930232558139534883721', '0.4883720930232558139534883721')
class CalculationTestCase_21_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.4772727272727272727272727273', '0.4772727272727272727272727273')
class CalculationTestCase_21_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.4666666666666666666666666667', '0.4666666666666666666666666667')
class CalculationTestCase_21_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.4565217391304347826086956522', '0.4565217391304347826086956522')
class CalculationTestCase_21_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.4468085106382978723404255319', '0.4468085106382978723404255319')
class CalculationTestCase_21_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.4375', '0.4375')
class CalculationTestCase_21_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.4285714285714285714285714286', '0.4285714285714285714285714286')
class CalculationTestCase_21_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 21 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.42', '0.42')
class CalculationTestCase_22_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_22_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('22', '22')
class CalculationTestCase_22_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('11', '11')
class CalculationTestCase_22_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('7.333333333333333333333333333', '7.333333333333333333333333333')
class CalculationTestCase_22_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('5.5', '5.5')
class CalculationTestCase_22_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('4.4', '4.4')
class CalculationTestCase_22_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('3.666666666666666666666666667', '3.666666666666666666666666667')
class CalculationTestCase_22_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('3.142857142857142857142857143', '3.142857142857142857142857143')
class CalculationTestCase_22_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('2.75', '2.75')
class CalculationTestCase_22_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('2.444444444444444444444444444', '2.444444444444444444444444444')
class CalculationTestCase_22_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('2.2', '2.2')
class CalculationTestCase_22_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('2', '2')
class CalculationTestCase_22_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1.833333333333333333333333333', '1.833333333333333333333333333')
class CalculationTestCase_22_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.692307692307692307692307692', '1.692307692307692307692307692')
class CalculationTestCase_22_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.571428571428571428571428571', '1.571428571428571428571428571')
class CalculationTestCase_22_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.466666666666666666666666667', '1.466666666666666666666666667')
class CalculationTestCase_22_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.375', '1.375')
class CalculationTestCase_22_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.294117647058823529411764706', '1.294117647058823529411764706')
class CalculationTestCase_22_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.222222222222222222222222222', '1.222222222222222222222222222')
class CalculationTestCase_22_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.157894736842105263157894737', '1.157894736842105263157894737')
class CalculationTestCase_22_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.1', '1.1')
class CalculationTestCase_22_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.047619047619047619047619048', '1.047619047619047619047619048')
class CalculationTestCase_22_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1', '1')
class CalculationTestCase_22_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('0.9565217391304347826086956522', '0.9565217391304347826086956522')
class CalculationTestCase_22_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.9166666666666666666666666667', '0.9166666666666666666666666667')
class CalculationTestCase_22_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.88', '0.88')
class CalculationTestCase_22_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.8461538461538461538461538462', '0.8461538461538461538461538462')
class CalculationTestCase_22_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.8148148148148148148148148148', '0.8148148148148148148148148148')
class CalculationTestCase_22_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.7857142857142857142857142857', '0.7857142857142857142857142857')
class CalculationTestCase_22_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.7586206896551724137931034483', '0.7586206896551724137931034483')
class CalculationTestCase_22_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.7333333333333333333333333333', '0.7333333333333333333333333333')
class CalculationTestCase_22_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.7096774193548387096774193548', '0.7096774193548387096774193548')
class CalculationTestCase_22_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.6875', '0.6875')
class CalculationTestCase_22_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_22_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.6470588235294117647058823529', '0.6470588235294117647058823529')
class CalculationTestCase_22_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.6285714285714285714285714286', '0.6285714285714285714285714286')
class CalculationTestCase_22_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.6111111111111111111111111111', '0.6111111111111111111111111111')
class CalculationTestCase_22_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.5945945945945945945945945946', '0.5945945945945945945945945946')
class CalculationTestCase_22_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.5789473684210526315789473684', '0.5789473684210526315789473684')
class CalculationTestCase_22_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.5641025641025641025641025641', '0.5641025641025641025641025641')
class CalculationTestCase_22_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.55', '0.55')
class CalculationTestCase_22_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.5365853658536585365853658537', '0.5365853658536585365853658537')
class CalculationTestCase_22_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.5238095238095238095238095238', '0.5238095238095238095238095238')
class CalculationTestCase_22_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.5116279069767441860465116279', '0.5116279069767441860465116279')
class CalculationTestCase_22_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_22_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.4888888888888888888888888889', '0.4888888888888888888888888889')
class CalculationTestCase_22_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.4782608695652173913043478261', '0.4782608695652173913043478261')
class CalculationTestCase_22_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.4680851063829787234042553191', '0.4680851063829787234042553191')
class CalculationTestCase_22_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.4583333333333333333333333333', '0.4583333333333333333333333333')
class CalculationTestCase_22_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.4489795918367346938775510204', '0.4489795918367346938775510204')
class CalculationTestCase_22_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 22 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.44', '0.44')
class CalculationTestCase_23_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_23_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('23', '23')
class CalculationTestCase_23_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('11.5', '11.5')
class CalculationTestCase_23_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('7.666666666666666666666666667', '7.666666666666666666666666667')
class CalculationTestCase_23_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('5.75', '5.75')
class CalculationTestCase_23_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('4.6', '4.6')
class CalculationTestCase_23_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('3.833333333333333333333333333', '3.833333333333333333333333333')
class CalculationTestCase_23_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('3.285714285714285714285714286', '3.285714285714285714285714286')
class CalculationTestCase_23_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('2.875', '2.875')
class CalculationTestCase_23_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('2.555555555555555555555555556', '2.555555555555555555555555556')
class CalculationTestCase_23_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('2.3', '2.3')
class CalculationTestCase_23_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('2.090909090909090909090909091', '2.090909090909090909090909091')
class CalculationTestCase_23_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('1.916666666666666666666666667', '1.916666666666666666666666667')
class CalculationTestCase_23_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.769230769230769230769230769', '1.769230769230769230769230769')
class CalculationTestCase_23_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.642857142857142857142857143', '1.642857142857142857142857143')
class CalculationTestCase_23_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.533333333333333333333333333', '1.533333333333333333333333333')
class CalculationTestCase_23_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.4375', '1.4375')
class CalculationTestCase_23_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.352941176470588235294117647', '1.352941176470588235294117647')
class CalculationTestCase_23_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.277777777777777777777777778', '1.277777777777777777777777778')
class CalculationTestCase_23_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.210526315789473684210526316', '1.210526315789473684210526316')
class CalculationTestCase_23_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.15', '1.15')
class CalculationTestCase_23_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.095238095238095238095238095', '1.095238095238095238095238095')
class CalculationTestCase_23_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.045454545454545454545454545', '1.045454545454545454545454545')
class CalculationTestCase_23_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1', '1')
class CalculationTestCase_23_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('0.9583333333333333333333333333', '0.9583333333333333333333333333')
class CalculationTestCase_23_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.92', '0.92')
class CalculationTestCase_23_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.8846153846153846153846153846', '0.8846153846153846153846153846')
class CalculationTestCase_23_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.8518518518518518518518518519', '0.8518518518518518518518518519')
class CalculationTestCase_23_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.8214285714285714285714285714', '0.8214285714285714285714285714')
class CalculationTestCase_23_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.7931034482758620689655172414', '0.7931034482758620689655172414')
class CalculationTestCase_23_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.7666666666666666666666666667', '0.7666666666666666666666666667')
class CalculationTestCase_23_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.7419354838709677419354838710', '0.7419354838709677419354838710')
class CalculationTestCase_23_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.71875', '0.71875')
class CalculationTestCase_23_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.6969696969696969696969696970', '0.6969696969696969696969696970')
class CalculationTestCase_23_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.6764705882352941176470588235', '0.6764705882352941176470588235')
class CalculationTestCase_23_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.6571428571428571428571428571', '0.6571428571428571428571428571')
class CalculationTestCase_23_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.6388888888888888888888888889', '0.6388888888888888888888888889')
class CalculationTestCase_23_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.6216216216216216216216216216', '0.6216216216216216216216216216')
class CalculationTestCase_23_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.6052631578947368421052631579', '0.6052631578947368421052631579')
class CalculationTestCase_23_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.5897435897435897435897435897', '0.5897435897435897435897435897')
class CalculationTestCase_23_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.575', '0.575')
class CalculationTestCase_23_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.5609756097560975609756097561', '0.5609756097560975609756097561')
class CalculationTestCase_23_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.5476190476190476190476190476', '0.5476190476190476190476190476')
class CalculationTestCase_23_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.5348837209302325581395348837', '0.5348837209302325581395348837')
class CalculationTestCase_23_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.5227272727272727272727272727', '0.5227272727272727272727272727')
class CalculationTestCase_23_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.5111111111111111111111111111', '0.5111111111111111111111111111')
class CalculationTestCase_23_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_23_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.4893617021276595744680851064', '0.4893617021276595744680851064')
class CalculationTestCase_23_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.4791666666666666666666666667', '0.4791666666666666666666666667')
class CalculationTestCase_23_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.4693877551020408163265306122', '0.4693877551020408163265306122')
class CalculationTestCase_23_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 23 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.46', '0.46')
class CalculationTestCase_24_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_24_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('24', '24')
class CalculationTestCase_24_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('12', '12')
class CalculationTestCase_24_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('8', '8')
class CalculationTestCase_24_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('6', '6')
class CalculationTestCase_24_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('4.8', '4.8')
class CalculationTestCase_24_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('4', '4')
class CalculationTestCase_24_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('3.428571428571428571428571429', '3.428571428571428571428571429')
class CalculationTestCase_24_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('3', '3')
class CalculationTestCase_24_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('2.666666666666666666666666667', '2.666666666666666666666666667')
class CalculationTestCase_24_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('2.4', '2.4')
class CalculationTestCase_24_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('2.181818181818181818181818182', '2.181818181818181818181818182')
class CalculationTestCase_24_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2', '2')
class CalculationTestCase_24_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.846153846153846153846153846', '1.846153846153846153846153846')
class CalculationTestCase_24_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.714285714285714285714285714', '1.714285714285714285714285714')
class CalculationTestCase_24_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.6', '1.6')
class CalculationTestCase_24_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_24_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.411764705882352941176470588', '1.411764705882352941176470588')
class CalculationTestCase_24_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_24_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.263157894736842105263157895', '1.263157894736842105263157895')
class CalculationTestCase_24_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.2', '1.2')
class CalculationTestCase_24_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.142857142857142857142857143', '1.142857142857142857142857143')
class CalculationTestCase_24_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.090909090909090909090909091', '1.090909090909090909090909091')
class CalculationTestCase_24_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.043478260869565217391304348', '1.043478260869565217391304348')
class CalculationTestCase_24_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1', '1')
class CalculationTestCase_24_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('0.96', '0.96')
class CalculationTestCase_24_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.9230769230769230769230769231', '0.9230769230769230769230769231')
class CalculationTestCase_24_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.8888888888888888888888888889', '0.8888888888888888888888888889')
class CalculationTestCase_24_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.8571428571428571428571428571', '0.8571428571428571428571428571')
class CalculationTestCase_24_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.8275862068965517241379310345', '0.8275862068965517241379310345')
class CalculationTestCase_24_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.8', '0.8')
class CalculationTestCase_24_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.7741935483870967741935483871', '0.7741935483870967741935483871')
class CalculationTestCase_24_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_24_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.7272727272727272727272727273', '0.7272727272727272727272727273')
class CalculationTestCase_24_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.7058823529411764705882352941', '0.7058823529411764705882352941')
class CalculationTestCase_24_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.6857142857142857142857142857', '0.6857142857142857142857142857')
class CalculationTestCase_24_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_24_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.6486486486486486486486486486', '0.6486486486486486486486486486')
class CalculationTestCase_24_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.6315789473684210526315789474', '0.6315789473684210526315789474')
class CalculationTestCase_24_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.6153846153846153846153846154', '0.6153846153846153846153846154')
class CalculationTestCase_24_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.6', '0.6')
class CalculationTestCase_24_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.5853658536585365853658536585', '0.5853658536585365853658536585')
class CalculationTestCase_24_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.5714285714285714285714285714', '0.5714285714285714285714285714')
class CalculationTestCase_24_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.5581395348837209302325581395', '0.5581395348837209302325581395')
class CalculationTestCase_24_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.5454545454545454545454545455', '0.5454545454545454545454545455')
class CalculationTestCase_24_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.5333333333333333333333333333', '0.5333333333333333333333333333')
class CalculationTestCase_24_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.5217391304347826086956521739', '0.5217391304347826086956521739')
class CalculationTestCase_24_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.5106382978723404255319148936', '0.5106382978723404255319148936')
class CalculationTestCase_24_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_24_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.4897959183673469387755102041', '0.4897959183673469387755102041')
class CalculationTestCase_24_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 24 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.48', '0.48')
class CalculationTestCase_25_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_25_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('25', '25')
class CalculationTestCase_25_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('12.5', '12.5')
class CalculationTestCase_25_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('8.333333333333333333333333333', '8.333333333333333333333333333')
class CalculationTestCase_25_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('6.25', '6.25')
class CalculationTestCase_25_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('5', '5')
class CalculationTestCase_25_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('4.166666666666666666666666667', '4.166666666666666666666666667')
class CalculationTestCase_25_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('3.571428571428571428571428571', '3.571428571428571428571428571')
class CalculationTestCase_25_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('3.125', '3.125')
class CalculationTestCase_25_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('2.777777777777777777777777778', '2.777777777777777777777777778')
class CalculationTestCase_25_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('2.5', '2.5')
class CalculationTestCase_25_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('2.272727272727272727272727273', '2.272727272727272727272727273')
class CalculationTestCase_25_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2.083333333333333333333333333', '2.083333333333333333333333333')
class CalculationTestCase_25_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('1.923076923076923076923076923', '1.923076923076923076923076923')
class CalculationTestCase_25_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.785714285714285714285714286', '1.785714285714285714285714286')
class CalculationTestCase_25_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.666666666666666666666666667', '1.666666666666666666666666667')
class CalculationTestCase_25_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.5625', '1.5625')
class CalculationTestCase_25_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.470588235294117647058823529', '1.470588235294117647058823529')
class CalculationTestCase_25_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.388888888888888888888888889', '1.388888888888888888888888889')
class CalculationTestCase_25_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.315789473684210526315789474', '1.315789473684210526315789474')
class CalculationTestCase_25_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.25', '1.25')
class CalculationTestCase_25_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.190476190476190476190476190', '1.190476190476190476190476190')
class CalculationTestCase_25_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.136363636363636363636363636', '1.136363636363636363636363636')
class CalculationTestCase_25_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.086956521739130434782608696', '1.086956521739130434782608696')
class CalculationTestCase_25_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.041666666666666666666666667', '1.041666666666666666666666667')
class CalculationTestCase_25_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1', '1')
class CalculationTestCase_25_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('0.9615384615384615384615384615', '0.9615384615384615384615384615')
class CalculationTestCase_25_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.9259259259259259259259259259', '0.9259259259259259259259259259')
class CalculationTestCase_25_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.8928571428571428571428571429', '0.8928571428571428571428571429')
class CalculationTestCase_25_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.8620689655172413793103448276', '0.8620689655172413793103448276')
class CalculationTestCase_25_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.8333333333333333333333333333', '0.8333333333333333333333333333')
class CalculationTestCase_25_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.8064516129032258064516129032', '0.8064516129032258064516129032')
class CalculationTestCase_25_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.78125', '0.78125')
class CalculationTestCase_25_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.7575757575757575757575757576', '0.7575757575757575757575757576')
class CalculationTestCase_25_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.7352941176470588235294117647', '0.7352941176470588235294117647')
class CalculationTestCase_25_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.7142857142857142857142857143', '0.7142857142857142857142857143')
class CalculationTestCase_25_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.6944444444444444444444444444', '0.6944444444444444444444444444')
class CalculationTestCase_25_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.6756756756756756756756756757', '0.6756756756756756756756756757')
class CalculationTestCase_25_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.6578947368421052631578947368', '0.6578947368421052631578947368')
class CalculationTestCase_25_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.6410256410256410256410256410', '0.6410256410256410256410256410')
class CalculationTestCase_25_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.625', '0.625')
class CalculationTestCase_25_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.6097560975609756097560975610', '0.6097560975609756097560975610')
class CalculationTestCase_25_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.5952380952380952380952380952', '0.5952380952380952380952380952')
class CalculationTestCase_25_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.5813953488372093023255813953', '0.5813953488372093023255813953')
class CalculationTestCase_25_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.5681818181818181818181818182', '0.5681818181818181818181818182')
class CalculationTestCase_25_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.5555555555555555555555555556', '0.5555555555555555555555555556')
class CalculationTestCase_25_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.5434782608695652173913043478', '0.5434782608695652173913043478')
class CalculationTestCase_25_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.5319148936170212765957446809', '0.5319148936170212765957446809')
class CalculationTestCase_25_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.5208333333333333333333333333', '0.5208333333333333333333333333')
class CalculationTestCase_25_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.5102040816326530612244897959', '0.5102040816326530612244897959')
class CalculationTestCase_25_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 25 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.5', '0.5')
class CalculationTestCase_26_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_26_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('26', '26')
class CalculationTestCase_26_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('13', '13')
class CalculationTestCase_26_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('8.666666666666666666666666667', '8.666666666666666666666666667')
class CalculationTestCase_26_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('6.5', '6.5')
class CalculationTestCase_26_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('5.2', '5.2')
class CalculationTestCase_26_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('4.333333333333333333333333333', '4.333333333333333333333333333')
class CalculationTestCase_26_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('3.714285714285714285714285714', '3.714285714285714285714285714')
class CalculationTestCase_26_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('3.25', '3.25')
class CalculationTestCase_26_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('2.888888888888888888888888889', '2.888888888888888888888888889')
class CalculationTestCase_26_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('2.6', '2.6')
class CalculationTestCase_26_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('2.363636363636363636363636364', '2.363636363636363636363636364')
class CalculationTestCase_26_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2.166666666666666666666666667', '2.166666666666666666666666667')
class CalculationTestCase_26_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2', '2')
class CalculationTestCase_26_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.857142857142857142857142857', '1.857142857142857142857142857')
class CalculationTestCase_26_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.733333333333333333333333333', '1.733333333333333333333333333')
class CalculationTestCase_26_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.625', '1.625')
class CalculationTestCase_26_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.529411764705882352941176471', '1.529411764705882352941176471')
class CalculationTestCase_26_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.444444444444444444444444444', '1.444444444444444444444444444')
class CalculationTestCase_26_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.368421052631578947368421053', '1.368421052631578947368421053')
class CalculationTestCase_26_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.3', '1.3')
class CalculationTestCase_26_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.238095238095238095238095238', '1.238095238095238095238095238')
class CalculationTestCase_26_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.181818181818181818181818182', '1.181818181818181818181818182')
class CalculationTestCase_26_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.130434782608695652173913043', '1.130434782608695652173913043')
class CalculationTestCase_26_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.083333333333333333333333333', '1.083333333333333333333333333')
class CalculationTestCase_26_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.04', '1.04')
class CalculationTestCase_26_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1', '1')
class CalculationTestCase_26_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('0.9629629629629629629629629630', '0.9629629629629629629629629630')
class CalculationTestCase_26_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.9285714285714285714285714286', '0.9285714285714285714285714286')
class CalculationTestCase_26_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.8965517241379310344827586207', '0.8965517241379310344827586207')
class CalculationTestCase_26_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.8666666666666666666666666667', '0.8666666666666666666666666667')
class CalculationTestCase_26_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.8387096774193548387096774194', '0.8387096774193548387096774194')
class CalculationTestCase_26_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.8125', '0.8125')
class CalculationTestCase_26_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.7878787878787878787878787879', '0.7878787878787878787878787879')
class CalculationTestCase_26_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.7647058823529411764705882353', '0.7647058823529411764705882353')
class CalculationTestCase_26_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.7428571428571428571428571429', '0.7428571428571428571428571429')
class CalculationTestCase_26_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.7222222222222222222222222222', '0.7222222222222222222222222222')
class CalculationTestCase_26_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.7027027027027027027027027027', '0.7027027027027027027027027027')
class CalculationTestCase_26_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.6842105263157894736842105263', '0.6842105263157894736842105263')
class CalculationTestCase_26_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_26_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.65', '0.65')
class CalculationTestCase_26_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.6341463414634146341463414634', '0.6341463414634146341463414634')
class CalculationTestCase_26_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.6190476190476190476190476190', '0.6190476190476190476190476190')
class CalculationTestCase_26_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.6046511627906976744186046512', '0.6046511627906976744186046512')
class CalculationTestCase_26_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.5909090909090909090909090909', '0.5909090909090909090909090909')
class CalculationTestCase_26_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.5777777777777777777777777778', '0.5777777777777777777777777778')
class CalculationTestCase_26_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.5652173913043478260869565217', '0.5652173913043478260869565217')
class CalculationTestCase_26_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.5531914893617021276595744681', '0.5531914893617021276595744681')
class CalculationTestCase_26_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.5416666666666666666666666667', '0.5416666666666666666666666667')
class CalculationTestCase_26_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.5306122448979591836734693878', '0.5306122448979591836734693878')
class CalculationTestCase_26_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 26 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.52', '0.52')
class CalculationTestCase_27_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_27_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('27', '27')
class CalculationTestCase_27_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('13.5', '13.5')
class CalculationTestCase_27_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('9', '9')
class CalculationTestCase_27_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('6.75', '6.75')
class CalculationTestCase_27_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('5.4', '5.4')
class CalculationTestCase_27_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('4.5', '4.5')
class CalculationTestCase_27_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('3.857142857142857142857142857', '3.857142857142857142857142857')
class CalculationTestCase_27_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('3.375', '3.375')
class CalculationTestCase_27_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('3', '3')
class CalculationTestCase_27_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('2.7', '2.7')
class CalculationTestCase_27_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('2.454545454545454545454545455', '2.454545454545454545454545455')
class CalculationTestCase_27_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2.25', '2.25')
class CalculationTestCase_27_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.076923076923076923076923077', '2.076923076923076923076923077')
class CalculationTestCase_27_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('1.928571428571428571428571429', '1.928571428571428571428571429')
class CalculationTestCase_27_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.8', '1.8')
class CalculationTestCase_27_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.6875', '1.6875')
class CalculationTestCase_27_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.588235294117647058823529412', '1.588235294117647058823529412')
class CalculationTestCase_27_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_27_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.421052631578947368421052632', '1.421052631578947368421052632')
class CalculationTestCase_27_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.35', '1.35')
class CalculationTestCase_27_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.285714285714285714285714286', '1.285714285714285714285714286')
class CalculationTestCase_27_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.227272727272727272727272727', '1.227272727272727272727272727')
class CalculationTestCase_27_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.173913043478260869565217391', '1.173913043478260869565217391')
class CalculationTestCase_27_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.125', '1.125')
class CalculationTestCase_27_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.08', '1.08')
class CalculationTestCase_27_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.038461538461538461538461538', '1.038461538461538461538461538')
class CalculationTestCase_27_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1', '1')
class CalculationTestCase_27_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('0.9642857142857142857142857143', '0.9642857142857142857142857143')
class CalculationTestCase_27_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.9310344827586206896551724138', '0.9310344827586206896551724138')
class CalculationTestCase_27_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.9', '0.9')
class CalculationTestCase_27_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.8709677419354838709677419355', '0.8709677419354838709677419355')
class CalculationTestCase_27_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.84375', '0.84375')
class CalculationTestCase_27_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.8181818181818181818181818182', '0.8181818181818181818181818182')
class CalculationTestCase_27_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.7941176470588235294117647059', '0.7941176470588235294117647059')
class CalculationTestCase_27_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.7714285714285714285714285714', '0.7714285714285714285714285714')
class CalculationTestCase_27_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_27_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.7297297297297297297297297297', '0.7297297297297297297297297297')
class CalculationTestCase_27_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.7105263157894736842105263158', '0.7105263157894736842105263158')
class CalculationTestCase_27_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.6923076923076923076923076923', '0.6923076923076923076923076923')
class CalculationTestCase_27_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.675', '0.675')
class CalculationTestCase_27_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.6585365853658536585365853659', '0.6585365853658536585365853659')
class CalculationTestCase_27_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.6428571428571428571428571429', '0.6428571428571428571428571429')
class CalculationTestCase_27_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.6279069767441860465116279070', '0.6279069767441860465116279070')
class CalculationTestCase_27_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.6136363636363636363636363636', '0.6136363636363636363636363636')
class CalculationTestCase_27_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.6', '0.6')
class CalculationTestCase_27_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.5869565217391304347826086957', '0.5869565217391304347826086957')
class CalculationTestCase_27_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.5744680851063829787234042553', '0.5744680851063829787234042553')
class CalculationTestCase_27_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.5625', '0.5625')
class CalculationTestCase_27_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.5510204081632653061224489796', '0.5510204081632653061224489796')
class CalculationTestCase_27_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 27 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.54', '0.54')
class CalculationTestCase_28_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_28_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('28', '28')
class CalculationTestCase_28_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('14', '14')
class CalculationTestCase_28_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('9.333333333333333333333333333', '9.333333333333333333333333333')
class CalculationTestCase_28_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('7', '7')
class CalculationTestCase_28_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('5.6', '5.6')
class CalculationTestCase_28_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('4.666666666666666666666666667', '4.666666666666666666666666667')
class CalculationTestCase_28_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('4', '4')
class CalculationTestCase_28_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('3.5', '3.5')
class CalculationTestCase_28_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('3.111111111111111111111111111', '3.111111111111111111111111111')
class CalculationTestCase_28_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('2.8', '2.8')
class CalculationTestCase_28_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('2.545454545454545454545454545', '2.545454545454545454545454545')
class CalculationTestCase_28_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2.333333333333333333333333333', '2.333333333333333333333333333')
class CalculationTestCase_28_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.153846153846153846153846154', '2.153846153846153846153846154')
class CalculationTestCase_28_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2', '2')
class CalculationTestCase_28_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.866666666666666666666666667', '1.866666666666666666666666667')
class CalculationTestCase_28_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.75', '1.75')
class CalculationTestCase_28_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.647058823529411764705882353', '1.647058823529411764705882353')
class CalculationTestCase_28_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.555555555555555555555555556', '1.555555555555555555555555556')
class CalculationTestCase_28_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.473684210526315789473684211', '1.473684210526315789473684211')
class CalculationTestCase_28_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.4', '1.4')
class CalculationTestCase_28_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_28_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.272727272727272727272727273', '1.272727272727272727272727273')
class CalculationTestCase_28_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.217391304347826086956521739', '1.217391304347826086956521739')
class CalculationTestCase_28_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.166666666666666666666666667', '1.166666666666666666666666667')
class CalculationTestCase_28_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.12', '1.12')
class CalculationTestCase_28_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.076923076923076923076923077', '1.076923076923076923076923077')
class CalculationTestCase_28_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.037037037037037037037037037', '1.037037037037037037037037037')
class CalculationTestCase_28_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1', '1')
class CalculationTestCase_28_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('0.9655172413793103448275862069', '0.9655172413793103448275862069')
class CalculationTestCase_28_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.9333333333333333333333333333', '0.9333333333333333333333333333')
class CalculationTestCase_28_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.9032258064516129032258064516', '0.9032258064516129032258064516')
class CalculationTestCase_28_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.875', '0.875')
class CalculationTestCase_28_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.8484848484848484848484848485', '0.8484848484848484848484848485')
class CalculationTestCase_28_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.8235294117647058823529411765', '0.8235294117647058823529411765')
class CalculationTestCase_28_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.8', '0.8')
class CalculationTestCase_28_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.7777777777777777777777777778', '0.7777777777777777777777777778')
class CalculationTestCase_28_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.7567567567567567567567567568', '0.7567567567567567567567567568')
class CalculationTestCase_28_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.7368421052631578947368421053', '0.7368421052631578947368421053')
class CalculationTestCase_28_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.7179487179487179487179487179', '0.7179487179487179487179487179')
class CalculationTestCase_28_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.7', '0.7')
class CalculationTestCase_28_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.6829268292682926829268292683', '0.6829268292682926829268292683')
class CalculationTestCase_28_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_28_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.6511627906976744186046511628', '0.6511627906976744186046511628')
class CalculationTestCase_28_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.6363636363636363636363636364', '0.6363636363636363636363636364')
class CalculationTestCase_28_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.6222222222222222222222222222', '0.6222222222222222222222222222')
class CalculationTestCase_28_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.6086956521739130434782608696', '0.6086956521739130434782608696')
class CalculationTestCase_28_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.5957446808510638297872340426', '0.5957446808510638297872340426')
class CalculationTestCase_28_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.5833333333333333333333333333', '0.5833333333333333333333333333')
class CalculationTestCase_28_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.5714285714285714285714285714', '0.5714285714285714285714285714')
class CalculationTestCase_28_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 28 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.56', '0.56')
class CalculationTestCase_29_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_29_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('29', '29')
class CalculationTestCase_29_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('14.5', '14.5')
class CalculationTestCase_29_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('9.666666666666666666666666667', '9.666666666666666666666666667')
class CalculationTestCase_29_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('7.25', '7.25')
class CalculationTestCase_29_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('5.8', '5.8')
class CalculationTestCase_29_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('4.833333333333333333333333333', '4.833333333333333333333333333')
class CalculationTestCase_29_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('4.142857142857142857142857143', '4.142857142857142857142857143')
class CalculationTestCase_29_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('3.625', '3.625')
class CalculationTestCase_29_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('3.222222222222222222222222222', '3.222222222222222222222222222')
class CalculationTestCase_29_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('2.9', '2.9')
class CalculationTestCase_29_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('2.636363636363636363636363636', '2.636363636363636363636363636')
class CalculationTestCase_29_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2.416666666666666666666666667', '2.416666666666666666666666667')
class CalculationTestCase_29_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.230769230769230769230769231', '2.230769230769230769230769231')
class CalculationTestCase_29_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.071428571428571428571428571', '2.071428571428571428571428571')
class CalculationTestCase_29_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('1.933333333333333333333333333', '1.933333333333333333333333333')
class CalculationTestCase_29_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.8125', '1.8125')
class CalculationTestCase_29_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.705882352941176470588235294', '1.705882352941176470588235294')
class CalculationTestCase_29_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.611111111111111111111111111', '1.611111111111111111111111111')
class CalculationTestCase_29_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.526315789473684210526315789', '1.526315789473684210526315789')
class CalculationTestCase_29_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.45', '1.45')
class CalculationTestCase_29_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.380952380952380952380952381', '1.380952380952380952380952381')
class CalculationTestCase_29_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.318181818181818181818181818', '1.318181818181818181818181818')
class CalculationTestCase_29_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.260869565217391304347826087', '1.260869565217391304347826087')
class CalculationTestCase_29_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.208333333333333333333333333', '1.208333333333333333333333333')
class CalculationTestCase_29_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.16', '1.16')
class CalculationTestCase_29_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.115384615384615384615384615', '1.115384615384615384615384615')
class CalculationTestCase_29_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.074074074074074074074074074', '1.074074074074074074074074074')
class CalculationTestCase_29_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.035714285714285714285714286', '1.035714285714285714285714286')
class CalculationTestCase_29_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1', '1')
class CalculationTestCase_29_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('0.9666666666666666666666666667', '0.9666666666666666666666666667')
class CalculationTestCase_29_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.9354838709677419354838709677', '0.9354838709677419354838709677')
class CalculationTestCase_29_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.90625', '0.90625')
class CalculationTestCase_29_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.8787878787878787878787878788', '0.8787878787878787878787878788')
class CalculationTestCase_29_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.8529411764705882352941176471', '0.8529411764705882352941176471')
class CalculationTestCase_29_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.8285714285714285714285714286', '0.8285714285714285714285714286')
class CalculationTestCase_29_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.8055555555555555555555555556', '0.8055555555555555555555555556')
class CalculationTestCase_29_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.7837837837837837837837837838', '0.7837837837837837837837837838')
class CalculationTestCase_29_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.7631578947368421052631578947', '0.7631578947368421052631578947')
class CalculationTestCase_29_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.7435897435897435897435897436', '0.7435897435897435897435897436')
class CalculationTestCase_29_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.725', '0.725')
class CalculationTestCase_29_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.7073170731707317073170731707', '0.7073170731707317073170731707')
class CalculationTestCase_29_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.6904761904761904761904761905', '0.6904761904761904761904761905')
class CalculationTestCase_29_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.6744186046511627906976744186', '0.6744186046511627906976744186')
class CalculationTestCase_29_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.6590909090909090909090909091', '0.6590909090909090909090909091')
class CalculationTestCase_29_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.6444444444444444444444444444', '0.6444444444444444444444444444')
class CalculationTestCase_29_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.6304347826086956521739130435', '0.6304347826086956521739130435')
class CalculationTestCase_29_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.6170212765957446808510638298', '0.6170212765957446808510638298')
class CalculationTestCase_29_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.6041666666666666666666666667', '0.6041666666666666666666666667')
class CalculationTestCase_29_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.5918367346938775510204081633', '0.5918367346938775510204081633')
class CalculationTestCase_29_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 29 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.58', '0.58')
class CalculationTestCase_30_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_30_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('30', '30')
class CalculationTestCase_30_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('15', '15')
class CalculationTestCase_30_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('10', '10')
class CalculationTestCase_30_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('7.5', '7.5')
class CalculationTestCase_30_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('6', '6')
class CalculationTestCase_30_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('5', '5')
class CalculationTestCase_30_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('4.285714285714285714285714286', '4.285714285714285714285714286')
class CalculationTestCase_30_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('3.75', '3.75')
class CalculationTestCase_30_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('3.333333333333333333333333333', '3.333333333333333333333333333')
class CalculationTestCase_30_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('3', '3')
class CalculationTestCase_30_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('2.727272727272727272727272727', '2.727272727272727272727272727')
class CalculationTestCase_30_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2.5', '2.5')
class CalculationTestCase_30_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.307692307692307692307692308', '2.307692307692307692307692308')
class CalculationTestCase_30_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.142857142857142857142857143', '2.142857142857142857142857143')
class CalculationTestCase_30_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2', '2')
class CalculationTestCase_30_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.875', '1.875')
class CalculationTestCase_30_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.764705882352941176470588235', '1.764705882352941176470588235')
class CalculationTestCase_30_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.666666666666666666666666667', '1.666666666666666666666666667')
class CalculationTestCase_30_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.578947368421052631578947368', '1.578947368421052631578947368')
class CalculationTestCase_30_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_30_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.428571428571428571428571429', '1.428571428571428571428571429')
class CalculationTestCase_30_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.363636363636363636363636364', '1.363636363636363636363636364')
class CalculationTestCase_30_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.304347826086956521739130435', '1.304347826086956521739130435')
class CalculationTestCase_30_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.25', '1.25')
class CalculationTestCase_30_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.2', '1.2')
class CalculationTestCase_30_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.153846153846153846153846154', '1.153846153846153846153846154')
class CalculationTestCase_30_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.111111111111111111111111111', '1.111111111111111111111111111')
class CalculationTestCase_30_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.071428571428571428571428571', '1.071428571428571428571428571')
class CalculationTestCase_30_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.034482758620689655172413793', '1.034482758620689655172413793')
class CalculationTestCase_30_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1', '1')
class CalculationTestCase_30_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('0.9677419354838709677419354839', '0.9677419354838709677419354839')
class CalculationTestCase_30_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.9375', '0.9375')
class CalculationTestCase_30_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.9090909090909090909090909091', '0.9090909090909090909090909091')
class CalculationTestCase_30_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.8823529411764705882352941176', '0.8823529411764705882352941176')
class CalculationTestCase_30_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.8571428571428571428571428571', '0.8571428571428571428571428571')
class CalculationTestCase_30_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.8333333333333333333333333333', '0.8333333333333333333333333333')
class CalculationTestCase_30_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.8108108108108108108108108108', '0.8108108108108108108108108108')
class CalculationTestCase_30_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.7894736842105263157894736842', '0.7894736842105263157894736842')
class CalculationTestCase_30_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.7692307692307692307692307692', '0.7692307692307692307692307692')
class CalculationTestCase_30_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_30_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.7317073170731707317073170732', '0.7317073170731707317073170732')
class CalculationTestCase_30_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.7142857142857142857142857143', '0.7142857142857142857142857143')
class CalculationTestCase_30_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.6976744186046511627906976744', '0.6976744186046511627906976744')
class CalculationTestCase_30_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.6818181818181818181818181818', '0.6818181818181818181818181818')
class CalculationTestCase_30_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_30_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.6521739130434782608695652174', '0.6521739130434782608695652174')
class CalculationTestCase_30_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.6382978723404255319148936170', '0.6382978723404255319148936170')
class CalculationTestCase_30_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.625', '0.625')
class CalculationTestCase_30_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.6122448979591836734693877551', '0.6122448979591836734693877551')
class CalculationTestCase_30_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 30 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.6', '0.6')
class CalculationTestCase_31_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_31_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('31', '31')
class CalculationTestCase_31_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('15.5', '15.5')
class CalculationTestCase_31_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('10.33333333333333333333333333', '10.33333333333333333333333333')
class CalculationTestCase_31_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('7.75', '7.75')
class CalculationTestCase_31_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('6.2', '6.2')
class CalculationTestCase_31_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('5.166666666666666666666666667', '5.166666666666666666666666667')
class CalculationTestCase_31_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('4.428571428571428571428571429', '4.428571428571428571428571429')
class CalculationTestCase_31_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('3.875', '3.875')
class CalculationTestCase_31_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('3.444444444444444444444444444', '3.444444444444444444444444444')
class CalculationTestCase_31_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('3.1', '3.1')
class CalculationTestCase_31_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('2.818181818181818181818181818', '2.818181818181818181818181818')
class CalculationTestCase_31_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2.583333333333333333333333333', '2.583333333333333333333333333')
class CalculationTestCase_31_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.384615384615384615384615385', '2.384615384615384615384615385')
class CalculationTestCase_31_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.214285714285714285714285714', '2.214285714285714285714285714')
class CalculationTestCase_31_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.066666666666666666666666667', '2.066666666666666666666666667')
class CalculationTestCase_31_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('1.9375', '1.9375')
class CalculationTestCase_31_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.823529411764705882352941176', '1.823529411764705882352941176')
class CalculationTestCase_31_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.722222222222222222222222222', '1.722222222222222222222222222')
class CalculationTestCase_31_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.631578947368421052631578947', '1.631578947368421052631578947')
class CalculationTestCase_31_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.55', '1.55')
class CalculationTestCase_31_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.476190476190476190476190476', '1.476190476190476190476190476')
class CalculationTestCase_31_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.409090909090909090909090909', '1.409090909090909090909090909')
class CalculationTestCase_31_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.347826086956521739130434783', '1.347826086956521739130434783')
class CalculationTestCase_31_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.291666666666666666666666667', '1.291666666666666666666666667')
class CalculationTestCase_31_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.24', '1.24')
class CalculationTestCase_31_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.192307692307692307692307692', '1.192307692307692307692307692')
class CalculationTestCase_31_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.148148148148148148148148148', '1.148148148148148148148148148')
class CalculationTestCase_31_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.107142857142857142857142857', '1.107142857142857142857142857')
class CalculationTestCase_31_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.068965517241379310344827586', '1.068965517241379310344827586')
class CalculationTestCase_31_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.033333333333333333333333333', '1.033333333333333333333333333')
class CalculationTestCase_31_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1', '1')
class CalculationTestCase_31_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('0.96875', '0.96875')
class CalculationTestCase_31_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.9393939393939393939393939394', '0.9393939393939393939393939394')
class CalculationTestCase_31_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.9117647058823529411764705882', '0.9117647058823529411764705882')
class CalculationTestCase_31_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.8857142857142857142857142857', '0.8857142857142857142857142857')
class CalculationTestCase_31_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.8611111111111111111111111111', '0.8611111111111111111111111111')
class CalculationTestCase_31_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.8378378378378378378378378378', '0.8378378378378378378378378378')
class CalculationTestCase_31_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.8157894736842105263157894737', '0.8157894736842105263157894737')
class CalculationTestCase_31_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.7948717948717948717948717949', '0.7948717948717948717948717949')
class CalculationTestCase_31_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.775', '0.775')
class CalculationTestCase_31_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.7560975609756097560975609756', '0.7560975609756097560975609756')
class CalculationTestCase_31_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.7380952380952380952380952381', '0.7380952380952380952380952381')
class CalculationTestCase_31_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.7209302325581395348837209302', '0.7209302325581395348837209302')
class CalculationTestCase_31_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.7045454545454545454545454545', '0.7045454545454545454545454545')
class CalculationTestCase_31_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.6888888888888888888888888889', '0.6888888888888888888888888889')
class CalculationTestCase_31_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.6739130434782608695652173913', '0.6739130434782608695652173913')
class CalculationTestCase_31_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.6595744680851063829787234043', '0.6595744680851063829787234043')
class CalculationTestCase_31_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.6458333333333333333333333333', '0.6458333333333333333333333333')
class CalculationTestCase_31_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.6326530612244897959183673469', '0.6326530612244897959183673469')
class CalculationTestCase_31_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 31 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.62', '0.62')
class CalculationTestCase_32_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_32_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('32', '32')
class CalculationTestCase_32_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('16', '16')
class CalculationTestCase_32_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('10.66666666666666666666666667', '10.66666666666666666666666667')
class CalculationTestCase_32_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('8', '8')
class CalculationTestCase_32_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('6.4', '6.4')
class CalculationTestCase_32_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('5.333333333333333333333333333', '5.333333333333333333333333333')
class CalculationTestCase_32_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('4.571428571428571428571428571', '4.571428571428571428571428571')
class CalculationTestCase_32_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('4', '4')
class CalculationTestCase_32_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('3.555555555555555555555555556', '3.555555555555555555555555556')
class CalculationTestCase_32_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('3.2', '3.2')
class CalculationTestCase_32_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('2.909090909090909090909090909', '2.909090909090909090909090909')
class CalculationTestCase_32_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2.666666666666666666666666667', '2.666666666666666666666666667')
class CalculationTestCase_32_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.461538461538461538461538462', '2.461538461538461538461538462')
class CalculationTestCase_32_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.285714285714285714285714286', '2.285714285714285714285714286')
class CalculationTestCase_32_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.133333333333333333333333333', '2.133333333333333333333333333')
class CalculationTestCase_32_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2', '2')
class CalculationTestCase_32_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.882352941176470588235294118', '1.882352941176470588235294118')
class CalculationTestCase_32_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.777777777777777777777777778', '1.777777777777777777777777778')
class CalculationTestCase_32_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.684210526315789473684210526', '1.684210526315789473684210526')
class CalculationTestCase_32_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.6', '1.6')
class CalculationTestCase_32_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.523809523809523809523809524', '1.523809523809523809523809524')
class CalculationTestCase_32_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.454545454545454545454545455', '1.454545454545454545454545455')
class CalculationTestCase_32_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.391304347826086956521739130', '1.391304347826086956521739130')
class CalculationTestCase_32_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_32_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.28', '1.28')
class CalculationTestCase_32_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.230769230769230769230769231', '1.230769230769230769230769231')
class CalculationTestCase_32_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.185185185185185185185185185', '1.185185185185185185185185185')
class CalculationTestCase_32_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.142857142857142857142857143', '1.142857142857142857142857143')
class CalculationTestCase_32_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.103448275862068965517241379', '1.103448275862068965517241379')
class CalculationTestCase_32_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.066666666666666666666666667', '1.066666666666666666666666667')
class CalculationTestCase_32_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.032258064516129032258064516', '1.032258064516129032258064516')
class CalculationTestCase_32_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1', '1')
class CalculationTestCase_32_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('0.9696969696969696969696969697', '0.9696969696969696969696969697')
class CalculationTestCase_32_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.9411764705882352941176470588', '0.9411764705882352941176470588')
class CalculationTestCase_32_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.9142857142857142857142857143', '0.9142857142857142857142857143')
class CalculationTestCase_32_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.8888888888888888888888888889', '0.8888888888888888888888888889')
class CalculationTestCase_32_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.8648648648648648648648648649', '0.8648648648648648648648648649')
class CalculationTestCase_32_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.8421052631578947368421052632', '0.8421052631578947368421052632')
class CalculationTestCase_32_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.8205128205128205128205128205', '0.8205128205128205128205128205')
class CalculationTestCase_32_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.8', '0.8')
class CalculationTestCase_32_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.7804878048780487804878048780', '0.7804878048780487804878048780')
class CalculationTestCase_32_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.7619047619047619047619047619', '0.7619047619047619047619047619')
class CalculationTestCase_32_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.7441860465116279069767441860', '0.7441860465116279069767441860')
class CalculationTestCase_32_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.7272727272727272727272727273', '0.7272727272727272727272727273')
class CalculationTestCase_32_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.7111111111111111111111111111', '0.7111111111111111111111111111')
class CalculationTestCase_32_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.6956521739130434782608695652', '0.6956521739130434782608695652')
class CalculationTestCase_32_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.6808510638297872340425531915', '0.6808510638297872340425531915')
class CalculationTestCase_32_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.6666666666666666666666666667', '0.6666666666666666666666666667')
class CalculationTestCase_32_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.6530612244897959183673469388', '0.6530612244897959183673469388')
class CalculationTestCase_32_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 32 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.64', '0.64')
class CalculationTestCase_33_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_33_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('33', '33')
class CalculationTestCase_33_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('16.5', '16.5')
class CalculationTestCase_33_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('11', '11')
class CalculationTestCase_33_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('8.25', '8.25')
class CalculationTestCase_33_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('6.6', '6.6')
class CalculationTestCase_33_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('5.5', '5.5')
class CalculationTestCase_33_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('4.714285714285714285714285714', '4.714285714285714285714285714')
class CalculationTestCase_33_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('4.125', '4.125')
class CalculationTestCase_33_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('3.666666666666666666666666667', '3.666666666666666666666666667')
class CalculationTestCase_33_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('3.3', '3.3')
class CalculationTestCase_33_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('3', '3')
class CalculationTestCase_33_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2.75', '2.75')
class CalculationTestCase_33_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.538461538461538461538461538', '2.538461538461538461538461538')
class CalculationTestCase_33_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.357142857142857142857142857', '2.357142857142857142857142857')
class CalculationTestCase_33_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.2', '2.2')
class CalculationTestCase_33_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.0625', '2.0625')
class CalculationTestCase_33_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('1.941176470588235294117647059', '1.941176470588235294117647059')
class CalculationTestCase_33_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.833333333333333333333333333', '1.833333333333333333333333333')
class CalculationTestCase_33_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.736842105263157894736842105', '1.736842105263157894736842105')
class CalculationTestCase_33_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.65', '1.65')
class CalculationTestCase_33_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.571428571428571428571428571', '1.571428571428571428571428571')
class CalculationTestCase_33_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_33_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.434782608695652173913043478', '1.434782608695652173913043478')
class CalculationTestCase_33_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.375', '1.375')
class CalculationTestCase_33_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.32', '1.32')
class CalculationTestCase_33_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.269230769230769230769230769', '1.269230769230769230769230769')
class CalculationTestCase_33_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.222222222222222222222222222', '1.222222222222222222222222222')
class CalculationTestCase_33_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.178571428571428571428571429', '1.178571428571428571428571429')
class CalculationTestCase_33_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.137931034482758620689655172', '1.137931034482758620689655172')
class CalculationTestCase_33_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.1', '1.1')
class CalculationTestCase_33_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.064516129032258064516129032', '1.064516129032258064516129032')
class CalculationTestCase_33_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.03125', '1.03125')
class CalculationTestCase_33_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1', '1')
class CalculationTestCase_33_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('0.9705882352941176470588235294', '0.9705882352941176470588235294')
class CalculationTestCase_33_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.9428571428571428571428571429', '0.9428571428571428571428571429')
class CalculationTestCase_33_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.9166666666666666666666666667', '0.9166666666666666666666666667')
class CalculationTestCase_33_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.8918918918918918918918918919', '0.8918918918918918918918918919')
class CalculationTestCase_33_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.8684210526315789473684210526', '0.8684210526315789473684210526')
class CalculationTestCase_33_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.8461538461538461538461538462', '0.8461538461538461538461538462')
class CalculationTestCase_33_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.825', '0.825')
class CalculationTestCase_33_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.8048780487804878048780487805', '0.8048780487804878048780487805')
class CalculationTestCase_33_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.7857142857142857142857142857', '0.7857142857142857142857142857')
class CalculationTestCase_33_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.7674418604651162790697674419', '0.7674418604651162790697674419')
class CalculationTestCase_33_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_33_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.7333333333333333333333333333', '0.7333333333333333333333333333')
class CalculationTestCase_33_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.7173913043478260869565217391', '0.7173913043478260869565217391')
class CalculationTestCase_33_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.7021276595744680851063829787', '0.7021276595744680851063829787')
class CalculationTestCase_33_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.6875', '0.6875')
class CalculationTestCase_33_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.6734693877551020408163265306', '0.6734693877551020408163265306')
class CalculationTestCase_33_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 33 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.66', '0.66')
class CalculationTestCase_34_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_34_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('34', '34')
class CalculationTestCase_34_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('17', '17')
class CalculationTestCase_34_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('11.33333333333333333333333333', '11.33333333333333333333333333')
class CalculationTestCase_34_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('8.5', '8.5')
class CalculationTestCase_34_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('6.8', '6.8')
class CalculationTestCase_34_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('5.666666666666666666666666667', '5.666666666666666666666666667')
class CalculationTestCase_34_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('4.857142857142857142857142857', '4.857142857142857142857142857')
class CalculationTestCase_34_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('4.25', '4.25')
class CalculationTestCase_34_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('3.777777777777777777777777778', '3.777777777777777777777777778')
class CalculationTestCase_34_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('3.4', '3.4')
class CalculationTestCase_34_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('3.090909090909090909090909091', '3.090909090909090909090909091')
class CalculationTestCase_34_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2.833333333333333333333333333', '2.833333333333333333333333333')
class CalculationTestCase_34_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.615384615384615384615384615', '2.615384615384615384615384615')
class CalculationTestCase_34_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.428571428571428571428571429', '2.428571428571428571428571429')
class CalculationTestCase_34_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.266666666666666666666666667', '2.266666666666666666666666667')
class CalculationTestCase_34_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.125', '2.125')
class CalculationTestCase_34_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2', '2')
class CalculationTestCase_34_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.888888888888888888888888889', '1.888888888888888888888888889')
class CalculationTestCase_34_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.789473684210526315789473684', '1.789473684210526315789473684')
class CalculationTestCase_34_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.7', '1.7')
class CalculationTestCase_34_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.619047619047619047619047619', '1.619047619047619047619047619')
class CalculationTestCase_34_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.545454545454545454545454545', '1.545454545454545454545454545')
class CalculationTestCase_34_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.478260869565217391304347826', '1.478260869565217391304347826')
class CalculationTestCase_34_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.416666666666666666666666667', '1.416666666666666666666666667')
class CalculationTestCase_34_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.36', '1.36')
class CalculationTestCase_34_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.307692307692307692307692308', '1.307692307692307692307692308')
class CalculationTestCase_34_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.259259259259259259259259259', '1.259259259259259259259259259')
class CalculationTestCase_34_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.214285714285714285714285714', '1.214285714285714285714285714')
class CalculationTestCase_34_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.172413793103448275862068966', '1.172413793103448275862068966')
class CalculationTestCase_34_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.133333333333333333333333333', '1.133333333333333333333333333')
class CalculationTestCase_34_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.096774193548387096774193548', '1.096774193548387096774193548')
class CalculationTestCase_34_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.0625', '1.0625')
class CalculationTestCase_34_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.030303030303030303030303030', '1.030303030303030303030303030')
class CalculationTestCase_34_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1', '1')
class CalculationTestCase_34_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('0.9714285714285714285714285714', '0.9714285714285714285714285714')
class CalculationTestCase_34_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.9444444444444444444444444444', '0.9444444444444444444444444444')
class CalculationTestCase_34_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.9189189189189189189189189189', '0.9189189189189189189189189189')
class CalculationTestCase_34_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.8947368421052631578947368421', '0.8947368421052631578947368421')
class CalculationTestCase_34_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.8717948717948717948717948718', '0.8717948717948717948717948718')
class CalculationTestCase_34_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.85', '0.85')
class CalculationTestCase_34_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.8292682926829268292682926829', '0.8292682926829268292682926829')
class CalculationTestCase_34_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.8095238095238095238095238095', '0.8095238095238095238095238095')
class CalculationTestCase_34_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.7906976744186046511627906977', '0.7906976744186046511627906977')
class CalculationTestCase_34_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.7727272727272727272727272727', '0.7727272727272727272727272727')
class CalculationTestCase_34_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.7555555555555555555555555556', '0.7555555555555555555555555556')
class CalculationTestCase_34_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.7391304347826086956521739130', '0.7391304347826086956521739130')
class CalculationTestCase_34_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.7234042553191489361702127660', '0.7234042553191489361702127660')
class CalculationTestCase_34_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.7083333333333333333333333333', '0.7083333333333333333333333333')
class CalculationTestCase_34_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.6938775510204081632653061224', '0.6938775510204081632653061224')
class CalculationTestCase_34_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 34 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.68', '0.68')
class CalculationTestCase_35_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_35_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('35', '35')
class CalculationTestCase_35_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('17.5', '17.5')
class CalculationTestCase_35_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('11.66666666666666666666666667', '11.66666666666666666666666667')
class CalculationTestCase_35_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('8.75', '8.75')
class CalculationTestCase_35_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('7', '7')
class CalculationTestCase_35_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('5.833333333333333333333333333', '5.833333333333333333333333333')
class CalculationTestCase_35_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('5', '5')
class CalculationTestCase_35_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('4.375', '4.375')
class CalculationTestCase_35_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('3.888888888888888888888888889', '3.888888888888888888888888889')
class CalculationTestCase_35_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('3.5', '3.5')
class CalculationTestCase_35_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('3.181818181818181818181818182', '3.181818181818181818181818182')
class CalculationTestCase_35_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('2.916666666666666666666666667', '2.916666666666666666666666667')
class CalculationTestCase_35_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.692307692307692307692307692', '2.692307692307692307692307692')
class CalculationTestCase_35_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.5', '2.5')
class CalculationTestCase_35_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.333333333333333333333333333', '2.333333333333333333333333333')
class CalculationTestCase_35_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.1875', '2.1875')
class CalculationTestCase_35_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.058823529411764705882352941', '2.058823529411764705882352941')
class CalculationTestCase_35_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('1.944444444444444444444444444', '1.944444444444444444444444444')
class CalculationTestCase_35_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.842105263157894736842105263', '1.842105263157894736842105263')
class CalculationTestCase_35_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.75', '1.75')
class CalculationTestCase_35_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.666666666666666666666666667', '1.666666666666666666666666667')
class CalculationTestCase_35_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.590909090909090909090909091', '1.590909090909090909090909091')
class CalculationTestCase_35_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.521739130434782608695652174', '1.521739130434782608695652174')
class CalculationTestCase_35_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.458333333333333333333333333', '1.458333333333333333333333333')
class CalculationTestCase_35_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.4', '1.4')
class CalculationTestCase_35_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.346153846153846153846153846', '1.346153846153846153846153846')
class CalculationTestCase_35_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.296296296296296296296296296', '1.296296296296296296296296296')
class CalculationTestCase_35_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.25', '1.25')
class CalculationTestCase_35_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.206896551724137931034482759', '1.206896551724137931034482759')
class CalculationTestCase_35_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.166666666666666666666666667', '1.166666666666666666666666667')
class CalculationTestCase_35_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.129032258064516129032258065', '1.129032258064516129032258065')
class CalculationTestCase_35_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.09375', '1.09375')
class CalculationTestCase_35_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.060606060606060606060606061', '1.060606060606060606060606061')
class CalculationTestCase_35_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.029411764705882352941176471', '1.029411764705882352941176471')
class CalculationTestCase_35_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1', '1')
class CalculationTestCase_35_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('0.9722222222222222222222222222', '0.9722222222222222222222222222')
class CalculationTestCase_35_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.9459459459459459459459459459', '0.9459459459459459459459459459')
class CalculationTestCase_35_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.9210526315789473684210526316', '0.9210526315789473684210526316')
class CalculationTestCase_35_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.8974358974358974358974358974', '0.8974358974358974358974358974')
class CalculationTestCase_35_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.875', '0.875')
class CalculationTestCase_35_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.8536585365853658536585365854', '0.8536585365853658536585365854')
class CalculationTestCase_35_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.8333333333333333333333333333', '0.8333333333333333333333333333')
class CalculationTestCase_35_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.8139534883720930232558139535', '0.8139534883720930232558139535')
class CalculationTestCase_35_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.7954545454545454545454545455', '0.7954545454545454545454545455')
class CalculationTestCase_35_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.7777777777777777777777777778', '0.7777777777777777777777777778')
class CalculationTestCase_35_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.7608695652173913043478260870', '0.7608695652173913043478260870')
class CalculationTestCase_35_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.7446808510638297872340425532', '0.7446808510638297872340425532')
class CalculationTestCase_35_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.7291666666666666666666666667', '0.7291666666666666666666666667')
class CalculationTestCase_35_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.7142857142857142857142857143', '0.7142857142857142857142857143')
class CalculationTestCase_35_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 35 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.7', '0.7')
class CalculationTestCase_36_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_36_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('36', '36')
class CalculationTestCase_36_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('18', '18')
class CalculationTestCase_36_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('12', '12')
class CalculationTestCase_36_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('9', '9')
class CalculationTestCase_36_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('7.2', '7.2')
class CalculationTestCase_36_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('6', '6')
class CalculationTestCase_36_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('5.142857142857142857142857143', '5.142857142857142857142857143')
class CalculationTestCase_36_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('4.5', '4.5')
class CalculationTestCase_36_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('4', '4')
class CalculationTestCase_36_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('3.6', '3.6')
class CalculationTestCase_36_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('3.272727272727272727272727273', '3.272727272727272727272727273')
class CalculationTestCase_36_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3', '3')
class CalculationTestCase_36_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.769230769230769230769230769', '2.769230769230769230769230769')
class CalculationTestCase_36_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.571428571428571428571428571', '2.571428571428571428571428571')
class CalculationTestCase_36_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.4', '2.4')
class CalculationTestCase_36_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.25', '2.25')
class CalculationTestCase_36_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.117647058823529411764705882', '2.117647058823529411764705882')
class CalculationTestCase_36_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2', '2')
class CalculationTestCase_36_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.894736842105263157894736842', '1.894736842105263157894736842')
class CalculationTestCase_36_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.8', '1.8')
class CalculationTestCase_36_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.714285714285714285714285714', '1.714285714285714285714285714')
class CalculationTestCase_36_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.636363636363636363636363636', '1.636363636363636363636363636')
class CalculationTestCase_36_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.565217391304347826086956522', '1.565217391304347826086956522')
class CalculationTestCase_36_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_36_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.44', '1.44')
class CalculationTestCase_36_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.384615384615384615384615385', '1.384615384615384615384615385')
class CalculationTestCase_36_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_36_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.285714285714285714285714286', '1.285714285714285714285714286')
class CalculationTestCase_36_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.241379310344827586206896552', '1.241379310344827586206896552')
class CalculationTestCase_36_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.2', '1.2')
class CalculationTestCase_36_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.161290322580645161290322581', '1.161290322580645161290322581')
class CalculationTestCase_36_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.125', '1.125')
class CalculationTestCase_36_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.090909090909090909090909091', '1.090909090909090909090909091')
class CalculationTestCase_36_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.058823529411764705882352941', '1.058823529411764705882352941')
class CalculationTestCase_36_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.028571428571428571428571429', '1.028571428571428571428571429')
class CalculationTestCase_36_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1', '1')
class CalculationTestCase_36_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('0.9729729729729729729729729730', '0.9729729729729729729729729730')
class CalculationTestCase_36_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.9473684210526315789473684211', '0.9473684210526315789473684211')
class CalculationTestCase_36_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.9230769230769230769230769231', '0.9230769230769230769230769231')
class CalculationTestCase_36_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.9', '0.9')
class CalculationTestCase_36_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.8780487804878048780487804878', '0.8780487804878048780487804878')
class CalculationTestCase_36_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.8571428571428571428571428571', '0.8571428571428571428571428571')
class CalculationTestCase_36_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.8372093023255813953488372093', '0.8372093023255813953488372093')
class CalculationTestCase_36_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.8181818181818181818181818182', '0.8181818181818181818181818182')
class CalculationTestCase_36_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.8', '0.8')
class CalculationTestCase_36_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.7826086956521739130434782609', '0.7826086956521739130434782609')
class CalculationTestCase_36_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.7659574468085106382978723404', '0.7659574468085106382978723404')
class CalculationTestCase_36_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.75', '0.75')
class CalculationTestCase_36_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.7346938775510204081632653061', '0.7346938775510204081632653061')
class CalculationTestCase_36_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 36 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.72', '0.72')
class CalculationTestCase_37_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_37_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('37', '37')
class CalculationTestCase_37_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('18.5', '18.5')
class CalculationTestCase_37_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('12.33333333333333333333333333', '12.33333333333333333333333333')
class CalculationTestCase_37_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('9.25', '9.25')
class CalculationTestCase_37_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('7.4', '7.4')
class CalculationTestCase_37_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('6.166666666666666666666666667', '6.166666666666666666666666667')
class CalculationTestCase_37_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('5.285714285714285714285714286', '5.285714285714285714285714286')
class CalculationTestCase_37_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('4.625', '4.625')
class CalculationTestCase_37_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('4.111111111111111111111111111', '4.111111111111111111111111111')
class CalculationTestCase_37_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('3.7', '3.7')
class CalculationTestCase_37_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('3.363636363636363636363636364', '3.363636363636363636363636364')
class CalculationTestCase_37_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3.083333333333333333333333333', '3.083333333333333333333333333')
class CalculationTestCase_37_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.846153846153846153846153846', '2.846153846153846153846153846')
class CalculationTestCase_37_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.642857142857142857142857143', '2.642857142857142857142857143')
class CalculationTestCase_37_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.466666666666666666666666667', '2.466666666666666666666666667')
class CalculationTestCase_37_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.3125', '2.3125')
class CalculationTestCase_37_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.176470588235294117647058824', '2.176470588235294117647058824')
class CalculationTestCase_37_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.055555555555555555555555556', '2.055555555555555555555555556')
class CalculationTestCase_37_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('1.947368421052631578947368421', '1.947368421052631578947368421')
class CalculationTestCase_37_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.85', '1.85')
class CalculationTestCase_37_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.761904761904761904761904762', '1.761904761904761904761904762')
class CalculationTestCase_37_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.681818181818181818181818182', '1.681818181818181818181818182')
class CalculationTestCase_37_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.608695652173913043478260870', '1.608695652173913043478260870')
class CalculationTestCase_37_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.541666666666666666666666667', '1.541666666666666666666666667')
class CalculationTestCase_37_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.48', '1.48')
class CalculationTestCase_37_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.423076923076923076923076923', '1.423076923076923076923076923')
class CalculationTestCase_37_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.370370370370370370370370370', '1.370370370370370370370370370')
class CalculationTestCase_37_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.321428571428571428571428571', '1.321428571428571428571428571')
class CalculationTestCase_37_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.275862068965517241379310345', '1.275862068965517241379310345')
class CalculationTestCase_37_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.233333333333333333333333333', '1.233333333333333333333333333')
class CalculationTestCase_37_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.193548387096774193548387097', '1.193548387096774193548387097')
class CalculationTestCase_37_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.15625', '1.15625')
class CalculationTestCase_37_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.121212121212121212121212121', '1.121212121212121212121212121')
class CalculationTestCase_37_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.088235294117647058823529412', '1.088235294117647058823529412')
class CalculationTestCase_37_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.057142857142857142857142857', '1.057142857142857142857142857')
class CalculationTestCase_37_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.027777777777777777777777778', '1.027777777777777777777777778')
class CalculationTestCase_37_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1', '1')
class CalculationTestCase_37_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('0.9736842105263157894736842105', '0.9736842105263157894736842105')
class CalculationTestCase_37_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.9487179487179487179487179487', '0.9487179487179487179487179487')
class CalculationTestCase_37_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.925', '0.925')
class CalculationTestCase_37_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.9024390243902439024390243902', '0.9024390243902439024390243902')
class CalculationTestCase_37_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.8809523809523809523809523810', '0.8809523809523809523809523810')
class CalculationTestCase_37_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.8604651162790697674418604651', '0.8604651162790697674418604651')
class CalculationTestCase_37_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.8409090909090909090909090909', '0.8409090909090909090909090909')
class CalculationTestCase_37_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.8222222222222222222222222222', '0.8222222222222222222222222222')
class CalculationTestCase_37_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.8043478260869565217391304348', '0.8043478260869565217391304348')
class CalculationTestCase_37_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.7872340425531914893617021277', '0.7872340425531914893617021277')
class CalculationTestCase_37_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.7708333333333333333333333333', '0.7708333333333333333333333333')
class CalculationTestCase_37_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.7551020408163265306122448980', '0.7551020408163265306122448980')
class CalculationTestCase_37_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 37 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.74', '0.74')
class CalculationTestCase_38_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_38_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('38', '38')
class CalculationTestCase_38_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('19', '19')
class CalculationTestCase_38_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('12.66666666666666666666666667', '12.66666666666666666666666667')
class CalculationTestCase_38_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('9.5', '9.5')
class CalculationTestCase_38_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('7.6', '7.6')
class CalculationTestCase_38_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('6.333333333333333333333333333', '6.333333333333333333333333333')
class CalculationTestCase_38_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('5.428571428571428571428571429', '5.428571428571428571428571429')
class CalculationTestCase_38_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('4.75', '4.75')
class CalculationTestCase_38_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('4.222222222222222222222222222', '4.222222222222222222222222222')
class CalculationTestCase_38_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('3.8', '3.8')
class CalculationTestCase_38_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('3.454545454545454545454545455', '3.454545454545454545454545455')
class CalculationTestCase_38_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3.166666666666666666666666667', '3.166666666666666666666666667')
class CalculationTestCase_38_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('2.923076923076923076923076923', '2.923076923076923076923076923')
class CalculationTestCase_38_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.714285714285714285714285714', '2.714285714285714285714285714')
class CalculationTestCase_38_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.533333333333333333333333333', '2.533333333333333333333333333')
class CalculationTestCase_38_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.375', '2.375')
class CalculationTestCase_38_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.235294117647058823529411765', '2.235294117647058823529411765')
class CalculationTestCase_38_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.111111111111111111111111111', '2.111111111111111111111111111')
class CalculationTestCase_38_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2', '2')
class CalculationTestCase_38_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.9', '1.9')
class CalculationTestCase_38_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.809523809523809523809523810', '1.809523809523809523809523810')
class CalculationTestCase_38_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.727272727272727272727272727', '1.727272727272727272727272727')
class CalculationTestCase_38_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.652173913043478260869565217', '1.652173913043478260869565217')
class CalculationTestCase_38_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.583333333333333333333333333', '1.583333333333333333333333333')
class CalculationTestCase_38_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.52', '1.52')
class CalculationTestCase_38_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.461538461538461538461538462', '1.461538461538461538461538462')
class CalculationTestCase_38_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.407407407407407407407407407', '1.407407407407407407407407407')
class CalculationTestCase_38_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.357142857142857142857142857', '1.357142857142857142857142857')
class CalculationTestCase_38_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.310344827586206896551724138', '1.310344827586206896551724138')
class CalculationTestCase_38_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.266666666666666666666666667', '1.266666666666666666666666667')
class CalculationTestCase_38_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.225806451612903225806451613', '1.225806451612903225806451613')
class CalculationTestCase_38_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.1875', '1.1875')
class CalculationTestCase_38_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.151515151515151515151515152', '1.151515151515151515151515152')
class CalculationTestCase_38_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.117647058823529411764705882', '1.117647058823529411764705882')
class CalculationTestCase_38_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.085714285714285714285714286', '1.085714285714285714285714286')
class CalculationTestCase_38_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.055555555555555555555555556', '1.055555555555555555555555556')
class CalculationTestCase_38_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.027027027027027027027027027', '1.027027027027027027027027027')
class CalculationTestCase_38_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1', '1')
class CalculationTestCase_38_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('0.9743589743589743589743589744', '0.9743589743589743589743589744')
class CalculationTestCase_38_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.95', '0.95')
class CalculationTestCase_38_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.9268292682926829268292682927', '0.9268292682926829268292682927')
class CalculationTestCase_38_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.9047619047619047619047619048', '0.9047619047619047619047619048')
class CalculationTestCase_38_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.8837209302325581395348837209', '0.8837209302325581395348837209')
class CalculationTestCase_38_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.8636363636363636363636363636', '0.8636363636363636363636363636')
class CalculationTestCase_38_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.8444444444444444444444444444', '0.8444444444444444444444444444')
class CalculationTestCase_38_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.8260869565217391304347826087', '0.8260869565217391304347826087')
class CalculationTestCase_38_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.8085106382978723404255319149', '0.8085106382978723404255319149')
class CalculationTestCase_38_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.7916666666666666666666666667', '0.7916666666666666666666666667')
class CalculationTestCase_38_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.7755102040816326530612244898', '0.7755102040816326530612244898')
class CalculationTestCase_38_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 38 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.76', '0.76')
class CalculationTestCase_39_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_39_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('39', '39')
class CalculationTestCase_39_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('19.5', '19.5')
class CalculationTestCase_39_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('13', '13')
class CalculationTestCase_39_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('9.75', '9.75')
class CalculationTestCase_39_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('7.8', '7.8')
class CalculationTestCase_39_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('6.5', '6.5')
class CalculationTestCase_39_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('5.571428571428571428571428571', '5.571428571428571428571428571')
class CalculationTestCase_39_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('4.875', '4.875')
class CalculationTestCase_39_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('4.333333333333333333333333333', '4.333333333333333333333333333')
class CalculationTestCase_39_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('3.9', '3.9')
class CalculationTestCase_39_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('3.545454545454545454545454545', '3.545454545454545454545454545')
class CalculationTestCase_39_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3.25', '3.25')
class CalculationTestCase_39_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3', '3')
class CalculationTestCase_39_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.785714285714285714285714286', '2.785714285714285714285714286')
class CalculationTestCase_39_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.6', '2.6')
class CalculationTestCase_39_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.4375', '2.4375')
class CalculationTestCase_39_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.294117647058823529411764706', '2.294117647058823529411764706')
class CalculationTestCase_39_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.166666666666666666666666667', '2.166666666666666666666666667')
class CalculationTestCase_39_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.052631578947368421052631579', '2.052631578947368421052631579')
class CalculationTestCase_39_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('1.95', '1.95')
class CalculationTestCase_39_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.857142857142857142857142857', '1.857142857142857142857142857')
class CalculationTestCase_39_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.772727272727272727272727273', '1.772727272727272727272727273')
class CalculationTestCase_39_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.695652173913043478260869565', '1.695652173913043478260869565')
class CalculationTestCase_39_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.625', '1.625')
class CalculationTestCase_39_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.56', '1.56')
class CalculationTestCase_39_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_39_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.444444444444444444444444444', '1.444444444444444444444444444')
class CalculationTestCase_39_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.392857142857142857142857143', '1.392857142857142857142857143')
class CalculationTestCase_39_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.344827586206896551724137931', '1.344827586206896551724137931')
class CalculationTestCase_39_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.3', '1.3')
class CalculationTestCase_39_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.258064516129032258064516129', '1.258064516129032258064516129')
class CalculationTestCase_39_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.21875', '1.21875')
class CalculationTestCase_39_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.181818181818181818181818182', '1.181818181818181818181818182')
class CalculationTestCase_39_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.147058823529411764705882353', '1.147058823529411764705882353')
class CalculationTestCase_39_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.114285714285714285714285714', '1.114285714285714285714285714')
class CalculationTestCase_39_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.083333333333333333333333333', '1.083333333333333333333333333')
class CalculationTestCase_39_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.054054054054054054054054054', '1.054054054054054054054054054')
class CalculationTestCase_39_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.026315789473684210526315789', '1.026315789473684210526315789')
class CalculationTestCase_39_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1', '1')
class CalculationTestCase_39_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('0.975', '0.975')
class CalculationTestCase_39_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.9512195121951219512195121951', '0.9512195121951219512195121951')
class CalculationTestCase_39_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.9285714285714285714285714286', '0.9285714285714285714285714286')
class CalculationTestCase_39_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.9069767441860465116279069767', '0.9069767441860465116279069767')
class CalculationTestCase_39_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.8863636363636363636363636364', '0.8863636363636363636363636364')
class CalculationTestCase_39_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.8666666666666666666666666667', '0.8666666666666666666666666667')
class CalculationTestCase_39_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.8478260869565217391304347826', '0.8478260869565217391304347826')
class CalculationTestCase_39_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.8297872340425531914893617021', '0.8297872340425531914893617021')
class CalculationTestCase_39_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.8125', '0.8125')
class CalculationTestCase_39_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.7959183673469387755102040816', '0.7959183673469387755102040816')
class CalculationTestCase_39_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 39 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.78', '0.78')
class CalculationTestCase_40_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_40_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('40', '40')
class CalculationTestCase_40_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('20', '20')
class CalculationTestCase_40_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('13.33333333333333333333333333', '13.33333333333333333333333333')
class CalculationTestCase_40_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('10', '10')
class CalculationTestCase_40_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('8', '8')
class CalculationTestCase_40_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('6.666666666666666666666666667', '6.666666666666666666666666667')
class CalculationTestCase_40_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('5.714285714285714285714285714', '5.714285714285714285714285714')
class CalculationTestCase_40_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('5', '5')
class CalculationTestCase_40_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('4.444444444444444444444444444', '4.444444444444444444444444444')
class CalculationTestCase_40_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('4', '4')
class CalculationTestCase_40_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('3.636363636363636363636363636', '3.636363636363636363636363636')
class CalculationTestCase_40_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3.333333333333333333333333333', '3.333333333333333333333333333')
class CalculationTestCase_40_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3.076923076923076923076923077', '3.076923076923076923076923077')
class CalculationTestCase_40_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.857142857142857142857142857', '2.857142857142857142857142857')
class CalculationTestCase_40_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.666666666666666666666666667', '2.666666666666666666666666667')
class CalculationTestCase_40_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.5', '2.5')
class CalculationTestCase_40_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.352941176470588235294117647', '2.352941176470588235294117647')
class CalculationTestCase_40_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.222222222222222222222222222', '2.222222222222222222222222222')
class CalculationTestCase_40_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.105263157894736842105263158', '2.105263157894736842105263158')
class CalculationTestCase_40_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('2', '2')
class CalculationTestCase_40_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.904761904761904761904761905', '1.904761904761904761904761905')
class CalculationTestCase_40_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.818181818181818181818181818', '1.818181818181818181818181818')
class CalculationTestCase_40_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.739130434782608695652173913', '1.739130434782608695652173913')
class CalculationTestCase_40_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.666666666666666666666666667', '1.666666666666666666666666667')
class CalculationTestCase_40_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.6', '1.6')
class CalculationTestCase_40_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.538461538461538461538461538', '1.538461538461538461538461538')
class CalculationTestCase_40_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.481481481481481481481481481', '1.481481481481481481481481481')
class CalculationTestCase_40_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.428571428571428571428571429', '1.428571428571428571428571429')
class CalculationTestCase_40_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.379310344827586206896551724', '1.379310344827586206896551724')
class CalculationTestCase_40_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_40_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.290322580645161290322580645', '1.290322580645161290322580645')
class CalculationTestCase_40_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.25', '1.25')
class CalculationTestCase_40_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.212121212121212121212121212', '1.212121212121212121212121212')
class CalculationTestCase_40_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.176470588235294117647058824', '1.176470588235294117647058824')
class CalculationTestCase_40_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.142857142857142857142857143', '1.142857142857142857142857143')
class CalculationTestCase_40_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.111111111111111111111111111', '1.111111111111111111111111111')
class CalculationTestCase_40_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.081081081081081081081081081', '1.081081081081081081081081081')
class CalculationTestCase_40_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.052631578947368421052631579', '1.052631578947368421052631579')
class CalculationTestCase_40_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1.025641025641025641025641026', '1.025641025641025641025641026')
class CalculationTestCase_40_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('1', '1')
class CalculationTestCase_40_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('0.9756097560975609756097560976', '0.9756097560975609756097560976')
class CalculationTestCase_40_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.9523809523809523809523809524', '0.9523809523809523809523809524')
class CalculationTestCase_40_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.9302325581395348837209302326', '0.9302325581395348837209302326')
class CalculationTestCase_40_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.9090909090909090909090909091', '0.9090909090909090909090909091')
class CalculationTestCase_40_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.8888888888888888888888888889', '0.8888888888888888888888888889')
class CalculationTestCase_40_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.8695652173913043478260869565', '0.8695652173913043478260869565')
class CalculationTestCase_40_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.8510638297872340425531914894', '0.8510638297872340425531914894')
class CalculationTestCase_40_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.8333333333333333333333333333', '0.8333333333333333333333333333')
class CalculationTestCase_40_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.8163265306122448979591836735', '0.8163265306122448979591836735')
class CalculationTestCase_40_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 40 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.8', '0.8')
class CalculationTestCase_41_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_41_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('41', '41')
class CalculationTestCase_41_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('20.5', '20.5')
class CalculationTestCase_41_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('13.66666666666666666666666667', '13.66666666666666666666666667')
class CalculationTestCase_41_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('10.25', '10.25')
class CalculationTestCase_41_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('8.2', '8.2')
class CalculationTestCase_41_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('6.833333333333333333333333333', '6.833333333333333333333333333')
class CalculationTestCase_41_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('5.857142857142857142857142857', '5.857142857142857142857142857')
class CalculationTestCase_41_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('5.125', '5.125')
class CalculationTestCase_41_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('4.555555555555555555555555556', '4.555555555555555555555555556')
class CalculationTestCase_41_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('4.1', '4.1')
class CalculationTestCase_41_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('3.727272727272727272727272727', '3.727272727272727272727272727')
class CalculationTestCase_41_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3.416666666666666666666666667', '3.416666666666666666666666667')
class CalculationTestCase_41_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3.153846153846153846153846154', '3.153846153846153846153846154')
class CalculationTestCase_41_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('2.928571428571428571428571429', '2.928571428571428571428571429')
class CalculationTestCase_41_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.733333333333333333333333333', '2.733333333333333333333333333')
class CalculationTestCase_41_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.5625', '2.5625')
class CalculationTestCase_41_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.411764705882352941176470588', '2.411764705882352941176470588')
class CalculationTestCase_41_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.277777777777777777777777778', '2.277777777777777777777777778')
class CalculationTestCase_41_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.157894736842105263157894737', '2.157894736842105263157894737')
class CalculationTestCase_41_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('2.05', '2.05')
class CalculationTestCase_41_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('1.952380952380952380952380952', '1.952380952380952380952380952')
class CalculationTestCase_41_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.863636363636363636363636364', '1.863636363636363636363636364')
class CalculationTestCase_41_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.782608695652173913043478261', '1.782608695652173913043478261')
class CalculationTestCase_41_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.708333333333333333333333333', '1.708333333333333333333333333')
class CalculationTestCase_41_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.64', '1.64')
class CalculationTestCase_41_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.576923076923076923076923077', '1.576923076923076923076923077')
class CalculationTestCase_41_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.518518518518518518518518519', '1.518518518518518518518518519')
class CalculationTestCase_41_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.464285714285714285714285714', '1.464285714285714285714285714')
class CalculationTestCase_41_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.413793103448275862068965517', '1.413793103448275862068965517')
class CalculationTestCase_41_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.366666666666666666666666667', '1.366666666666666666666666667')
class CalculationTestCase_41_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.322580645161290322580645161', '1.322580645161290322580645161')
class CalculationTestCase_41_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.28125', '1.28125')
class CalculationTestCase_41_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.242424242424242424242424242', '1.242424242424242424242424242')
class CalculationTestCase_41_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.205882352941176470588235294', '1.205882352941176470588235294')
class CalculationTestCase_41_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.171428571428571428571428571', '1.171428571428571428571428571')
class CalculationTestCase_41_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.138888888888888888888888889', '1.138888888888888888888888889')
class CalculationTestCase_41_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.108108108108108108108108108', '1.108108108108108108108108108')
class CalculationTestCase_41_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.078947368421052631578947368', '1.078947368421052631578947368')
class CalculationTestCase_41_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1.051282051282051282051282051', '1.051282051282051282051282051')
class CalculationTestCase_41_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('1.025', '1.025')
class CalculationTestCase_41_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('1', '1')
class CalculationTestCase_41_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('0.9761904761904761904761904762', '0.9761904761904761904761904762')
class CalculationTestCase_41_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.9534883720930232558139534884', '0.9534883720930232558139534884')
class CalculationTestCase_41_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.9318181818181818181818181818', '0.9318181818181818181818181818')
class CalculationTestCase_41_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.9111111111111111111111111111', '0.9111111111111111111111111111')
class CalculationTestCase_41_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.8913043478260869565217391304', '0.8913043478260869565217391304')
class CalculationTestCase_41_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.8723404255319148936170212766', '0.8723404255319148936170212766')
class CalculationTestCase_41_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.8541666666666666666666666667', '0.8541666666666666666666666667')
class CalculationTestCase_41_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.8367346938775510204081632653', '0.8367346938775510204081632653')
class CalculationTestCase_41_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 41 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.82', '0.82')
class CalculationTestCase_42_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_42_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('42', '42')
class CalculationTestCase_42_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('21', '21')
class CalculationTestCase_42_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('14', '14')
class CalculationTestCase_42_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('10.5', '10.5')
class CalculationTestCase_42_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('8.4', '8.4')
class CalculationTestCase_42_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('7', '7')
class CalculationTestCase_42_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('6', '6')
class CalculationTestCase_42_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('5.25', '5.25')
class CalculationTestCase_42_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('4.666666666666666666666666667', '4.666666666666666666666666667')
class CalculationTestCase_42_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('4.2', '4.2')
class CalculationTestCase_42_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('3.818181818181818181818181818', '3.818181818181818181818181818')
class CalculationTestCase_42_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3.5', '3.5')
class CalculationTestCase_42_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3.230769230769230769230769231', '3.230769230769230769230769231')
class CalculationTestCase_42_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('3', '3')
class CalculationTestCase_42_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.8', '2.8')
class CalculationTestCase_42_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.625', '2.625')
class CalculationTestCase_42_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.470588235294117647058823529', '2.470588235294117647058823529')
class CalculationTestCase_42_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.333333333333333333333333333', '2.333333333333333333333333333')
class CalculationTestCase_42_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.210526315789473684210526316', '2.210526315789473684210526316')
class CalculationTestCase_42_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('2.1', '2.1')
class CalculationTestCase_42_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('2', '2')
class CalculationTestCase_42_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.909090909090909090909090909', '1.909090909090909090909090909')
class CalculationTestCase_42_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.826086956521739130434782609', '1.826086956521739130434782609')
class CalculationTestCase_42_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.75', '1.75')
class CalculationTestCase_42_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.68', '1.68')
class CalculationTestCase_42_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.615384615384615384615384615', '1.615384615384615384615384615')
class CalculationTestCase_42_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.555555555555555555555555556', '1.555555555555555555555555556')
class CalculationTestCase_42_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_42_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.448275862068965517241379310', '1.448275862068965517241379310')
class CalculationTestCase_42_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.4', '1.4')
class CalculationTestCase_42_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.354838709677419354838709677', '1.354838709677419354838709677')
class CalculationTestCase_42_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.3125', '1.3125')
class CalculationTestCase_42_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.272727272727272727272727273', '1.272727272727272727272727273')
class CalculationTestCase_42_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.235294117647058823529411765', '1.235294117647058823529411765')
class CalculationTestCase_42_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.2', '1.2')
class CalculationTestCase_42_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.166666666666666666666666667', '1.166666666666666666666666667')
class CalculationTestCase_42_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.135135135135135135135135135', '1.135135135135135135135135135')
class CalculationTestCase_42_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.105263157894736842105263158', '1.105263157894736842105263158')
class CalculationTestCase_42_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1.076923076923076923076923077', '1.076923076923076923076923077')
class CalculationTestCase_42_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('1.05', '1.05')
class CalculationTestCase_42_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('1.024390243902439024390243902', '1.024390243902439024390243902')
class CalculationTestCase_42_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('1', '1')
class CalculationTestCase_42_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('0.9767441860465116279069767442', '0.9767441860465116279069767442')
class CalculationTestCase_42_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.9545454545454545454545454545', '0.9545454545454545454545454545')
class CalculationTestCase_42_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.9333333333333333333333333333', '0.9333333333333333333333333333')
class CalculationTestCase_42_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.9130434782608695652173913043', '0.9130434782608695652173913043')
class CalculationTestCase_42_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.8936170212765957446808510638', '0.8936170212765957446808510638')
class CalculationTestCase_42_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.875', '0.875')
class CalculationTestCase_42_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.8571428571428571428571428571', '0.8571428571428571428571428571')
class CalculationTestCase_42_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 42 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.84', '0.84')
class CalculationTestCase_43_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_43_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('43', '43')
class CalculationTestCase_43_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('21.5', '21.5')
class CalculationTestCase_43_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('14.33333333333333333333333333', '14.33333333333333333333333333')
class CalculationTestCase_43_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('10.75', '10.75')
class CalculationTestCase_43_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('8.6', '8.6')
class CalculationTestCase_43_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('7.166666666666666666666666667', '7.166666666666666666666666667')
class CalculationTestCase_43_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('6.142857142857142857142857143', '6.142857142857142857142857143')
class CalculationTestCase_43_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('5.375', '5.375')
class CalculationTestCase_43_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('4.777777777777777777777777778', '4.777777777777777777777777778')
class CalculationTestCase_43_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('4.3', '4.3')
class CalculationTestCase_43_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('3.909090909090909090909090909', '3.909090909090909090909090909')
class CalculationTestCase_43_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3.583333333333333333333333333', '3.583333333333333333333333333')
class CalculationTestCase_43_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3.307692307692307692307692308', '3.307692307692307692307692308')
class CalculationTestCase_43_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('3.071428571428571428571428571', '3.071428571428571428571428571')
class CalculationTestCase_43_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.866666666666666666666666667', '2.866666666666666666666666667')
class CalculationTestCase_43_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.6875', '2.6875')
class CalculationTestCase_43_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.529411764705882352941176471', '2.529411764705882352941176471')
class CalculationTestCase_43_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.388888888888888888888888889', '2.388888888888888888888888889')
class CalculationTestCase_43_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.263157894736842105263157895', '2.263157894736842105263157895')
class CalculationTestCase_43_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('2.15', '2.15')
class CalculationTestCase_43_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('2.047619047619047619047619048', '2.047619047619047619047619048')
class CalculationTestCase_43_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('1.954545454545454545454545455', '1.954545454545454545454545455')
class CalculationTestCase_43_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.869565217391304347826086957', '1.869565217391304347826086957')
class CalculationTestCase_43_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.791666666666666666666666667', '1.791666666666666666666666667')
class CalculationTestCase_43_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.72', '1.72')
class CalculationTestCase_43_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.653846153846153846153846154', '1.653846153846153846153846154')
class CalculationTestCase_43_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.592592592592592592592592593', '1.592592592592592592592592593')
class CalculationTestCase_43_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.535714285714285714285714286', '1.535714285714285714285714286')
class CalculationTestCase_43_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.482758620689655172413793103', '1.482758620689655172413793103')
class CalculationTestCase_43_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.433333333333333333333333333', '1.433333333333333333333333333')
class CalculationTestCase_43_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.387096774193548387096774194', '1.387096774193548387096774194')
class CalculationTestCase_43_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.34375', '1.34375')
class CalculationTestCase_43_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.303030303030303030303030303', '1.303030303030303030303030303')
class CalculationTestCase_43_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.264705882352941176470588235', '1.264705882352941176470588235')
class CalculationTestCase_43_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.228571428571428571428571429', '1.228571428571428571428571429')
class CalculationTestCase_43_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.194444444444444444444444444', '1.194444444444444444444444444')
class CalculationTestCase_43_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.162162162162162162162162162', '1.162162162162162162162162162')
class CalculationTestCase_43_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.131578947368421052631578947', '1.131578947368421052631578947')
class CalculationTestCase_43_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1.102564102564102564102564103', '1.102564102564102564102564103')
class CalculationTestCase_43_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('1.075', '1.075')
class CalculationTestCase_43_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('1.048780487804878048780487805', '1.048780487804878048780487805')
class CalculationTestCase_43_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('1.023809523809523809523809524', '1.023809523809523809523809524')
class CalculationTestCase_43_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('1', '1')
class CalculationTestCase_43_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('0.9772727272727272727272727273', '0.9772727272727272727272727273')
class CalculationTestCase_43_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.9555555555555555555555555556', '0.9555555555555555555555555556')
class CalculationTestCase_43_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.9347826086956521739130434783', '0.9347826086956521739130434783')
class CalculationTestCase_43_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.9148936170212765957446808511', '0.9148936170212765957446808511')
class CalculationTestCase_43_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.8958333333333333333333333333', '0.8958333333333333333333333333')
class CalculationTestCase_43_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.8775510204081632653061224490', '0.8775510204081632653061224490')
class CalculationTestCase_43_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 43 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.86', '0.86')
class CalculationTestCase_44_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_44_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('44', '44')
class CalculationTestCase_44_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('22', '22')
class CalculationTestCase_44_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('14.66666666666666666666666667', '14.66666666666666666666666667')
class CalculationTestCase_44_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('11', '11')
class CalculationTestCase_44_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('8.8', '8.8')
class CalculationTestCase_44_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('7.333333333333333333333333333', '7.333333333333333333333333333')
class CalculationTestCase_44_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('6.285714285714285714285714286', '6.285714285714285714285714286')
class CalculationTestCase_44_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('5.5', '5.5')
class CalculationTestCase_44_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('4.888888888888888888888888889', '4.888888888888888888888888889')
class CalculationTestCase_44_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('4.4', '4.4')
class CalculationTestCase_44_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('4', '4')
class CalculationTestCase_44_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3.666666666666666666666666667', '3.666666666666666666666666667')
class CalculationTestCase_44_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3.384615384615384615384615385', '3.384615384615384615384615385')
class CalculationTestCase_44_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('3.142857142857142857142857143', '3.142857142857142857142857143')
class CalculationTestCase_44_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('2.933333333333333333333333333', '2.933333333333333333333333333')
class CalculationTestCase_44_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.75', '2.75')
class CalculationTestCase_44_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.588235294117647058823529412', '2.588235294117647058823529412')
class CalculationTestCase_44_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.444444444444444444444444444', '2.444444444444444444444444444')
class CalculationTestCase_44_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.315789473684210526315789474', '2.315789473684210526315789474')
class CalculationTestCase_44_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('2.2', '2.2')
class CalculationTestCase_44_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('2.095238095238095238095238095', '2.095238095238095238095238095')
class CalculationTestCase_44_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('2', '2')
class CalculationTestCase_44_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.913043478260869565217391304', '1.913043478260869565217391304')
class CalculationTestCase_44_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.833333333333333333333333333', '1.833333333333333333333333333')
class CalculationTestCase_44_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.76', '1.76')
class CalculationTestCase_44_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.692307692307692307692307692', '1.692307692307692307692307692')
class CalculationTestCase_44_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.629629629629629629629629630', '1.629629629629629629629629630')
class CalculationTestCase_44_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.571428571428571428571428571', '1.571428571428571428571428571')
class CalculationTestCase_44_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.517241379310344827586206897', '1.517241379310344827586206897')
class CalculationTestCase_44_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.466666666666666666666666667', '1.466666666666666666666666667')
class CalculationTestCase_44_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.419354838709677419354838710', '1.419354838709677419354838710')
class CalculationTestCase_44_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.375', '1.375')
class CalculationTestCase_44_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_44_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.294117647058823529411764706', '1.294117647058823529411764706')
class CalculationTestCase_44_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.257142857142857142857142857', '1.257142857142857142857142857')
class CalculationTestCase_44_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.222222222222222222222222222', '1.222222222222222222222222222')
class CalculationTestCase_44_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.189189189189189189189189189', '1.189189189189189189189189189')
class CalculationTestCase_44_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.157894736842105263157894737', '1.157894736842105263157894737')
class CalculationTestCase_44_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1.128205128205128205128205128', '1.128205128205128205128205128')
class CalculationTestCase_44_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('1.1', '1.1')
class CalculationTestCase_44_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('1.073170731707317073170731707', '1.073170731707317073170731707')
class CalculationTestCase_44_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('1.047619047619047619047619048', '1.047619047619047619047619048')
class CalculationTestCase_44_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('1.023255813953488372093023256', '1.023255813953488372093023256')
class CalculationTestCase_44_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('1', '1')
class CalculationTestCase_44_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('0.9777777777777777777777777778', '0.9777777777777777777777777778')
class CalculationTestCase_44_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.9565217391304347826086956522', '0.9565217391304347826086956522')
class CalculationTestCase_44_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.9361702127659574468085106383', '0.9361702127659574468085106383')
class CalculationTestCase_44_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.9166666666666666666666666667', '0.9166666666666666666666666667')
class CalculationTestCase_44_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.8979591836734693877551020408', '0.8979591836734693877551020408')
class CalculationTestCase_44_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 44 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.88', '0.88')
class CalculationTestCase_45_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_45_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('45', '45')
class CalculationTestCase_45_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('22.5', '22.5')
class CalculationTestCase_45_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('15', '15')
class CalculationTestCase_45_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('11.25', '11.25')
class CalculationTestCase_45_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('9', '9')
class CalculationTestCase_45_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('7.5', '7.5')
class CalculationTestCase_45_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('6.428571428571428571428571429', '6.428571428571428571428571429')
class CalculationTestCase_45_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('5.625', '5.625')
class CalculationTestCase_45_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('5', '5')
class CalculationTestCase_45_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('4.5', '4.5')
class CalculationTestCase_45_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('4.090909090909090909090909091', '4.090909090909090909090909091')
class CalculationTestCase_45_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3.75', '3.75')
class CalculationTestCase_45_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3.461538461538461538461538462', '3.461538461538461538461538462')
class CalculationTestCase_45_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('3.214285714285714285714285714', '3.214285714285714285714285714')
class CalculationTestCase_45_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('3', '3')
class CalculationTestCase_45_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.8125', '2.8125')
class CalculationTestCase_45_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.647058823529411764705882353', '2.647058823529411764705882353')
class CalculationTestCase_45_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.5', '2.5')
class CalculationTestCase_45_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.368421052631578947368421053', '2.368421052631578947368421053')
class CalculationTestCase_45_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('2.25', '2.25')
class CalculationTestCase_45_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('2.142857142857142857142857143', '2.142857142857142857142857143')
class CalculationTestCase_45_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('2.045454545454545454545454545', '2.045454545454545454545454545')
class CalculationTestCase_45_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('1.956521739130434782608695652', '1.956521739130434782608695652')
class CalculationTestCase_45_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.875', '1.875')
class CalculationTestCase_45_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.8', '1.8')
class CalculationTestCase_45_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.730769230769230769230769231', '1.730769230769230769230769231')
class CalculationTestCase_45_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.666666666666666666666666667', '1.666666666666666666666666667')
class CalculationTestCase_45_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.607142857142857142857142857', '1.607142857142857142857142857')
class CalculationTestCase_45_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.551724137931034482758620690', '1.551724137931034482758620690')
class CalculationTestCase_45_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_45_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.451612903225806451612903226', '1.451612903225806451612903226')
class CalculationTestCase_45_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.40625', '1.40625')
class CalculationTestCase_45_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.363636363636363636363636364', '1.363636363636363636363636364')
class CalculationTestCase_45_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.323529411764705882352941176', '1.323529411764705882352941176')
class CalculationTestCase_45_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.285714285714285714285714286', '1.285714285714285714285714286')
class CalculationTestCase_45_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.25', '1.25')
class CalculationTestCase_45_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.216216216216216216216216216', '1.216216216216216216216216216')
class CalculationTestCase_45_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.184210526315789473684210526', '1.184210526315789473684210526')
class CalculationTestCase_45_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1.153846153846153846153846154', '1.153846153846153846153846154')
class CalculationTestCase_45_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('1.125', '1.125')
class CalculationTestCase_45_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('1.097560975609756097560975610', '1.097560975609756097560975610')
class CalculationTestCase_45_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('1.071428571428571428571428571', '1.071428571428571428571428571')
class CalculationTestCase_45_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('1.046511627906976744186046512', '1.046511627906976744186046512')
class CalculationTestCase_45_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('1.022727272727272727272727273', '1.022727272727272727272727273')
class CalculationTestCase_45_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('1', '1')
class CalculationTestCase_45_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('0.9782608695652173913043478261', '0.9782608695652173913043478261')
class CalculationTestCase_45_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.9574468085106382978723404255', '0.9574468085106382978723404255')
class CalculationTestCase_45_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.9375', '0.9375')
class CalculationTestCase_45_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.9183673469387755102040816327', '0.9183673469387755102040816327')
class CalculationTestCase_45_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 45 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.9', '0.9')
class CalculationTestCase_46_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_46_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('46', '46')
class CalculationTestCase_46_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('23', '23')
class CalculationTestCase_46_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('15.33333333333333333333333333', '15.33333333333333333333333333')
class CalculationTestCase_46_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('11.5', '11.5')
class CalculationTestCase_46_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('9.2', '9.2')
class CalculationTestCase_46_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('7.666666666666666666666666667', '7.666666666666666666666666667')
class CalculationTestCase_46_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('6.571428571428571428571428571', '6.571428571428571428571428571')
class CalculationTestCase_46_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('5.75', '5.75')
class CalculationTestCase_46_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('5.111111111111111111111111111', '5.111111111111111111111111111')
class CalculationTestCase_46_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('4.6', '4.6')
class CalculationTestCase_46_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('4.181818181818181818181818182', '4.181818181818181818181818182')
class CalculationTestCase_46_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3.833333333333333333333333333', '3.833333333333333333333333333')
class CalculationTestCase_46_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3.538461538461538461538461538', '3.538461538461538461538461538')
class CalculationTestCase_46_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('3.285714285714285714285714286', '3.285714285714285714285714286')
class CalculationTestCase_46_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('3.066666666666666666666666667', '3.066666666666666666666666667')
class CalculationTestCase_46_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.875', '2.875')
class CalculationTestCase_46_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.705882352941176470588235294', '2.705882352941176470588235294')
class CalculationTestCase_46_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.555555555555555555555555556', '2.555555555555555555555555556')
class CalculationTestCase_46_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.421052631578947368421052632', '2.421052631578947368421052632')
class CalculationTestCase_46_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('2.3', '2.3')
class CalculationTestCase_46_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('2.190476190476190476190476190', '2.190476190476190476190476190')
class CalculationTestCase_46_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('2.090909090909090909090909091', '2.090909090909090909090909091')
class CalculationTestCase_46_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('2', '2')
class CalculationTestCase_46_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.916666666666666666666666667', '1.916666666666666666666666667')
class CalculationTestCase_46_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.84', '1.84')
class CalculationTestCase_46_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.769230769230769230769230769', '1.769230769230769230769230769')
class CalculationTestCase_46_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.703703703703703703703703704', '1.703703703703703703703703704')
class CalculationTestCase_46_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.642857142857142857142857143', '1.642857142857142857142857143')
class CalculationTestCase_46_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.586206896551724137931034483', '1.586206896551724137931034483')
class CalculationTestCase_46_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.533333333333333333333333333', '1.533333333333333333333333333')
class CalculationTestCase_46_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.483870967741935483870967742', '1.483870967741935483870967742')
class CalculationTestCase_46_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.4375', '1.4375')
class CalculationTestCase_46_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.393939393939393939393939394', '1.393939393939393939393939394')
class CalculationTestCase_46_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.352941176470588235294117647', '1.352941176470588235294117647')
class CalculationTestCase_46_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.314285714285714285714285714', '1.314285714285714285714285714')
class CalculationTestCase_46_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.277777777777777777777777778', '1.277777777777777777777777778')
class CalculationTestCase_46_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.243243243243243243243243243', '1.243243243243243243243243243')
class CalculationTestCase_46_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.210526315789473684210526316', '1.210526315789473684210526316')
class CalculationTestCase_46_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1.179487179487179487179487179', '1.179487179487179487179487179')
class CalculationTestCase_46_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('1.15', '1.15')
class CalculationTestCase_46_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('1.121951219512195121951219512', '1.121951219512195121951219512')
class CalculationTestCase_46_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('1.095238095238095238095238095', '1.095238095238095238095238095')
class CalculationTestCase_46_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('1.069767441860465116279069767', '1.069767441860465116279069767')
class CalculationTestCase_46_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('1.045454545454545454545454545', '1.045454545454545454545454545')
class CalculationTestCase_46_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('1.022222222222222222222222222', '1.022222222222222222222222222')
class CalculationTestCase_46_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('1', '1')
class CalculationTestCase_46_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('0.9787234042553191489361702128', '0.9787234042553191489361702128')
class CalculationTestCase_46_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.9583333333333333333333333333', '0.9583333333333333333333333333')
class CalculationTestCase_46_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.9387755102040816326530612245', '0.9387755102040816326530612245')
class CalculationTestCase_46_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 46 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.92', '0.92')
class CalculationTestCase_47_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_47_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('47', '47')
class CalculationTestCase_47_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('23.5', '23.5')
class CalculationTestCase_47_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('15.66666666666666666666666667', '15.66666666666666666666666667')
class CalculationTestCase_47_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('11.75', '11.75')
class CalculationTestCase_47_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('9.4', '9.4')
class CalculationTestCase_47_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('7.833333333333333333333333333', '7.833333333333333333333333333')
class CalculationTestCase_47_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('6.714285714285714285714285714', '6.714285714285714285714285714')
class CalculationTestCase_47_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('5.875', '5.875')
class CalculationTestCase_47_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('5.222222222222222222222222222', '5.222222222222222222222222222')
class CalculationTestCase_47_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('4.7', '4.7')
class CalculationTestCase_47_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('4.272727272727272727272727273', '4.272727272727272727272727273')
class CalculationTestCase_47_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('3.916666666666666666666666667', '3.916666666666666666666666667')
class CalculationTestCase_47_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3.615384615384615384615384615', '3.615384615384615384615384615')
class CalculationTestCase_47_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('3.357142857142857142857142857', '3.357142857142857142857142857')
class CalculationTestCase_47_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('3.133333333333333333333333333', '3.133333333333333333333333333')
class CalculationTestCase_47_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('2.9375', '2.9375')
class CalculationTestCase_47_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.764705882352941176470588235', '2.764705882352941176470588235')
class CalculationTestCase_47_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.611111111111111111111111111', '2.611111111111111111111111111')
class CalculationTestCase_47_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.473684210526315789473684211', '2.473684210526315789473684211')
class CalculationTestCase_47_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('2.35', '2.35')
class CalculationTestCase_47_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('2.238095238095238095238095238', '2.238095238095238095238095238')
class CalculationTestCase_47_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('2.136363636363636363636363636', '2.136363636363636363636363636')
class CalculationTestCase_47_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('2.043478260869565217391304348', '2.043478260869565217391304348')
class CalculationTestCase_47_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('1.958333333333333333333333333', '1.958333333333333333333333333')
class CalculationTestCase_47_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.88', '1.88')
class CalculationTestCase_47_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.807692307692307692307692308', '1.807692307692307692307692308')
class CalculationTestCase_47_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.740740740740740740740740741', '1.740740740740740740740740741')
class CalculationTestCase_47_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.678571428571428571428571429', '1.678571428571428571428571429')
class CalculationTestCase_47_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.620689655172413793103448276', '1.620689655172413793103448276')
class CalculationTestCase_47_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.566666666666666666666666667', '1.566666666666666666666666667')
class CalculationTestCase_47_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.516129032258064516129032258', '1.516129032258064516129032258')
class CalculationTestCase_47_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.46875', '1.46875')
class CalculationTestCase_47_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.424242424242424242424242424', '1.424242424242424242424242424')
class CalculationTestCase_47_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.382352941176470588235294118', '1.382352941176470588235294118')
class CalculationTestCase_47_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.342857142857142857142857143', '1.342857142857142857142857143')
class CalculationTestCase_47_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.305555555555555555555555556', '1.305555555555555555555555556')
class CalculationTestCase_47_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.270270270270270270270270270', '1.270270270270270270270270270')
class CalculationTestCase_47_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.236842105263157894736842105', '1.236842105263157894736842105')
class CalculationTestCase_47_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1.205128205128205128205128205', '1.205128205128205128205128205')
class CalculationTestCase_47_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('1.175', '1.175')
class CalculationTestCase_47_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('1.146341463414634146341463415', '1.146341463414634146341463415')
class CalculationTestCase_47_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('1.119047619047619047619047619', '1.119047619047619047619047619')
class CalculationTestCase_47_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('1.093023255813953488372093023', '1.093023255813953488372093023')
class CalculationTestCase_47_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('1.068181818181818181818181818', '1.068181818181818181818181818')
class CalculationTestCase_47_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('1.044444444444444444444444444', '1.044444444444444444444444444')
class CalculationTestCase_47_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('1.021739130434782608695652174', '1.021739130434782608695652174')
class CalculationTestCase_47_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('1', '1')
class CalculationTestCase_47_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('0.9791666666666666666666666667', '0.9791666666666666666666666667')
class CalculationTestCase_47_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.9591836734693877551020408163', '0.9591836734693877551020408163')
class CalculationTestCase_47_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 47 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.94', '0.94')
class CalculationTestCase_48_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_48_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('48', '48')
class CalculationTestCase_48_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('24', '24')
class CalculationTestCase_48_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('16', '16')
class CalculationTestCase_48_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('12', '12')
class CalculationTestCase_48_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('9.6', '9.6')
class CalculationTestCase_48_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('8', '8')
class CalculationTestCase_48_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('6.857142857142857142857142857', '6.857142857142857142857142857')
class CalculationTestCase_48_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('6', '6')
class CalculationTestCase_48_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('5.333333333333333333333333333', '5.333333333333333333333333333')
class CalculationTestCase_48_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('4.8', '4.8')
class CalculationTestCase_48_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('4.363636363636363636363636364', '4.363636363636363636363636364')
class CalculationTestCase_48_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('4', '4')
class CalculationTestCase_48_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3.692307692307692307692307692', '3.692307692307692307692307692')
class CalculationTestCase_48_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('3.428571428571428571428571429', '3.428571428571428571428571429')
class CalculationTestCase_48_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('3.2', '3.2')
class CalculationTestCase_48_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('3', '3')
class CalculationTestCase_48_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.823529411764705882352941176', '2.823529411764705882352941176')
class CalculationTestCase_48_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.666666666666666666666666667', '2.666666666666666666666666667')
class CalculationTestCase_48_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.526315789473684210526315789', '2.526315789473684210526315789')
class CalculationTestCase_48_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('2.4', '2.4')
class CalculationTestCase_48_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('2.285714285714285714285714286', '2.285714285714285714285714286')
class CalculationTestCase_48_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('2.181818181818181818181818182', '2.181818181818181818181818182')
class CalculationTestCase_48_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('2.086956521739130434782608696', '2.086956521739130434782608696')
class CalculationTestCase_48_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('2', '2')
class CalculationTestCase_48_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.92', '1.92')
class CalculationTestCase_48_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.846153846153846153846153846', '1.846153846153846153846153846')
class CalculationTestCase_48_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.777777777777777777777777778', '1.777777777777777777777777778')
class CalculationTestCase_48_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.714285714285714285714285714', '1.714285714285714285714285714')
class CalculationTestCase_48_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.655172413793103448275862069', '1.655172413793103448275862069')
class CalculationTestCase_48_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.6', '1.6')
class CalculationTestCase_48_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.548387096774193548387096774', '1.548387096774193548387096774')
class CalculationTestCase_48_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.5', '1.5')
class CalculationTestCase_48_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.454545454545454545454545455', '1.454545454545454545454545455')
class CalculationTestCase_48_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.411764705882352941176470588', '1.411764705882352941176470588')
class CalculationTestCase_48_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.371428571428571428571428571', '1.371428571428571428571428571')
class CalculationTestCase_48_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.333333333333333333333333333', '1.333333333333333333333333333')
class CalculationTestCase_48_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.297297297297297297297297297', '1.297297297297297297297297297')
class CalculationTestCase_48_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.263157894736842105263157895', '1.263157894736842105263157895')
class CalculationTestCase_48_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1.230769230769230769230769231', '1.230769230769230769230769231')
class CalculationTestCase_48_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('1.2', '1.2')
class CalculationTestCase_48_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('1.170731707317073170731707317', '1.170731707317073170731707317')
class CalculationTestCase_48_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('1.142857142857142857142857143', '1.142857142857142857142857143')
class CalculationTestCase_48_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('1.116279069767441860465116279', '1.116279069767441860465116279')
class CalculationTestCase_48_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('1.090909090909090909090909091', '1.090909090909090909090909091')
class CalculationTestCase_48_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('1.066666666666666666666666667', '1.066666666666666666666666667')
class CalculationTestCase_48_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('1.043478260869565217391304348', '1.043478260869565217391304348')
class CalculationTestCase_48_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('1.021276595744680851063829787', '1.021276595744680851063829787')
class CalculationTestCase_48_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('1', '1')
class CalculationTestCase_48_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('0.9795918367346938775510204082', '0.9795918367346938775510204082')
class CalculationTestCase_48_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 48 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.96', '0.96')
class CalculationTestCase_49_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_49_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('49', '49')
class CalculationTestCase_49_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('24.5', '24.5')
class CalculationTestCase_49_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('16.33333333333333333333333333', '16.33333333333333333333333333')
class CalculationTestCase_49_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('12.25', '12.25')
class CalculationTestCase_49_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('9.8', '9.8')
class CalculationTestCase_49_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('8.166666666666666666666666667', '8.166666666666666666666666667')
class CalculationTestCase_49_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('7', '7')
class CalculationTestCase_49_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('6.125', '6.125')
class CalculationTestCase_49_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('5.444444444444444444444444444', '5.444444444444444444444444444')
class CalculationTestCase_49_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('4.9', '4.9')
class CalculationTestCase_49_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('4.454545454545454545454545455', '4.454545454545454545454545455')
class CalculationTestCase_49_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('4.083333333333333333333333333', '4.083333333333333333333333333')
class CalculationTestCase_49_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3.769230769230769230769230769', '3.769230769230769230769230769')
class CalculationTestCase_49_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('3.5', '3.5')
class CalculationTestCase_49_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('3.266666666666666666666666667', '3.266666666666666666666666667')
class CalculationTestCase_49_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('3.0625', '3.0625')
class CalculationTestCase_49_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.882352941176470588235294118', '2.882352941176470588235294118')
class CalculationTestCase_49_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.722222222222222222222222222', '2.722222222222222222222222222')
class CalculationTestCase_49_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.578947368421052631578947368', '2.578947368421052631578947368')
class CalculationTestCase_49_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('2.45', '2.45')
class CalculationTestCase_49_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('2.333333333333333333333333333', '2.333333333333333333333333333')
class CalculationTestCase_49_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('2.227272727272727272727272727', '2.227272727272727272727272727')
class CalculationTestCase_49_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('2.130434782608695652173913043', '2.130434782608695652173913043')
class CalculationTestCase_49_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('2.041666666666666666666666667', '2.041666666666666666666666667')
class CalculationTestCase_49_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('1.96', '1.96')
class CalculationTestCase_49_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.884615384615384615384615385', '1.884615384615384615384615385')
class CalculationTestCase_49_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.814814814814814814814814815', '1.814814814814814814814814815')
class CalculationTestCase_49_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.75', '1.75')
class CalculationTestCase_49_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.689655172413793103448275862', '1.689655172413793103448275862')
class CalculationTestCase_49_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.633333333333333333333333333', '1.633333333333333333333333333')
class CalculationTestCase_49_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.580645161290322580645161290', '1.580645161290322580645161290')
class CalculationTestCase_49_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.53125', '1.53125')
class CalculationTestCase_49_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.484848484848484848484848485', '1.484848484848484848484848485')
class CalculationTestCase_49_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.441176470588235294117647059', '1.441176470588235294117647059')
class CalculationTestCase_49_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.4', '1.4')
class CalculationTestCase_49_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.361111111111111111111111111', '1.361111111111111111111111111')
class CalculationTestCase_49_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.324324324324324324324324324', '1.324324324324324324324324324')
class CalculationTestCase_49_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.289473684210526315789473684', '1.289473684210526315789473684')
class CalculationTestCase_49_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1.256410256410256410256410256', '1.256410256410256410256410256')
class CalculationTestCase_49_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('1.225', '1.225')
class CalculationTestCase_49_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('1.195121951219512195121951220', '1.195121951219512195121951220')
class CalculationTestCase_49_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('1.166666666666666666666666667', '1.166666666666666666666666667')
class CalculationTestCase_49_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('1.139534883720930232558139535', '1.139534883720930232558139535')
class CalculationTestCase_49_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('1.113636363636363636363636364', '1.113636363636363636363636364')
class CalculationTestCase_49_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('1.088888888888888888888888889', '1.088888888888888888888888889')
class CalculationTestCase_49_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('1.065217391304347826086956522', '1.065217391304347826086956522')
class CalculationTestCase_49_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('1.042553191489361702127659574', '1.042553191489361702127659574')
class CalculationTestCase_49_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('1.020833333333333333333333333', '1.020833333333333333333333333')
class CalculationTestCase_49_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('1', '1')
class CalculationTestCase_49_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 49 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('0.98', '0.98')
class CalculationTestCase_50_division_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 0
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 0:
            self.assertEqual('Inf', 'Inf')
class CalculationTestCase_50_division_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 1
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 1:
            self.assertEqual('50', '50')
class CalculationTestCase_50_division_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 2
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 2:
            self.assertEqual('25', '25')
class CalculationTestCase_50_division_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 3
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 3:
            self.assertEqual('16.66666666666666666666666667', '16.66666666666666666666666667')
class CalculationTestCase_50_division_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 4
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 4:
            self.assertEqual('12.5', '12.5')
class CalculationTestCase_50_division_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 5
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 5:
            self.assertEqual('10', '10')
class CalculationTestCase_50_division_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 6
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 6:
            self.assertEqual('8.333333333333333333333333333', '8.333333333333333333333333333')
class CalculationTestCase_50_division_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 7
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 7:
            self.assertEqual('7.142857142857142857142857143', '7.142857142857142857142857143')
class CalculationTestCase_50_division_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 8
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 8:
            self.assertEqual('6.25', '6.25')
class CalculationTestCase_50_division_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 9
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 9:
            self.assertEqual('5.555555555555555555555555556', '5.555555555555555555555555556')
class CalculationTestCase_50_division_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 10
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 10:
            self.assertEqual('5', '5')
class CalculationTestCase_50_division_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 11
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 11:
            self.assertEqual('4.545454545454545454545454545', '4.545454545454545454545454545')
class CalculationTestCase_50_division_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 12
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 12:
            self.assertEqual('4.166666666666666666666666667', '4.166666666666666666666666667')
class CalculationTestCase_50_division_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 13
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 13:
            self.assertEqual('3.846153846153846153846153846', '3.846153846153846153846153846')
class CalculationTestCase_50_division_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 14
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 14:
            self.assertEqual('3.571428571428571428571428571', '3.571428571428571428571428571')
class CalculationTestCase_50_division_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 15
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 15:
            self.assertEqual('3.333333333333333333333333333', '3.333333333333333333333333333')
class CalculationTestCase_50_division_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 16
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 16:
            self.assertEqual('3.125', '3.125')
class CalculationTestCase_50_division_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 17
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 17:
            self.assertEqual('2.941176470588235294117647059', '2.941176470588235294117647059')
class CalculationTestCase_50_division_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 18
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 18:
            self.assertEqual('2.777777777777777777777777778', '2.777777777777777777777777778')
class CalculationTestCase_50_division_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 19
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 19:
            self.assertEqual('2.631578947368421052631578947', '2.631578947368421052631578947')
class CalculationTestCase_50_division_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 20
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 20:
            self.assertEqual('2.5', '2.5')
class CalculationTestCase_50_division_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 21
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 21:
            self.assertEqual('2.380952380952380952380952381', '2.380952380952380952380952381')
class CalculationTestCase_50_division_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 22
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 22:
            self.assertEqual('2.272727272727272727272727273', '2.272727272727272727272727273')
class CalculationTestCase_50_division_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 23
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 23:
            self.assertEqual('2.173913043478260869565217391', '2.173913043478260869565217391')
class CalculationTestCase_50_division_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 24
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 24:
            self.assertEqual('2.083333333333333333333333333', '2.083333333333333333333333333')
class CalculationTestCase_50_division_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 25
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 25:
            self.assertEqual('2', '2')
class CalculationTestCase_50_division_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 26
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 26:
            self.assertEqual('1.923076923076923076923076923', '1.923076923076923076923076923')
class CalculationTestCase_50_division_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 27
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 27:
            self.assertEqual('1.851851851851851851851851852', '1.851851851851851851851851852')
class CalculationTestCase_50_division_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 28
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 28:
            self.assertEqual('1.785714285714285714285714286', '1.785714285714285714285714286')
class CalculationTestCase_50_division_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 29
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 29:
            self.assertEqual('1.724137931034482758620689655', '1.724137931034482758620689655')
class CalculationTestCase_50_division_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 30
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 30:
            self.assertEqual('1.666666666666666666666666667', '1.666666666666666666666666667')
class CalculationTestCase_50_division_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 31
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 31:
            self.assertEqual('1.612903225806451612903225806', '1.612903225806451612903225806')
class CalculationTestCase_50_division_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 32
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 32:
            self.assertEqual('1.5625', '1.5625')
class CalculationTestCase_50_division_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 33
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 33:
            self.assertEqual('1.515151515151515151515151515', '1.515151515151515151515151515')
class CalculationTestCase_50_division_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 34
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 34:
            self.assertEqual('1.470588235294117647058823529', '1.470588235294117647058823529')
class CalculationTestCase_50_division_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 35
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 35:
            self.assertEqual('1.428571428571428571428571429', '1.428571428571428571428571429')
class CalculationTestCase_50_division_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 36
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 36:
            self.assertEqual('1.388888888888888888888888889', '1.388888888888888888888888889')
class CalculationTestCase_50_division_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 37
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 37:
            self.assertEqual('1.351351351351351351351351351', '1.351351351351351351351351351')
class CalculationTestCase_50_division_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 38
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 38:
            self.assertEqual('1.315789473684210526315789474', '1.315789473684210526315789474')
class CalculationTestCase_50_division_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 39
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 39:
            self.assertEqual('1.282051282051282051282051282', '1.282051282051282051282051282')
class CalculationTestCase_50_division_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 40
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 40:
            self.assertEqual('1.25', '1.25')
class CalculationTestCase_50_division_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 41
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 41:
            self.assertEqual('1.219512195121951219512195122', '1.219512195121951219512195122')
class CalculationTestCase_50_division_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 42
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 42:
            self.assertEqual('1.190476190476190476190476190', '1.190476190476190476190476190')
class CalculationTestCase_50_division_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 43
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 43:
            self.assertEqual('1.162790697674418604651162791', '1.162790697674418604651162791')
class CalculationTestCase_50_division_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 44
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 44:
            self.assertEqual('1.136363636363636363636363636', '1.136363636363636363636363636')
class CalculationTestCase_50_division_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 45
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 45:
            self.assertEqual('1.111111111111111111111111111', '1.111111111111111111111111111')
class CalculationTestCase_50_division_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 46
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 46:
            self.assertEqual('1.086956521739130434782608696', '1.086956521739130434782608696')
class CalculationTestCase_50_division_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 47
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 47:
            self.assertEqual('1.063829787234042553191489362', '1.063829787234042553191489362')
class CalculationTestCase_50_division_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 48
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 48:
            self.assertEqual('1.041666666666666666666666667', '1.041666666666666666666666667')
class CalculationTestCase_50_division_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 49
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 49:
            self.assertEqual('1.020408163265306122448979592', '1.020408163265306122448979592')
class CalculationTestCase_50_division_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 50
        self.sign = '/'
        if self.num1 == 50 and self.sign == '/' and self.num2 == 50:
            self.assertEqual('1', '1')
class CalculationTestCase_0_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('0', '0')
class CalculationTestCase_0_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 0
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 0 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('0', '0')
class CalculationTestCase_1_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_1_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('1', '1')
class CalculationTestCase_1_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('2', '2')
class CalculationTestCase_1_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('3', '3')
class CalculationTestCase_1_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('4', '4')
class CalculationTestCase_1_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('5', '5')
class CalculationTestCase_1_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('6', '6')
class CalculationTestCase_1_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('7', '7')
class CalculationTestCase_1_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('8', '8')
class CalculationTestCase_1_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('9', '9')
class CalculationTestCase_1_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('10', '10')
class CalculationTestCase_1_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('11', '11')
class CalculationTestCase_1_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('12', '12')
class CalculationTestCase_1_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('13', '13')
class CalculationTestCase_1_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('14', '14')
class CalculationTestCase_1_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('15', '15')
class CalculationTestCase_1_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('16', '16')
class CalculationTestCase_1_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('17', '17')
class CalculationTestCase_1_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('18', '18')
class CalculationTestCase_1_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('19', '19')
class CalculationTestCase_1_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('20', '20')
class CalculationTestCase_1_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('21', '21')
class CalculationTestCase_1_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('22', '22')
class CalculationTestCase_1_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('23', '23')
class CalculationTestCase_1_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('24', '24')
class CalculationTestCase_1_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('25', '25')
class CalculationTestCase_1_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('26', '26')
class CalculationTestCase_1_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('27', '27')
class CalculationTestCase_1_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('28', '28')
class CalculationTestCase_1_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('29', '29')
class CalculationTestCase_1_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('30', '30')
class CalculationTestCase_1_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('31', '31')
class CalculationTestCase_1_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('32', '32')
class CalculationTestCase_1_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('33', '33')
class CalculationTestCase_1_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('34', '34')
class CalculationTestCase_1_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('35', '35')
class CalculationTestCase_1_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('36', '36')
class CalculationTestCase_1_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('37', '37')
class CalculationTestCase_1_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('38', '38')
class CalculationTestCase_1_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('39', '39')
class CalculationTestCase_1_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('40', '40')
class CalculationTestCase_1_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('41', '41')
class CalculationTestCase_1_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('42', '42')
class CalculationTestCase_1_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('43', '43')
class CalculationTestCase_1_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('44', '44')
class CalculationTestCase_1_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('45', '45')
class CalculationTestCase_1_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('46', '46')
class CalculationTestCase_1_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('47', '47')
class CalculationTestCase_1_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('48', '48')
class CalculationTestCase_1_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('49', '49')
class CalculationTestCase_1_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 1
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 1 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('50', '50')
class CalculationTestCase_2_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_2_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('2', '2')
class CalculationTestCase_2_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('4', '4')
class CalculationTestCase_2_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('6', '6')
class CalculationTestCase_2_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('8', '8')
class CalculationTestCase_2_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('10', '10')
class CalculationTestCase_2_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('12', '12')
class CalculationTestCase_2_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('14', '14')
class CalculationTestCase_2_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('16', '16')
class CalculationTestCase_2_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('18', '18')
class CalculationTestCase_2_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('20', '20')
class CalculationTestCase_2_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('22', '22')
class CalculationTestCase_2_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('24', '24')
class CalculationTestCase_2_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('26', '26')
class CalculationTestCase_2_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('28', '28')
class CalculationTestCase_2_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('30', '30')
class CalculationTestCase_2_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('32', '32')
class CalculationTestCase_2_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('34', '34')
class CalculationTestCase_2_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('36', '36')
class CalculationTestCase_2_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('38', '38')
class CalculationTestCase_2_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('40', '40')
class CalculationTestCase_2_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('42', '42')
class CalculationTestCase_2_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('44', '44')
class CalculationTestCase_2_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('46', '46')
class CalculationTestCase_2_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('48', '48')
class CalculationTestCase_2_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('50', '50')
class CalculationTestCase_2_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('52', '52')
class CalculationTestCase_2_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('54', '54')
class CalculationTestCase_2_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('56', '56')
class CalculationTestCase_2_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('58', '58')
class CalculationTestCase_2_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('60', '60')
class CalculationTestCase_2_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('62', '62')
class CalculationTestCase_2_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('64', '64')
class CalculationTestCase_2_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('66', '66')
class CalculationTestCase_2_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('68', '68')
class CalculationTestCase_2_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('70', '70')
class CalculationTestCase_2_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('72', '72')
class CalculationTestCase_2_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('74', '74')
class CalculationTestCase_2_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('76', '76')
class CalculationTestCase_2_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('78', '78')
class CalculationTestCase_2_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('80', '80')
class CalculationTestCase_2_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('82', '82')
class CalculationTestCase_2_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('84', '84')
class CalculationTestCase_2_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('86', '86')
class CalculationTestCase_2_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('88', '88')
class CalculationTestCase_2_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('90', '90')
class CalculationTestCase_2_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('92', '92')
class CalculationTestCase_2_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('94', '94')
class CalculationTestCase_2_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('96', '96')
class CalculationTestCase_2_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('98', '98')
class CalculationTestCase_2_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 2
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 2 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('100', '100')
class CalculationTestCase_3_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_3_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('3', '3')
class CalculationTestCase_3_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('6', '6')
class CalculationTestCase_3_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('9', '9')
class CalculationTestCase_3_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('12', '12')
class CalculationTestCase_3_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('15', '15')
class CalculationTestCase_3_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('18', '18')
class CalculationTestCase_3_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('21', '21')
class CalculationTestCase_3_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('24', '24')
class CalculationTestCase_3_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('27', '27')
class CalculationTestCase_3_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('30', '30')
class CalculationTestCase_3_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('33', '33')
class CalculationTestCase_3_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('36', '36')
class CalculationTestCase_3_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('39', '39')
class CalculationTestCase_3_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('42', '42')
class CalculationTestCase_3_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('45', '45')
class CalculationTestCase_3_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('48', '48')
class CalculationTestCase_3_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('51', '51')
class CalculationTestCase_3_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('54', '54')
class CalculationTestCase_3_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('57', '57')
class CalculationTestCase_3_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('60', '60')
class CalculationTestCase_3_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('63', '63')
class CalculationTestCase_3_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('66', '66')
class CalculationTestCase_3_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('69', '69')
class CalculationTestCase_3_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('72', '72')
class CalculationTestCase_3_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('75', '75')
class CalculationTestCase_3_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('78', '78')
class CalculationTestCase_3_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('81', '81')
class CalculationTestCase_3_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('84', '84')
class CalculationTestCase_3_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('87', '87')
class CalculationTestCase_3_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('90', '90')
class CalculationTestCase_3_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('93', '93')
class CalculationTestCase_3_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('96', '96')
class CalculationTestCase_3_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('99', '99')
class CalculationTestCase_3_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('102', '102')
class CalculationTestCase_3_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('105', '105')
class CalculationTestCase_3_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('108', '108')
class CalculationTestCase_3_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('111', '111')
class CalculationTestCase_3_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('114', '114')
class CalculationTestCase_3_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('117', '117')
class CalculationTestCase_3_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('120', '120')
class CalculationTestCase_3_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('123', '123')
class CalculationTestCase_3_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('126', '126')
class CalculationTestCase_3_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('129', '129')
class CalculationTestCase_3_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('132', '132')
class CalculationTestCase_3_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('135', '135')
class CalculationTestCase_3_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('138', '138')
class CalculationTestCase_3_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('141', '141')
class CalculationTestCase_3_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('144', '144')
class CalculationTestCase_3_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('147', '147')
class CalculationTestCase_3_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 3
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 3 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('150', '150')
class CalculationTestCase_4_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_4_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('4', '4')
class CalculationTestCase_4_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('8', '8')
class CalculationTestCase_4_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('12', '12')
class CalculationTestCase_4_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('16', '16')
class CalculationTestCase_4_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('20', '20')
class CalculationTestCase_4_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('24', '24')
class CalculationTestCase_4_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('28', '28')
class CalculationTestCase_4_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('32', '32')
class CalculationTestCase_4_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('36', '36')
class CalculationTestCase_4_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('40', '40')
class CalculationTestCase_4_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('44', '44')
class CalculationTestCase_4_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('48', '48')
class CalculationTestCase_4_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('52', '52')
class CalculationTestCase_4_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('56', '56')
class CalculationTestCase_4_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('60', '60')
class CalculationTestCase_4_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('64', '64')
class CalculationTestCase_4_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('68', '68')
class CalculationTestCase_4_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('72', '72')
class CalculationTestCase_4_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('76', '76')
class CalculationTestCase_4_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('80', '80')
class CalculationTestCase_4_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('84', '84')
class CalculationTestCase_4_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('88', '88')
class CalculationTestCase_4_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('92', '92')
class CalculationTestCase_4_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('96', '96')
class CalculationTestCase_4_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('100', '100')
class CalculationTestCase_4_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('104', '104')
class CalculationTestCase_4_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('108', '108')
class CalculationTestCase_4_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('112', '112')
class CalculationTestCase_4_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('116', '116')
class CalculationTestCase_4_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('120', '120')
class CalculationTestCase_4_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('124', '124')
class CalculationTestCase_4_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('128', '128')
class CalculationTestCase_4_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('132', '132')
class CalculationTestCase_4_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('136', '136')
class CalculationTestCase_4_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('140', '140')
class CalculationTestCase_4_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('144', '144')
class CalculationTestCase_4_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('148', '148')
class CalculationTestCase_4_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('152', '152')
class CalculationTestCase_4_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('156', '156')
class CalculationTestCase_4_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('160', '160')
class CalculationTestCase_4_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('164', '164')
class CalculationTestCase_4_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('168', '168')
class CalculationTestCase_4_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('172', '172')
class CalculationTestCase_4_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('176', '176')
class CalculationTestCase_4_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('180', '180')
class CalculationTestCase_4_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('184', '184')
class CalculationTestCase_4_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('188', '188')
class CalculationTestCase_4_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('192', '192')
class CalculationTestCase_4_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('196', '196')
class CalculationTestCase_4_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 4
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 4 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('200', '200')
class CalculationTestCase_5_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_5_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('5', '5')
class CalculationTestCase_5_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('10', '10')
class CalculationTestCase_5_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('15', '15')
class CalculationTestCase_5_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('20', '20')
class CalculationTestCase_5_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('25', '25')
class CalculationTestCase_5_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('30', '30')
class CalculationTestCase_5_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('35', '35')
class CalculationTestCase_5_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('40', '40')
class CalculationTestCase_5_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('45', '45')
class CalculationTestCase_5_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('50', '50')
class CalculationTestCase_5_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('55', '55')
class CalculationTestCase_5_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('60', '60')
class CalculationTestCase_5_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('65', '65')
class CalculationTestCase_5_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('70', '70')
class CalculationTestCase_5_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('75', '75')
class CalculationTestCase_5_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('80', '80')
class CalculationTestCase_5_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('85', '85')
class CalculationTestCase_5_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('90', '90')
class CalculationTestCase_5_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('95', '95')
class CalculationTestCase_5_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('100', '100')
class CalculationTestCase_5_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('105', '105')
class CalculationTestCase_5_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('110', '110')
class CalculationTestCase_5_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('115', '115')
class CalculationTestCase_5_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('120', '120')
class CalculationTestCase_5_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('125', '125')
class CalculationTestCase_5_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('130', '130')
class CalculationTestCase_5_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('135', '135')
class CalculationTestCase_5_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('140', '140')
class CalculationTestCase_5_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('145', '145')
class CalculationTestCase_5_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('150', '150')
class CalculationTestCase_5_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('155', '155')
class CalculationTestCase_5_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('160', '160')
class CalculationTestCase_5_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('165', '165')
class CalculationTestCase_5_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('170', '170')
class CalculationTestCase_5_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('175', '175')
class CalculationTestCase_5_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('180', '180')
class CalculationTestCase_5_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('185', '185')
class CalculationTestCase_5_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('190', '190')
class CalculationTestCase_5_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('195', '195')
class CalculationTestCase_5_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('200', '200')
class CalculationTestCase_5_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('205', '205')
class CalculationTestCase_5_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('210', '210')
class CalculationTestCase_5_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('215', '215')
class CalculationTestCase_5_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('220', '220')
class CalculationTestCase_5_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('225', '225')
class CalculationTestCase_5_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('230', '230')
class CalculationTestCase_5_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('235', '235')
class CalculationTestCase_5_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('240', '240')
class CalculationTestCase_5_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('245', '245')
class CalculationTestCase_5_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 5
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 5 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('250', '250')
class CalculationTestCase_6_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_6_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('6', '6')
class CalculationTestCase_6_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('12', '12')
class CalculationTestCase_6_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('18', '18')
class CalculationTestCase_6_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('24', '24')
class CalculationTestCase_6_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('30', '30')
class CalculationTestCase_6_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('36', '36')
class CalculationTestCase_6_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('42', '42')
class CalculationTestCase_6_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('48', '48')
class CalculationTestCase_6_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('54', '54')
class CalculationTestCase_6_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('60', '60')
class CalculationTestCase_6_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('66', '66')
class CalculationTestCase_6_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('72', '72')
class CalculationTestCase_6_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('78', '78')
class CalculationTestCase_6_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('84', '84')
class CalculationTestCase_6_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('90', '90')
class CalculationTestCase_6_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('96', '96')
class CalculationTestCase_6_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('102', '102')
class CalculationTestCase_6_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('108', '108')
class CalculationTestCase_6_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('114', '114')
class CalculationTestCase_6_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('120', '120')
class CalculationTestCase_6_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('126', '126')
class CalculationTestCase_6_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('132', '132')
class CalculationTestCase_6_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('138', '138')
class CalculationTestCase_6_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('144', '144')
class CalculationTestCase_6_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('150', '150')
class CalculationTestCase_6_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('156', '156')
class CalculationTestCase_6_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('162', '162')
class CalculationTestCase_6_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('168', '168')
class CalculationTestCase_6_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('174', '174')
class CalculationTestCase_6_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('180', '180')
class CalculationTestCase_6_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('186', '186')
class CalculationTestCase_6_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('192', '192')
class CalculationTestCase_6_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('198', '198')
class CalculationTestCase_6_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('204', '204')
class CalculationTestCase_6_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('210', '210')
class CalculationTestCase_6_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('216', '216')
class CalculationTestCase_6_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('222', '222')
class CalculationTestCase_6_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('228', '228')
class CalculationTestCase_6_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('234', '234')
class CalculationTestCase_6_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('240', '240')
class CalculationTestCase_6_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('246', '246')
class CalculationTestCase_6_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('252', '252')
class CalculationTestCase_6_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('258', '258')
class CalculationTestCase_6_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('264', '264')
class CalculationTestCase_6_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('270', '270')
class CalculationTestCase_6_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('276', '276')
class CalculationTestCase_6_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('282', '282')
class CalculationTestCase_6_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('288', '288')
class CalculationTestCase_6_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('294', '294')
class CalculationTestCase_6_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 6
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 6 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('300', '300')
class CalculationTestCase_7_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_7_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('7', '7')
class CalculationTestCase_7_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('14', '14')
class CalculationTestCase_7_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('21', '21')
class CalculationTestCase_7_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('28', '28')
class CalculationTestCase_7_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('35', '35')
class CalculationTestCase_7_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('42', '42')
class CalculationTestCase_7_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('49', '49')
class CalculationTestCase_7_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('56', '56')
class CalculationTestCase_7_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('63', '63')
class CalculationTestCase_7_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('70', '70')
class CalculationTestCase_7_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('77', '77')
class CalculationTestCase_7_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('84', '84')
class CalculationTestCase_7_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('91', '91')
class CalculationTestCase_7_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('98', '98')
class CalculationTestCase_7_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('105', '105')
class CalculationTestCase_7_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('112', '112')
class CalculationTestCase_7_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('119', '119')
class CalculationTestCase_7_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('126', '126')
class CalculationTestCase_7_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('133', '133')
class CalculationTestCase_7_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('140', '140')
class CalculationTestCase_7_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('147', '147')
class CalculationTestCase_7_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('154', '154')
class CalculationTestCase_7_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('161', '161')
class CalculationTestCase_7_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('168', '168')
class CalculationTestCase_7_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('175', '175')
class CalculationTestCase_7_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('182', '182')
class CalculationTestCase_7_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('189', '189')
class CalculationTestCase_7_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('196', '196')
class CalculationTestCase_7_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('203', '203')
class CalculationTestCase_7_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('210', '210')
class CalculationTestCase_7_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('217', '217')
class CalculationTestCase_7_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('224', '224')
class CalculationTestCase_7_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('231', '231')
class CalculationTestCase_7_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('238', '238')
class CalculationTestCase_7_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('245', '245')
class CalculationTestCase_7_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('252', '252')
class CalculationTestCase_7_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('259', '259')
class CalculationTestCase_7_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('266', '266')
class CalculationTestCase_7_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('273', '273')
class CalculationTestCase_7_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('280', '280')
class CalculationTestCase_7_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('287', '287')
class CalculationTestCase_7_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('294', '294')
class CalculationTestCase_7_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('301', '301')
class CalculationTestCase_7_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('308', '308')
class CalculationTestCase_7_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('315', '315')
class CalculationTestCase_7_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('322', '322')
class CalculationTestCase_7_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('329', '329')
class CalculationTestCase_7_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('336', '336')
class CalculationTestCase_7_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('343', '343')
class CalculationTestCase_7_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 7
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 7 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('350', '350')
class CalculationTestCase_8_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_8_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('8', '8')
class CalculationTestCase_8_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('16', '16')
class CalculationTestCase_8_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('24', '24')
class CalculationTestCase_8_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('32', '32')
class CalculationTestCase_8_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('40', '40')
class CalculationTestCase_8_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('48', '48')
class CalculationTestCase_8_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('56', '56')
class CalculationTestCase_8_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('64', '64')
class CalculationTestCase_8_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('72', '72')
class CalculationTestCase_8_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('80', '80')
class CalculationTestCase_8_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('88', '88')
class CalculationTestCase_8_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('96', '96')
class CalculationTestCase_8_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('104', '104')
class CalculationTestCase_8_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('112', '112')
class CalculationTestCase_8_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('120', '120')
class CalculationTestCase_8_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('128', '128')
class CalculationTestCase_8_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('136', '136')
class CalculationTestCase_8_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('144', '144')
class CalculationTestCase_8_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('152', '152')
class CalculationTestCase_8_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('160', '160')
class CalculationTestCase_8_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('168', '168')
class CalculationTestCase_8_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('176', '176')
class CalculationTestCase_8_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('184', '184')
class CalculationTestCase_8_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('192', '192')
class CalculationTestCase_8_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('200', '200')
class CalculationTestCase_8_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('208', '208')
class CalculationTestCase_8_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('216', '216')
class CalculationTestCase_8_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('224', '224')
class CalculationTestCase_8_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('232', '232')
class CalculationTestCase_8_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('240', '240')
class CalculationTestCase_8_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('248', '248')
class CalculationTestCase_8_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('256', '256')
class CalculationTestCase_8_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('264', '264')
class CalculationTestCase_8_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('272', '272')
class CalculationTestCase_8_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('280', '280')
class CalculationTestCase_8_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('288', '288')
class CalculationTestCase_8_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('296', '296')
class CalculationTestCase_8_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('304', '304')
class CalculationTestCase_8_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('312', '312')
class CalculationTestCase_8_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('320', '320')
class CalculationTestCase_8_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('328', '328')
class CalculationTestCase_8_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('336', '336')
class CalculationTestCase_8_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('344', '344')
class CalculationTestCase_8_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('352', '352')
class CalculationTestCase_8_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('360', '360')
class CalculationTestCase_8_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('368', '368')
class CalculationTestCase_8_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('376', '376')
class CalculationTestCase_8_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('384', '384')
class CalculationTestCase_8_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('392', '392')
class CalculationTestCase_8_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 8
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 8 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('400', '400')
class CalculationTestCase_9_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_9_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('9', '9')
class CalculationTestCase_9_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('18', '18')
class CalculationTestCase_9_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('27', '27')
class CalculationTestCase_9_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('36', '36')
class CalculationTestCase_9_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('45', '45')
class CalculationTestCase_9_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('54', '54')
class CalculationTestCase_9_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('63', '63')
class CalculationTestCase_9_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('72', '72')
class CalculationTestCase_9_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('81', '81')
class CalculationTestCase_9_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('90', '90')
class CalculationTestCase_9_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('99', '99')
class CalculationTestCase_9_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('108', '108')
class CalculationTestCase_9_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('117', '117')
class CalculationTestCase_9_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('126', '126')
class CalculationTestCase_9_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('135', '135')
class CalculationTestCase_9_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('144', '144')
class CalculationTestCase_9_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('153', '153')
class CalculationTestCase_9_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('162', '162')
class CalculationTestCase_9_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('171', '171')
class CalculationTestCase_9_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('180', '180')
class CalculationTestCase_9_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('189', '189')
class CalculationTestCase_9_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('198', '198')
class CalculationTestCase_9_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('207', '207')
class CalculationTestCase_9_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('216', '216')
class CalculationTestCase_9_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('225', '225')
class CalculationTestCase_9_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('234', '234')
class CalculationTestCase_9_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('243', '243')
class CalculationTestCase_9_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('252', '252')
class CalculationTestCase_9_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('261', '261')
class CalculationTestCase_9_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('270', '270')
class CalculationTestCase_9_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('279', '279')
class CalculationTestCase_9_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('288', '288')
class CalculationTestCase_9_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('297', '297')
class CalculationTestCase_9_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('306', '306')
class CalculationTestCase_9_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('315', '315')
class CalculationTestCase_9_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('324', '324')
class CalculationTestCase_9_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('333', '333')
class CalculationTestCase_9_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('342', '342')
class CalculationTestCase_9_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('351', '351')
class CalculationTestCase_9_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('360', '360')
class CalculationTestCase_9_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('369', '369')
class CalculationTestCase_9_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('378', '378')
class CalculationTestCase_9_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('387', '387')
class CalculationTestCase_9_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('396', '396')
class CalculationTestCase_9_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('405', '405')
class CalculationTestCase_9_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('414', '414')
class CalculationTestCase_9_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('423', '423')
class CalculationTestCase_9_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('432', '432')
class CalculationTestCase_9_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('441', '441')
class CalculationTestCase_9_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 9
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 9 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('450', '450')
class CalculationTestCase_10_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_10_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('10', '10')
class CalculationTestCase_10_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('20', '20')
class CalculationTestCase_10_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('30', '30')
class CalculationTestCase_10_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('40', '40')
class CalculationTestCase_10_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('50', '50')
class CalculationTestCase_10_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('60', '60')
class CalculationTestCase_10_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('70', '70')
class CalculationTestCase_10_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('80', '80')
class CalculationTestCase_10_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('90', '90')
class CalculationTestCase_10_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('100', '100')
class CalculationTestCase_10_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('110', '110')
class CalculationTestCase_10_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('120', '120')
class CalculationTestCase_10_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('130', '130')
class CalculationTestCase_10_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('140', '140')
class CalculationTestCase_10_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('150', '150')
class CalculationTestCase_10_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('160', '160')
class CalculationTestCase_10_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('170', '170')
class CalculationTestCase_10_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('180', '180')
class CalculationTestCase_10_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('190', '190')
class CalculationTestCase_10_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('200', '200')
class CalculationTestCase_10_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('210', '210')
class CalculationTestCase_10_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('220', '220')
class CalculationTestCase_10_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('230', '230')
class CalculationTestCase_10_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('240', '240')
class CalculationTestCase_10_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('250', '250')
class CalculationTestCase_10_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('260', '260')
class CalculationTestCase_10_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('270', '270')
class CalculationTestCase_10_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('280', '280')
class CalculationTestCase_10_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('290', '290')
class CalculationTestCase_10_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('300', '300')
class CalculationTestCase_10_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('310', '310')
class CalculationTestCase_10_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('320', '320')
class CalculationTestCase_10_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('330', '330')
class CalculationTestCase_10_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('340', '340')
class CalculationTestCase_10_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('350', '350')
class CalculationTestCase_10_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('360', '360')
class CalculationTestCase_10_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('370', '370')
class CalculationTestCase_10_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('380', '380')
class CalculationTestCase_10_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('390', '390')
class CalculationTestCase_10_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('400', '400')
class CalculationTestCase_10_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('410', '410')
class CalculationTestCase_10_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('420', '420')
class CalculationTestCase_10_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('430', '430')
class CalculationTestCase_10_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('440', '440')
class CalculationTestCase_10_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('450', '450')
class CalculationTestCase_10_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('460', '460')
class CalculationTestCase_10_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('470', '470')
class CalculationTestCase_10_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('480', '480')
class CalculationTestCase_10_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('490', '490')
class CalculationTestCase_10_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 10
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 10 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('500', '500')
class CalculationTestCase_11_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_11_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('11', '11')
class CalculationTestCase_11_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('22', '22')
class CalculationTestCase_11_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('33', '33')
class CalculationTestCase_11_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('44', '44')
class CalculationTestCase_11_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('55', '55')
class CalculationTestCase_11_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('66', '66')
class CalculationTestCase_11_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('77', '77')
class CalculationTestCase_11_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('88', '88')
class CalculationTestCase_11_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('99', '99')
class CalculationTestCase_11_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('110', '110')
class CalculationTestCase_11_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('121', '121')
class CalculationTestCase_11_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('132', '132')
class CalculationTestCase_11_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('143', '143')
class CalculationTestCase_11_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('154', '154')
class CalculationTestCase_11_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('165', '165')
class CalculationTestCase_11_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('176', '176')
class CalculationTestCase_11_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('187', '187')
class CalculationTestCase_11_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('198', '198')
class CalculationTestCase_11_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('209', '209')
class CalculationTestCase_11_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('220', '220')
class CalculationTestCase_11_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('231', '231')
class CalculationTestCase_11_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('242', '242')
class CalculationTestCase_11_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('253', '253')
class CalculationTestCase_11_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('264', '264')
class CalculationTestCase_11_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('275', '275')
class CalculationTestCase_11_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('286', '286')
class CalculationTestCase_11_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('297', '297')
class CalculationTestCase_11_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('308', '308')
class CalculationTestCase_11_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('319', '319')
class CalculationTestCase_11_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('330', '330')
class CalculationTestCase_11_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('341', '341')
class CalculationTestCase_11_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('352', '352')
class CalculationTestCase_11_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('363', '363')
class CalculationTestCase_11_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('374', '374')
class CalculationTestCase_11_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('385', '385')
class CalculationTestCase_11_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('396', '396')
class CalculationTestCase_11_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('407', '407')
class CalculationTestCase_11_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('418', '418')
class CalculationTestCase_11_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('429', '429')
class CalculationTestCase_11_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('440', '440')
class CalculationTestCase_11_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('451', '451')
class CalculationTestCase_11_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('462', '462')
class CalculationTestCase_11_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('473', '473')
class CalculationTestCase_11_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('484', '484')
class CalculationTestCase_11_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('495', '495')
class CalculationTestCase_11_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('506', '506')
class CalculationTestCase_11_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('517', '517')
class CalculationTestCase_11_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('528', '528')
class CalculationTestCase_11_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('539', '539')
class CalculationTestCase_11_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 11
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 11 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('550', '550')
class CalculationTestCase_12_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_12_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('12', '12')
class CalculationTestCase_12_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('24', '24')
class CalculationTestCase_12_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('36', '36')
class CalculationTestCase_12_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('48', '48')
class CalculationTestCase_12_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('60', '60')
class CalculationTestCase_12_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('72', '72')
class CalculationTestCase_12_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('84', '84')
class CalculationTestCase_12_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('96', '96')
class CalculationTestCase_12_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('108', '108')
class CalculationTestCase_12_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('120', '120')
class CalculationTestCase_12_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('132', '132')
class CalculationTestCase_12_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('144', '144')
class CalculationTestCase_12_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('156', '156')
class CalculationTestCase_12_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('168', '168')
class CalculationTestCase_12_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('180', '180')
class CalculationTestCase_12_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('192', '192')
class CalculationTestCase_12_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('204', '204')
class CalculationTestCase_12_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('216', '216')
class CalculationTestCase_12_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('228', '228')
class CalculationTestCase_12_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('240', '240')
class CalculationTestCase_12_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('252', '252')
class CalculationTestCase_12_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('264', '264')
class CalculationTestCase_12_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('276', '276')
class CalculationTestCase_12_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('288', '288')
class CalculationTestCase_12_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('300', '300')
class CalculationTestCase_12_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('312', '312')
class CalculationTestCase_12_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('324', '324')
class CalculationTestCase_12_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('336', '336')
class CalculationTestCase_12_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('348', '348')
class CalculationTestCase_12_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('360', '360')
class CalculationTestCase_12_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('372', '372')
class CalculationTestCase_12_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('384', '384')
class CalculationTestCase_12_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('396', '396')
class CalculationTestCase_12_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('408', '408')
class CalculationTestCase_12_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('420', '420')
class CalculationTestCase_12_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('432', '432')
class CalculationTestCase_12_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('444', '444')
class CalculationTestCase_12_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('456', '456')
class CalculationTestCase_12_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('468', '468')
class CalculationTestCase_12_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('480', '480')
class CalculationTestCase_12_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('492', '492')
class CalculationTestCase_12_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('504', '504')
class CalculationTestCase_12_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('516', '516')
class CalculationTestCase_12_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('528', '528')
class CalculationTestCase_12_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('540', '540')
class CalculationTestCase_12_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('552', '552')
class CalculationTestCase_12_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('564', '564')
class CalculationTestCase_12_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('576', '576')
class CalculationTestCase_12_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('588', '588')
class CalculationTestCase_12_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 12
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 12 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('600', '600')
class CalculationTestCase_13_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_13_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('13', '13')
class CalculationTestCase_13_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('26', '26')
class CalculationTestCase_13_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('39', '39')
class CalculationTestCase_13_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('52', '52')
class CalculationTestCase_13_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('65', '65')
class CalculationTestCase_13_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('78', '78')
class CalculationTestCase_13_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('91', '91')
class CalculationTestCase_13_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('104', '104')
class CalculationTestCase_13_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('117', '117')
class CalculationTestCase_13_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('130', '130')
class CalculationTestCase_13_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('143', '143')
class CalculationTestCase_13_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('156', '156')
class CalculationTestCase_13_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('169', '169')
class CalculationTestCase_13_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('182', '182')
class CalculationTestCase_13_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('195', '195')
class CalculationTestCase_13_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('208', '208')
class CalculationTestCase_13_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('221', '221')
class CalculationTestCase_13_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('234', '234')
class CalculationTestCase_13_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('247', '247')
class CalculationTestCase_13_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('260', '260')
class CalculationTestCase_13_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('273', '273')
class CalculationTestCase_13_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('286', '286')
class CalculationTestCase_13_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('299', '299')
class CalculationTestCase_13_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('312', '312')
class CalculationTestCase_13_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('325', '325')
class CalculationTestCase_13_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('338', '338')
class CalculationTestCase_13_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('351', '351')
class CalculationTestCase_13_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('364', '364')
class CalculationTestCase_13_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('377', '377')
class CalculationTestCase_13_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('390', '390')
class CalculationTestCase_13_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('403', '403')
class CalculationTestCase_13_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('416', '416')
class CalculationTestCase_13_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('429', '429')
class CalculationTestCase_13_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('442', '442')
class CalculationTestCase_13_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('455', '455')
class CalculationTestCase_13_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('468', '468')
class CalculationTestCase_13_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('481', '481')
class CalculationTestCase_13_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('494', '494')
class CalculationTestCase_13_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('507', '507')
class CalculationTestCase_13_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('520', '520')
class CalculationTestCase_13_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('533', '533')
class CalculationTestCase_13_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('546', '546')
class CalculationTestCase_13_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('559', '559')
class CalculationTestCase_13_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('572', '572')
class CalculationTestCase_13_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('585', '585')
class CalculationTestCase_13_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('598', '598')
class CalculationTestCase_13_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('611', '611')
class CalculationTestCase_13_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('624', '624')
class CalculationTestCase_13_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('637', '637')
class CalculationTestCase_13_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 13
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 13 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('650', '650')
class CalculationTestCase_14_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_14_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('14', '14')
class CalculationTestCase_14_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('28', '28')
class CalculationTestCase_14_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('42', '42')
class CalculationTestCase_14_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('56', '56')
class CalculationTestCase_14_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('70', '70')
class CalculationTestCase_14_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('84', '84')
class CalculationTestCase_14_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('98', '98')
class CalculationTestCase_14_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('112', '112')
class CalculationTestCase_14_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('126', '126')
class CalculationTestCase_14_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('140', '140')
class CalculationTestCase_14_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('154', '154')
class CalculationTestCase_14_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('168', '168')
class CalculationTestCase_14_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('182', '182')
class CalculationTestCase_14_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('196', '196')
class CalculationTestCase_14_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('210', '210')
class CalculationTestCase_14_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('224', '224')
class CalculationTestCase_14_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('238', '238')
class CalculationTestCase_14_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('252', '252')
class CalculationTestCase_14_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('266', '266')
class CalculationTestCase_14_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('280', '280')
class CalculationTestCase_14_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('294', '294')
class CalculationTestCase_14_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('308', '308')
class CalculationTestCase_14_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('322', '322')
class CalculationTestCase_14_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('336', '336')
class CalculationTestCase_14_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('350', '350')
class CalculationTestCase_14_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('364', '364')
class CalculationTestCase_14_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('378', '378')
class CalculationTestCase_14_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('392', '392')
class CalculationTestCase_14_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('406', '406')
class CalculationTestCase_14_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('420', '420')
class CalculationTestCase_14_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('434', '434')
class CalculationTestCase_14_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('448', '448')
class CalculationTestCase_14_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('462', '462')
class CalculationTestCase_14_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('476', '476')
class CalculationTestCase_14_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('490', '490')
class CalculationTestCase_14_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('504', '504')
class CalculationTestCase_14_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('518', '518')
class CalculationTestCase_14_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('532', '532')
class CalculationTestCase_14_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('546', '546')
class CalculationTestCase_14_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('560', '560')
class CalculationTestCase_14_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('574', '574')
class CalculationTestCase_14_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('588', '588')
class CalculationTestCase_14_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('602', '602')
class CalculationTestCase_14_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('616', '616')
class CalculationTestCase_14_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('630', '630')
class CalculationTestCase_14_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('644', '644')
class CalculationTestCase_14_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('658', '658')
class CalculationTestCase_14_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('672', '672')
class CalculationTestCase_14_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('686', '686')
class CalculationTestCase_14_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 14
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 14 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('700', '700')
class CalculationTestCase_15_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_15_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('15', '15')
class CalculationTestCase_15_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('30', '30')
class CalculationTestCase_15_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('45', '45')
class CalculationTestCase_15_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('60', '60')
class CalculationTestCase_15_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('75', '75')
class CalculationTestCase_15_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('90', '90')
class CalculationTestCase_15_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('105', '105')
class CalculationTestCase_15_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('120', '120')
class CalculationTestCase_15_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('135', '135')
class CalculationTestCase_15_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('150', '150')
class CalculationTestCase_15_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('165', '165')
class CalculationTestCase_15_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('180', '180')
class CalculationTestCase_15_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('195', '195')
class CalculationTestCase_15_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('210', '210')
class CalculationTestCase_15_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('225', '225')
class CalculationTestCase_15_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('240', '240')
class CalculationTestCase_15_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('255', '255')
class CalculationTestCase_15_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('270', '270')
class CalculationTestCase_15_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('285', '285')
class CalculationTestCase_15_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('300', '300')
class CalculationTestCase_15_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('315', '315')
class CalculationTestCase_15_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('330', '330')
class CalculationTestCase_15_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('345', '345')
class CalculationTestCase_15_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('360', '360')
class CalculationTestCase_15_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('375', '375')
class CalculationTestCase_15_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('390', '390')
class CalculationTestCase_15_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('405', '405')
class CalculationTestCase_15_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('420', '420')
class CalculationTestCase_15_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('435', '435')
class CalculationTestCase_15_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('450', '450')
class CalculationTestCase_15_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('465', '465')
class CalculationTestCase_15_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('480', '480')
class CalculationTestCase_15_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('495', '495')
class CalculationTestCase_15_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('510', '510')
class CalculationTestCase_15_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('525', '525')
class CalculationTestCase_15_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('540', '540')
class CalculationTestCase_15_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('555', '555')
class CalculationTestCase_15_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('570', '570')
class CalculationTestCase_15_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('585', '585')
class CalculationTestCase_15_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('600', '600')
class CalculationTestCase_15_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('615', '615')
class CalculationTestCase_15_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('630', '630')
class CalculationTestCase_15_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('645', '645')
class CalculationTestCase_15_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('660', '660')
class CalculationTestCase_15_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('675', '675')
class CalculationTestCase_15_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('690', '690')
class CalculationTestCase_15_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('705', '705')
class CalculationTestCase_15_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('720', '720')
class CalculationTestCase_15_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('735', '735')
class CalculationTestCase_15_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 15
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 15 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('750', '750')
class CalculationTestCase_16_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_16_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('16', '16')
class CalculationTestCase_16_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('32', '32')
class CalculationTestCase_16_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('48', '48')
class CalculationTestCase_16_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('64', '64')
class CalculationTestCase_16_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('80', '80')
class CalculationTestCase_16_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('96', '96')
class CalculationTestCase_16_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('112', '112')
class CalculationTestCase_16_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('128', '128')
class CalculationTestCase_16_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('144', '144')
class CalculationTestCase_16_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('160', '160')
class CalculationTestCase_16_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('176', '176')
class CalculationTestCase_16_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('192', '192')
class CalculationTestCase_16_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('208', '208')
class CalculationTestCase_16_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('224', '224')
class CalculationTestCase_16_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('240', '240')
class CalculationTestCase_16_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('256', '256')
class CalculationTestCase_16_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('272', '272')
class CalculationTestCase_16_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('288', '288')
class CalculationTestCase_16_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('304', '304')
class CalculationTestCase_16_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('320', '320')
class CalculationTestCase_16_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('336', '336')
class CalculationTestCase_16_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('352', '352')
class CalculationTestCase_16_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('368', '368')
class CalculationTestCase_16_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('384', '384')
class CalculationTestCase_16_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('400', '400')
class CalculationTestCase_16_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('416', '416')
class CalculationTestCase_16_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('432', '432')
class CalculationTestCase_16_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('448', '448')
class CalculationTestCase_16_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('464', '464')
class CalculationTestCase_16_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('480', '480')
class CalculationTestCase_16_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('496', '496')
class CalculationTestCase_16_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('512', '512')
class CalculationTestCase_16_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('528', '528')
class CalculationTestCase_16_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('544', '544')
class CalculationTestCase_16_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('560', '560')
class CalculationTestCase_16_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('576', '576')
class CalculationTestCase_16_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('592', '592')
class CalculationTestCase_16_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('608', '608')
class CalculationTestCase_16_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('624', '624')
class CalculationTestCase_16_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('640', '640')
class CalculationTestCase_16_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('656', '656')
class CalculationTestCase_16_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('672', '672')
class CalculationTestCase_16_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('688', '688')
class CalculationTestCase_16_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('704', '704')
class CalculationTestCase_16_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('720', '720')
class CalculationTestCase_16_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('736', '736')
class CalculationTestCase_16_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('752', '752')
class CalculationTestCase_16_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('768', '768')
class CalculationTestCase_16_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('784', '784')
class CalculationTestCase_16_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 16
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 16 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('800', '800')
class CalculationTestCase_17_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_17_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('17', '17')
class CalculationTestCase_17_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('34', '34')
class CalculationTestCase_17_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('51', '51')
class CalculationTestCase_17_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('68', '68')
class CalculationTestCase_17_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('85', '85')
class CalculationTestCase_17_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('102', '102')
class CalculationTestCase_17_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('119', '119')
class CalculationTestCase_17_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('136', '136')
class CalculationTestCase_17_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('153', '153')
class CalculationTestCase_17_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('170', '170')
class CalculationTestCase_17_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('187', '187')
class CalculationTestCase_17_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('204', '204')
class CalculationTestCase_17_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('221', '221')
class CalculationTestCase_17_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('238', '238')
class CalculationTestCase_17_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('255', '255')
class CalculationTestCase_17_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('272', '272')
class CalculationTestCase_17_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('289', '289')
class CalculationTestCase_17_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('306', '306')
class CalculationTestCase_17_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('323', '323')
class CalculationTestCase_17_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('340', '340')
class CalculationTestCase_17_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('357', '357')
class CalculationTestCase_17_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('374', '374')
class CalculationTestCase_17_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('391', '391')
class CalculationTestCase_17_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('408', '408')
class CalculationTestCase_17_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('425', '425')
class CalculationTestCase_17_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('442', '442')
class CalculationTestCase_17_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('459', '459')
class CalculationTestCase_17_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('476', '476')
class CalculationTestCase_17_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('493', '493')
class CalculationTestCase_17_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('510', '510')
class CalculationTestCase_17_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('527', '527')
class CalculationTestCase_17_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('544', '544')
class CalculationTestCase_17_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('561', '561')
class CalculationTestCase_17_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('578', '578')
class CalculationTestCase_17_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('595', '595')
class CalculationTestCase_17_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('612', '612')
class CalculationTestCase_17_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('629', '629')
class CalculationTestCase_17_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('646', '646')
class CalculationTestCase_17_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('663', '663')
class CalculationTestCase_17_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('680', '680')
class CalculationTestCase_17_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('697', '697')
class CalculationTestCase_17_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('714', '714')
class CalculationTestCase_17_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('731', '731')
class CalculationTestCase_17_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('748', '748')
class CalculationTestCase_17_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('765', '765')
class CalculationTestCase_17_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('782', '782')
class CalculationTestCase_17_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('799', '799')
class CalculationTestCase_17_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('816', '816')
class CalculationTestCase_17_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('833', '833')
class CalculationTestCase_17_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 17
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 17 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('850', '850')
class CalculationTestCase_18_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_18_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('18', '18')
class CalculationTestCase_18_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('36', '36')
class CalculationTestCase_18_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('54', '54')
class CalculationTestCase_18_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('72', '72')
class CalculationTestCase_18_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('90', '90')
class CalculationTestCase_18_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('108', '108')
class CalculationTestCase_18_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('126', '126')
class CalculationTestCase_18_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('144', '144')
class CalculationTestCase_18_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('162', '162')
class CalculationTestCase_18_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('180', '180')
class CalculationTestCase_18_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('198', '198')
class CalculationTestCase_18_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('216', '216')
class CalculationTestCase_18_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('234', '234')
class CalculationTestCase_18_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('252', '252')
class CalculationTestCase_18_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('270', '270')
class CalculationTestCase_18_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('288', '288')
class CalculationTestCase_18_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('306', '306')
class CalculationTestCase_18_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('324', '324')
class CalculationTestCase_18_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('342', '342')
class CalculationTestCase_18_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('360', '360')
class CalculationTestCase_18_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('378', '378')
class CalculationTestCase_18_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('396', '396')
class CalculationTestCase_18_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('414', '414')
class CalculationTestCase_18_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('432', '432')
class CalculationTestCase_18_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('450', '450')
class CalculationTestCase_18_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('468', '468')
class CalculationTestCase_18_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('486', '486')
class CalculationTestCase_18_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('504', '504')
class CalculationTestCase_18_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('522', '522')
class CalculationTestCase_18_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('540', '540')
class CalculationTestCase_18_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('558', '558')
class CalculationTestCase_18_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('576', '576')
class CalculationTestCase_18_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('594', '594')
class CalculationTestCase_18_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('612', '612')
class CalculationTestCase_18_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('630', '630')
class CalculationTestCase_18_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('648', '648')
class CalculationTestCase_18_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('666', '666')
class CalculationTestCase_18_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('684', '684')
class CalculationTestCase_18_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('702', '702')
class CalculationTestCase_18_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('720', '720')
class CalculationTestCase_18_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('738', '738')
class CalculationTestCase_18_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('756', '756')
class CalculationTestCase_18_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('774', '774')
class CalculationTestCase_18_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('792', '792')
class CalculationTestCase_18_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('810', '810')
class CalculationTestCase_18_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('828', '828')
class CalculationTestCase_18_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('846', '846')
class CalculationTestCase_18_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('864', '864')
class CalculationTestCase_18_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('882', '882')
class CalculationTestCase_18_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 18
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 18 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('900', '900')
class CalculationTestCase_19_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_19_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('19', '19')
class CalculationTestCase_19_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('38', '38')
class CalculationTestCase_19_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('57', '57')
class CalculationTestCase_19_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('76', '76')
class CalculationTestCase_19_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('95', '95')
class CalculationTestCase_19_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('114', '114')
class CalculationTestCase_19_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('133', '133')
class CalculationTestCase_19_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('152', '152')
class CalculationTestCase_19_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('171', '171')
class CalculationTestCase_19_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('190', '190')
class CalculationTestCase_19_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('209', '209')
class CalculationTestCase_19_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('228', '228')
class CalculationTestCase_19_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('247', '247')
class CalculationTestCase_19_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('266', '266')
class CalculationTestCase_19_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('285', '285')
class CalculationTestCase_19_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('304', '304')
class CalculationTestCase_19_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('323', '323')
class CalculationTestCase_19_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('342', '342')
class CalculationTestCase_19_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('361', '361')
class CalculationTestCase_19_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('380', '380')
class CalculationTestCase_19_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('399', '399')
class CalculationTestCase_19_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('418', '418')
class CalculationTestCase_19_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('437', '437')
class CalculationTestCase_19_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('456', '456')
class CalculationTestCase_19_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('475', '475')
class CalculationTestCase_19_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('494', '494')
class CalculationTestCase_19_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('513', '513')
class CalculationTestCase_19_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('532', '532')
class CalculationTestCase_19_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('551', '551')
class CalculationTestCase_19_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('570', '570')
class CalculationTestCase_19_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('589', '589')
class CalculationTestCase_19_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('608', '608')
class CalculationTestCase_19_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('627', '627')
class CalculationTestCase_19_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('646', '646')
class CalculationTestCase_19_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('665', '665')
class CalculationTestCase_19_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('684', '684')
class CalculationTestCase_19_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('703', '703')
class CalculationTestCase_19_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('722', '722')
class CalculationTestCase_19_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('741', '741')
class CalculationTestCase_19_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('760', '760')
class CalculationTestCase_19_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('779', '779')
class CalculationTestCase_19_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('798', '798')
class CalculationTestCase_19_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('817', '817')
class CalculationTestCase_19_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('836', '836')
class CalculationTestCase_19_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('855', '855')
class CalculationTestCase_19_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('874', '874')
class CalculationTestCase_19_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('893', '893')
class CalculationTestCase_19_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('912', '912')
class CalculationTestCase_19_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('931', '931')
class CalculationTestCase_19_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 19
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 19 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('950', '950')
class CalculationTestCase_20_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_20_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('20', '20')
class CalculationTestCase_20_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('40', '40')
class CalculationTestCase_20_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('60', '60')
class CalculationTestCase_20_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('80', '80')
class CalculationTestCase_20_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('100', '100')
class CalculationTestCase_20_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('120', '120')
class CalculationTestCase_20_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('140', '140')
class CalculationTestCase_20_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('160', '160')
class CalculationTestCase_20_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('180', '180')
class CalculationTestCase_20_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('200', '200')
class CalculationTestCase_20_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('220', '220')
class CalculationTestCase_20_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('240', '240')
class CalculationTestCase_20_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('260', '260')
class CalculationTestCase_20_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('280', '280')
class CalculationTestCase_20_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('300', '300')
class CalculationTestCase_20_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('320', '320')
class CalculationTestCase_20_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('340', '340')
class CalculationTestCase_20_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('360', '360')
class CalculationTestCase_20_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('380', '380')
class CalculationTestCase_20_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('400', '400')
class CalculationTestCase_20_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('420', '420')
class CalculationTestCase_20_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('440', '440')
class CalculationTestCase_20_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('460', '460')
class CalculationTestCase_20_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('480', '480')
class CalculationTestCase_20_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('500', '500')
class CalculationTestCase_20_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('520', '520')
class CalculationTestCase_20_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('540', '540')
class CalculationTestCase_20_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('560', '560')
class CalculationTestCase_20_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('580', '580')
class CalculationTestCase_20_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('600', '600')
class CalculationTestCase_20_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('620', '620')
class CalculationTestCase_20_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('640', '640')
class CalculationTestCase_20_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('660', '660')
class CalculationTestCase_20_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('680', '680')
class CalculationTestCase_20_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('700', '700')
class CalculationTestCase_20_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('720', '720')
class CalculationTestCase_20_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('740', '740')
class CalculationTestCase_20_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('760', '760')
class CalculationTestCase_20_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('780', '780')
class CalculationTestCase_20_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('800', '800')
class CalculationTestCase_20_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('820', '820')
class CalculationTestCase_20_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('840', '840')
class CalculationTestCase_20_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('860', '860')
class CalculationTestCase_20_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('880', '880')
class CalculationTestCase_20_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('900', '900')
class CalculationTestCase_20_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('920', '920')
class CalculationTestCase_20_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('940', '940')
class CalculationTestCase_20_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('960', '960')
class CalculationTestCase_20_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('980', '980')
class CalculationTestCase_20_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 20
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 20 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1000', '1000')
class CalculationTestCase_21_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_21_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('21', '21')
class CalculationTestCase_21_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('42', '42')
class CalculationTestCase_21_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('63', '63')
class CalculationTestCase_21_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('84', '84')
class CalculationTestCase_21_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('105', '105')
class CalculationTestCase_21_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('126', '126')
class CalculationTestCase_21_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('147', '147')
class CalculationTestCase_21_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('168', '168')
class CalculationTestCase_21_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('189', '189')
class CalculationTestCase_21_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('210', '210')
class CalculationTestCase_21_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('231', '231')
class CalculationTestCase_21_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('252', '252')
class CalculationTestCase_21_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('273', '273')
class CalculationTestCase_21_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('294', '294')
class CalculationTestCase_21_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('315', '315')
class CalculationTestCase_21_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('336', '336')
class CalculationTestCase_21_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('357', '357')
class CalculationTestCase_21_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('378', '378')
class CalculationTestCase_21_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('399', '399')
class CalculationTestCase_21_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('420', '420')
class CalculationTestCase_21_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('441', '441')
class CalculationTestCase_21_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('462', '462')
class CalculationTestCase_21_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('483', '483')
class CalculationTestCase_21_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('504', '504')
class CalculationTestCase_21_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('525', '525')
class CalculationTestCase_21_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('546', '546')
class CalculationTestCase_21_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('567', '567')
class CalculationTestCase_21_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('588', '588')
class CalculationTestCase_21_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('609', '609')
class CalculationTestCase_21_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('630', '630')
class CalculationTestCase_21_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('651', '651')
class CalculationTestCase_21_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('672', '672')
class CalculationTestCase_21_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('693', '693')
class CalculationTestCase_21_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('714', '714')
class CalculationTestCase_21_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('735', '735')
class CalculationTestCase_21_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('756', '756')
class CalculationTestCase_21_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('777', '777')
class CalculationTestCase_21_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('798', '798')
class CalculationTestCase_21_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('819', '819')
class CalculationTestCase_21_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('840', '840')
class CalculationTestCase_21_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('861', '861')
class CalculationTestCase_21_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('882', '882')
class CalculationTestCase_21_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('903', '903')
class CalculationTestCase_21_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('924', '924')
class CalculationTestCase_21_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('945', '945')
class CalculationTestCase_21_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('966', '966')
class CalculationTestCase_21_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('987', '987')
class CalculationTestCase_21_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1008', '1008')
class CalculationTestCase_21_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1029', '1029')
class CalculationTestCase_21_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 21
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 21 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1050', '1050')
class CalculationTestCase_22_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_22_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('22', '22')
class CalculationTestCase_22_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('44', '44')
class CalculationTestCase_22_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('66', '66')
class CalculationTestCase_22_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('88', '88')
class CalculationTestCase_22_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('110', '110')
class CalculationTestCase_22_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('132', '132')
class CalculationTestCase_22_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('154', '154')
class CalculationTestCase_22_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('176', '176')
class CalculationTestCase_22_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('198', '198')
class CalculationTestCase_22_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('220', '220')
class CalculationTestCase_22_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('242', '242')
class CalculationTestCase_22_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('264', '264')
class CalculationTestCase_22_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('286', '286')
class CalculationTestCase_22_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('308', '308')
class CalculationTestCase_22_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('330', '330')
class CalculationTestCase_22_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('352', '352')
class CalculationTestCase_22_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('374', '374')
class CalculationTestCase_22_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('396', '396')
class CalculationTestCase_22_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('418', '418')
class CalculationTestCase_22_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('440', '440')
class CalculationTestCase_22_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('462', '462')
class CalculationTestCase_22_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('484', '484')
class CalculationTestCase_22_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('506', '506')
class CalculationTestCase_22_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('528', '528')
class CalculationTestCase_22_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('550', '550')
class CalculationTestCase_22_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('572', '572')
class CalculationTestCase_22_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('594', '594')
class CalculationTestCase_22_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('616', '616')
class CalculationTestCase_22_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('638', '638')
class CalculationTestCase_22_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('660', '660')
class CalculationTestCase_22_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('682', '682')
class CalculationTestCase_22_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('704', '704')
class CalculationTestCase_22_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('726', '726')
class CalculationTestCase_22_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('748', '748')
class CalculationTestCase_22_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('770', '770')
class CalculationTestCase_22_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('792', '792')
class CalculationTestCase_22_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('814', '814')
class CalculationTestCase_22_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('836', '836')
class CalculationTestCase_22_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('858', '858')
class CalculationTestCase_22_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('880', '880')
class CalculationTestCase_22_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('902', '902')
class CalculationTestCase_22_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('924', '924')
class CalculationTestCase_22_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('946', '946')
class CalculationTestCase_22_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('968', '968')
class CalculationTestCase_22_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('990', '990')
class CalculationTestCase_22_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1012', '1012')
class CalculationTestCase_22_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1034', '1034')
class CalculationTestCase_22_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1056', '1056')
class CalculationTestCase_22_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1078', '1078')
class CalculationTestCase_22_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 22
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 22 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1100', '1100')
class CalculationTestCase_23_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_23_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('23', '23')
class CalculationTestCase_23_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('46', '46')
class CalculationTestCase_23_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('69', '69')
class CalculationTestCase_23_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('92', '92')
class CalculationTestCase_23_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('115', '115')
class CalculationTestCase_23_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('138', '138')
class CalculationTestCase_23_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('161', '161')
class CalculationTestCase_23_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('184', '184')
class CalculationTestCase_23_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('207', '207')
class CalculationTestCase_23_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('230', '230')
class CalculationTestCase_23_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('253', '253')
class CalculationTestCase_23_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('276', '276')
class CalculationTestCase_23_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('299', '299')
class CalculationTestCase_23_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('322', '322')
class CalculationTestCase_23_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('345', '345')
class CalculationTestCase_23_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('368', '368')
class CalculationTestCase_23_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('391', '391')
class CalculationTestCase_23_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('414', '414')
class CalculationTestCase_23_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('437', '437')
class CalculationTestCase_23_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('460', '460')
class CalculationTestCase_23_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('483', '483')
class CalculationTestCase_23_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('506', '506')
class CalculationTestCase_23_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('529', '529')
class CalculationTestCase_23_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('552', '552')
class CalculationTestCase_23_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('575', '575')
class CalculationTestCase_23_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('598', '598')
class CalculationTestCase_23_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('621', '621')
class CalculationTestCase_23_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('644', '644')
class CalculationTestCase_23_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('667', '667')
class CalculationTestCase_23_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('690', '690')
class CalculationTestCase_23_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('713', '713')
class CalculationTestCase_23_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('736', '736')
class CalculationTestCase_23_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('759', '759')
class CalculationTestCase_23_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('782', '782')
class CalculationTestCase_23_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('805', '805')
class CalculationTestCase_23_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('828', '828')
class CalculationTestCase_23_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('851', '851')
class CalculationTestCase_23_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('874', '874')
class CalculationTestCase_23_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('897', '897')
class CalculationTestCase_23_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('920', '920')
class CalculationTestCase_23_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('943', '943')
class CalculationTestCase_23_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('966', '966')
class CalculationTestCase_23_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('989', '989')
class CalculationTestCase_23_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1012', '1012')
class CalculationTestCase_23_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1035', '1035')
class CalculationTestCase_23_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1058', '1058')
class CalculationTestCase_23_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1081', '1081')
class CalculationTestCase_23_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1104', '1104')
class CalculationTestCase_23_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1127', '1127')
class CalculationTestCase_23_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 23
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 23 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1150', '1150')
class CalculationTestCase_24_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_24_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('24', '24')
class CalculationTestCase_24_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('48', '48')
class CalculationTestCase_24_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('72', '72')
class CalculationTestCase_24_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('96', '96')
class CalculationTestCase_24_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('120', '120')
class CalculationTestCase_24_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('144', '144')
class CalculationTestCase_24_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('168', '168')
class CalculationTestCase_24_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('192', '192')
class CalculationTestCase_24_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('216', '216')
class CalculationTestCase_24_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('240', '240')
class CalculationTestCase_24_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('264', '264')
class CalculationTestCase_24_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('288', '288')
class CalculationTestCase_24_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('312', '312')
class CalculationTestCase_24_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('336', '336')
class CalculationTestCase_24_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('360', '360')
class CalculationTestCase_24_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('384', '384')
class CalculationTestCase_24_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('408', '408')
class CalculationTestCase_24_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('432', '432')
class CalculationTestCase_24_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('456', '456')
class CalculationTestCase_24_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('480', '480')
class CalculationTestCase_24_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('504', '504')
class CalculationTestCase_24_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('528', '528')
class CalculationTestCase_24_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('552', '552')
class CalculationTestCase_24_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('576', '576')
class CalculationTestCase_24_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('600', '600')
class CalculationTestCase_24_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('624', '624')
class CalculationTestCase_24_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('648', '648')
class CalculationTestCase_24_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('672', '672')
class CalculationTestCase_24_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('696', '696')
class CalculationTestCase_24_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('720', '720')
class CalculationTestCase_24_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('744', '744')
class CalculationTestCase_24_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('768', '768')
class CalculationTestCase_24_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('792', '792')
class CalculationTestCase_24_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('816', '816')
class CalculationTestCase_24_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('840', '840')
class CalculationTestCase_24_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('864', '864')
class CalculationTestCase_24_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('888', '888')
class CalculationTestCase_24_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('912', '912')
class CalculationTestCase_24_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('936', '936')
class CalculationTestCase_24_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('960', '960')
class CalculationTestCase_24_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('984', '984')
class CalculationTestCase_24_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1008', '1008')
class CalculationTestCase_24_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1032', '1032')
class CalculationTestCase_24_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1056', '1056')
class CalculationTestCase_24_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1080', '1080')
class CalculationTestCase_24_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1104', '1104')
class CalculationTestCase_24_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1128', '1128')
class CalculationTestCase_24_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1152', '1152')
class CalculationTestCase_24_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1176', '1176')
class CalculationTestCase_24_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 24
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 24 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1200', '1200')
class CalculationTestCase_25_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_25_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('25', '25')
class CalculationTestCase_25_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('50', '50')
class CalculationTestCase_25_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('75', '75')
class CalculationTestCase_25_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('100', '100')
class CalculationTestCase_25_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('125', '125')
class CalculationTestCase_25_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('150', '150')
class CalculationTestCase_25_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('175', '175')
class CalculationTestCase_25_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('200', '200')
class CalculationTestCase_25_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('225', '225')
class CalculationTestCase_25_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('250', '250')
class CalculationTestCase_25_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('275', '275')
class CalculationTestCase_25_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('300', '300')
class CalculationTestCase_25_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('325', '325')
class CalculationTestCase_25_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('350', '350')
class CalculationTestCase_25_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('375', '375')
class CalculationTestCase_25_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('400', '400')
class CalculationTestCase_25_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('425', '425')
class CalculationTestCase_25_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('450', '450')
class CalculationTestCase_25_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('475', '475')
class CalculationTestCase_25_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('500', '500')
class CalculationTestCase_25_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('525', '525')
class CalculationTestCase_25_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('550', '550')
class CalculationTestCase_25_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('575', '575')
class CalculationTestCase_25_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('600', '600')
class CalculationTestCase_25_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('625', '625')
class CalculationTestCase_25_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('650', '650')
class CalculationTestCase_25_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('675', '675')
class CalculationTestCase_25_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('700', '700')
class CalculationTestCase_25_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('725', '725')
class CalculationTestCase_25_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('750', '750')
class CalculationTestCase_25_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('775', '775')
class CalculationTestCase_25_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('800', '800')
class CalculationTestCase_25_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('825', '825')
class CalculationTestCase_25_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('850', '850')
class CalculationTestCase_25_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('875', '875')
class CalculationTestCase_25_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('900', '900')
class CalculationTestCase_25_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('925', '925')
class CalculationTestCase_25_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('950', '950')
class CalculationTestCase_25_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('975', '975')
class CalculationTestCase_25_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1000', '1000')
class CalculationTestCase_25_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1025', '1025')
class CalculationTestCase_25_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1050', '1050')
class CalculationTestCase_25_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1075', '1075')
class CalculationTestCase_25_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1100', '1100')
class CalculationTestCase_25_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1125', '1125')
class CalculationTestCase_25_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1150', '1150')
class CalculationTestCase_25_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1175', '1175')
class CalculationTestCase_25_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1200', '1200')
class CalculationTestCase_25_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1225', '1225')
class CalculationTestCase_25_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 25
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 25 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1250', '1250')
class CalculationTestCase_26_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_26_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('26', '26')
class CalculationTestCase_26_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('52', '52')
class CalculationTestCase_26_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('78', '78')
class CalculationTestCase_26_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('104', '104')
class CalculationTestCase_26_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('130', '130')
class CalculationTestCase_26_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('156', '156')
class CalculationTestCase_26_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('182', '182')
class CalculationTestCase_26_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('208', '208')
class CalculationTestCase_26_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('234', '234')
class CalculationTestCase_26_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('260', '260')
class CalculationTestCase_26_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('286', '286')
class CalculationTestCase_26_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('312', '312')
class CalculationTestCase_26_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('338', '338')
class CalculationTestCase_26_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('364', '364')
class CalculationTestCase_26_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('390', '390')
class CalculationTestCase_26_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('416', '416')
class CalculationTestCase_26_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('442', '442')
class CalculationTestCase_26_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('468', '468')
class CalculationTestCase_26_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('494', '494')
class CalculationTestCase_26_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('520', '520')
class CalculationTestCase_26_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('546', '546')
class CalculationTestCase_26_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('572', '572')
class CalculationTestCase_26_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('598', '598')
class CalculationTestCase_26_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('624', '624')
class CalculationTestCase_26_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('650', '650')
class CalculationTestCase_26_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('676', '676')
class CalculationTestCase_26_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('702', '702')
class CalculationTestCase_26_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('728', '728')
class CalculationTestCase_26_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('754', '754')
class CalculationTestCase_26_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('780', '780')
class CalculationTestCase_26_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('806', '806')
class CalculationTestCase_26_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('832', '832')
class CalculationTestCase_26_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('858', '858')
class CalculationTestCase_26_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('884', '884')
class CalculationTestCase_26_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('910', '910')
class CalculationTestCase_26_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('936', '936')
class CalculationTestCase_26_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('962', '962')
class CalculationTestCase_26_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('988', '988')
class CalculationTestCase_26_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1014', '1014')
class CalculationTestCase_26_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1040', '1040')
class CalculationTestCase_26_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1066', '1066')
class CalculationTestCase_26_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1092', '1092')
class CalculationTestCase_26_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1118', '1118')
class CalculationTestCase_26_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1144', '1144')
class CalculationTestCase_26_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1170', '1170')
class CalculationTestCase_26_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1196', '1196')
class CalculationTestCase_26_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1222', '1222')
class CalculationTestCase_26_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1248', '1248')
class CalculationTestCase_26_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1274', '1274')
class CalculationTestCase_26_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 26
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 26 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1300', '1300')
class CalculationTestCase_27_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_27_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('27', '27')
class CalculationTestCase_27_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('54', '54')
class CalculationTestCase_27_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('81', '81')
class CalculationTestCase_27_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('108', '108')
class CalculationTestCase_27_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('135', '135')
class CalculationTestCase_27_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('162', '162')
class CalculationTestCase_27_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('189', '189')
class CalculationTestCase_27_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('216', '216')
class CalculationTestCase_27_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('243', '243')
class CalculationTestCase_27_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('270', '270')
class CalculationTestCase_27_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('297', '297')
class CalculationTestCase_27_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('324', '324')
class CalculationTestCase_27_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('351', '351')
class CalculationTestCase_27_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('378', '378')
class CalculationTestCase_27_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('405', '405')
class CalculationTestCase_27_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('432', '432')
class CalculationTestCase_27_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('459', '459')
class CalculationTestCase_27_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('486', '486')
class CalculationTestCase_27_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('513', '513')
class CalculationTestCase_27_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('540', '540')
class CalculationTestCase_27_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('567', '567')
class CalculationTestCase_27_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('594', '594')
class CalculationTestCase_27_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('621', '621')
class CalculationTestCase_27_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('648', '648')
class CalculationTestCase_27_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('675', '675')
class CalculationTestCase_27_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('702', '702')
class CalculationTestCase_27_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('729', '729')
class CalculationTestCase_27_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('756', '756')
class CalculationTestCase_27_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('783', '783')
class CalculationTestCase_27_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('810', '810')
class CalculationTestCase_27_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('837', '837')
class CalculationTestCase_27_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('864', '864')
class CalculationTestCase_27_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('891', '891')
class CalculationTestCase_27_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('918', '918')
class CalculationTestCase_27_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('945', '945')
class CalculationTestCase_27_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('972', '972')
class CalculationTestCase_27_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('999', '999')
class CalculationTestCase_27_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1026', '1026')
class CalculationTestCase_27_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1053', '1053')
class CalculationTestCase_27_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1080', '1080')
class CalculationTestCase_27_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1107', '1107')
class CalculationTestCase_27_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1134', '1134')
class CalculationTestCase_27_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1161', '1161')
class CalculationTestCase_27_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1188', '1188')
class CalculationTestCase_27_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1215', '1215')
class CalculationTestCase_27_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1242', '1242')
class CalculationTestCase_27_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1269', '1269')
class CalculationTestCase_27_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1296', '1296')
class CalculationTestCase_27_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1323', '1323')
class CalculationTestCase_27_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 27
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 27 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1350', '1350')
class CalculationTestCase_28_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_28_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('28', '28')
class CalculationTestCase_28_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('56', '56')
class CalculationTestCase_28_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('84', '84')
class CalculationTestCase_28_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('112', '112')
class CalculationTestCase_28_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('140', '140')
class CalculationTestCase_28_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('168', '168')
class CalculationTestCase_28_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('196', '196')
class CalculationTestCase_28_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('224', '224')
class CalculationTestCase_28_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('252', '252')
class CalculationTestCase_28_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('280', '280')
class CalculationTestCase_28_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('308', '308')
class CalculationTestCase_28_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('336', '336')
class CalculationTestCase_28_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('364', '364')
class CalculationTestCase_28_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('392', '392')
class CalculationTestCase_28_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('420', '420')
class CalculationTestCase_28_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('448', '448')
class CalculationTestCase_28_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('476', '476')
class CalculationTestCase_28_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('504', '504')
class CalculationTestCase_28_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('532', '532')
class CalculationTestCase_28_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('560', '560')
class CalculationTestCase_28_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('588', '588')
class CalculationTestCase_28_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('616', '616')
class CalculationTestCase_28_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('644', '644')
class CalculationTestCase_28_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('672', '672')
class CalculationTestCase_28_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('700', '700')
class CalculationTestCase_28_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('728', '728')
class CalculationTestCase_28_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('756', '756')
class CalculationTestCase_28_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('784', '784')
class CalculationTestCase_28_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('812', '812')
class CalculationTestCase_28_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('840', '840')
class CalculationTestCase_28_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('868', '868')
class CalculationTestCase_28_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('896', '896')
class CalculationTestCase_28_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('924', '924')
class CalculationTestCase_28_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('952', '952')
class CalculationTestCase_28_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('980', '980')
class CalculationTestCase_28_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1008', '1008')
class CalculationTestCase_28_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1036', '1036')
class CalculationTestCase_28_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1064', '1064')
class CalculationTestCase_28_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1092', '1092')
class CalculationTestCase_28_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1120', '1120')
class CalculationTestCase_28_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1148', '1148')
class CalculationTestCase_28_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1176', '1176')
class CalculationTestCase_28_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1204', '1204')
class CalculationTestCase_28_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1232', '1232')
class CalculationTestCase_28_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1260', '1260')
class CalculationTestCase_28_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1288', '1288')
class CalculationTestCase_28_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1316', '1316')
class CalculationTestCase_28_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1344', '1344')
class CalculationTestCase_28_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1372', '1372')
class CalculationTestCase_28_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 28
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 28 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1400', '1400')
class CalculationTestCase_29_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_29_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('29', '29')
class CalculationTestCase_29_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('58', '58')
class CalculationTestCase_29_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('87', '87')
class CalculationTestCase_29_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('116', '116')
class CalculationTestCase_29_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('145', '145')
class CalculationTestCase_29_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('174', '174')
class CalculationTestCase_29_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('203', '203')
class CalculationTestCase_29_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('232', '232')
class CalculationTestCase_29_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('261', '261')
class CalculationTestCase_29_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('290', '290')
class CalculationTestCase_29_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('319', '319')
class CalculationTestCase_29_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('348', '348')
class CalculationTestCase_29_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('377', '377')
class CalculationTestCase_29_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('406', '406')
class CalculationTestCase_29_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('435', '435')
class CalculationTestCase_29_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('464', '464')
class CalculationTestCase_29_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('493', '493')
class CalculationTestCase_29_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('522', '522')
class CalculationTestCase_29_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('551', '551')
class CalculationTestCase_29_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('580', '580')
class CalculationTestCase_29_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('609', '609')
class CalculationTestCase_29_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('638', '638')
class CalculationTestCase_29_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('667', '667')
class CalculationTestCase_29_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('696', '696')
class CalculationTestCase_29_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('725', '725')
class CalculationTestCase_29_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('754', '754')
class CalculationTestCase_29_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('783', '783')
class CalculationTestCase_29_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('812', '812')
class CalculationTestCase_29_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('841', '841')
class CalculationTestCase_29_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('870', '870')
class CalculationTestCase_29_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('899', '899')
class CalculationTestCase_29_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('928', '928')
class CalculationTestCase_29_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('957', '957')
class CalculationTestCase_29_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('986', '986')
class CalculationTestCase_29_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1015', '1015')
class CalculationTestCase_29_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1044', '1044')
class CalculationTestCase_29_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1073', '1073')
class CalculationTestCase_29_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1102', '1102')
class CalculationTestCase_29_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1131', '1131')
class CalculationTestCase_29_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1160', '1160')
class CalculationTestCase_29_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1189', '1189')
class CalculationTestCase_29_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1218', '1218')
class CalculationTestCase_29_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1247', '1247')
class CalculationTestCase_29_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1276', '1276')
class CalculationTestCase_29_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1305', '1305')
class CalculationTestCase_29_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1334', '1334')
class CalculationTestCase_29_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1363', '1363')
class CalculationTestCase_29_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1392', '1392')
class CalculationTestCase_29_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1421', '1421')
class CalculationTestCase_29_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 29
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 29 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1450', '1450')
class CalculationTestCase_30_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_30_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('30', '30')
class CalculationTestCase_30_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('60', '60')
class CalculationTestCase_30_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('90', '90')
class CalculationTestCase_30_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('120', '120')
class CalculationTestCase_30_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('150', '150')
class CalculationTestCase_30_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('180', '180')
class CalculationTestCase_30_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('210', '210')
class CalculationTestCase_30_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('240', '240')
class CalculationTestCase_30_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('270', '270')
class CalculationTestCase_30_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('300', '300')
class CalculationTestCase_30_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('330', '330')
class CalculationTestCase_30_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('360', '360')
class CalculationTestCase_30_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('390', '390')
class CalculationTestCase_30_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('420', '420')
class CalculationTestCase_30_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('450', '450')
class CalculationTestCase_30_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('480', '480')
class CalculationTestCase_30_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('510', '510')
class CalculationTestCase_30_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('540', '540')
class CalculationTestCase_30_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('570', '570')
class CalculationTestCase_30_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('600', '600')
class CalculationTestCase_30_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('630', '630')
class CalculationTestCase_30_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('660', '660')
class CalculationTestCase_30_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('690', '690')
class CalculationTestCase_30_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('720', '720')
class CalculationTestCase_30_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('750', '750')
class CalculationTestCase_30_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('780', '780')
class CalculationTestCase_30_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('810', '810')
class CalculationTestCase_30_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('840', '840')
class CalculationTestCase_30_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('870', '870')
class CalculationTestCase_30_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('900', '900')
class CalculationTestCase_30_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('930', '930')
class CalculationTestCase_30_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('960', '960')
class CalculationTestCase_30_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('990', '990')
class CalculationTestCase_30_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1020', '1020')
class CalculationTestCase_30_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1050', '1050')
class CalculationTestCase_30_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1080', '1080')
class CalculationTestCase_30_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1110', '1110')
class CalculationTestCase_30_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1140', '1140')
class CalculationTestCase_30_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1170', '1170')
class CalculationTestCase_30_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1200', '1200')
class CalculationTestCase_30_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1230', '1230')
class CalculationTestCase_30_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1260', '1260')
class CalculationTestCase_30_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1290', '1290')
class CalculationTestCase_30_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1320', '1320')
class CalculationTestCase_30_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1350', '1350')
class CalculationTestCase_30_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1380', '1380')
class CalculationTestCase_30_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1410', '1410')
class CalculationTestCase_30_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1440', '1440')
class CalculationTestCase_30_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1470', '1470')
class CalculationTestCase_30_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 30
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 30 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1500', '1500')
class CalculationTestCase_31_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_31_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('31', '31')
class CalculationTestCase_31_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('62', '62')
class CalculationTestCase_31_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('93', '93')
class CalculationTestCase_31_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('124', '124')
class CalculationTestCase_31_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('155', '155')
class CalculationTestCase_31_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('186', '186')
class CalculationTestCase_31_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('217', '217')
class CalculationTestCase_31_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('248', '248')
class CalculationTestCase_31_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('279', '279')
class CalculationTestCase_31_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('310', '310')
class CalculationTestCase_31_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('341', '341')
class CalculationTestCase_31_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('372', '372')
class CalculationTestCase_31_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('403', '403')
class CalculationTestCase_31_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('434', '434')
class CalculationTestCase_31_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('465', '465')
class CalculationTestCase_31_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('496', '496')
class CalculationTestCase_31_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('527', '527')
class CalculationTestCase_31_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('558', '558')
class CalculationTestCase_31_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('589', '589')
class CalculationTestCase_31_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('620', '620')
class CalculationTestCase_31_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('651', '651')
class CalculationTestCase_31_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('682', '682')
class CalculationTestCase_31_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('713', '713')
class CalculationTestCase_31_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('744', '744')
class CalculationTestCase_31_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('775', '775')
class CalculationTestCase_31_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('806', '806')
class CalculationTestCase_31_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('837', '837')
class CalculationTestCase_31_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('868', '868')
class CalculationTestCase_31_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('899', '899')
class CalculationTestCase_31_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('930', '930')
class CalculationTestCase_31_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('961', '961')
class CalculationTestCase_31_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('992', '992')
class CalculationTestCase_31_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1023', '1023')
class CalculationTestCase_31_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1054', '1054')
class CalculationTestCase_31_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1085', '1085')
class CalculationTestCase_31_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1116', '1116')
class CalculationTestCase_31_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1147', '1147')
class CalculationTestCase_31_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1178', '1178')
class CalculationTestCase_31_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1209', '1209')
class CalculationTestCase_31_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1240', '1240')
class CalculationTestCase_31_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1271', '1271')
class CalculationTestCase_31_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1302', '1302')
class CalculationTestCase_31_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1333', '1333')
class CalculationTestCase_31_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1364', '1364')
class CalculationTestCase_31_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1395', '1395')
class CalculationTestCase_31_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1426', '1426')
class CalculationTestCase_31_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1457', '1457')
class CalculationTestCase_31_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1488', '1488')
class CalculationTestCase_31_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1519', '1519')
class CalculationTestCase_31_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 31
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 31 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1550', '1550')
class CalculationTestCase_32_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_32_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('32', '32')
class CalculationTestCase_32_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('64', '64')
class CalculationTestCase_32_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('96', '96')
class CalculationTestCase_32_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('128', '128')
class CalculationTestCase_32_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('160', '160')
class CalculationTestCase_32_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('192', '192')
class CalculationTestCase_32_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('224', '224')
class CalculationTestCase_32_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('256', '256')
class CalculationTestCase_32_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('288', '288')
class CalculationTestCase_32_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('320', '320')
class CalculationTestCase_32_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('352', '352')
class CalculationTestCase_32_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('384', '384')
class CalculationTestCase_32_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('416', '416')
class CalculationTestCase_32_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('448', '448')
class CalculationTestCase_32_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('480', '480')
class CalculationTestCase_32_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('512', '512')
class CalculationTestCase_32_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('544', '544')
class CalculationTestCase_32_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('576', '576')
class CalculationTestCase_32_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('608', '608')
class CalculationTestCase_32_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('640', '640')
class CalculationTestCase_32_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('672', '672')
class CalculationTestCase_32_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('704', '704')
class CalculationTestCase_32_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('736', '736')
class CalculationTestCase_32_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('768', '768')
class CalculationTestCase_32_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('800', '800')
class CalculationTestCase_32_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('832', '832')
class CalculationTestCase_32_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('864', '864')
class CalculationTestCase_32_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('896', '896')
class CalculationTestCase_32_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('928', '928')
class CalculationTestCase_32_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('960', '960')
class CalculationTestCase_32_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('992', '992')
class CalculationTestCase_32_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1024', '1024')
class CalculationTestCase_32_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1056', '1056')
class CalculationTestCase_32_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1088', '1088')
class CalculationTestCase_32_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1120', '1120')
class CalculationTestCase_32_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1152', '1152')
class CalculationTestCase_32_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1184', '1184')
class CalculationTestCase_32_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1216', '1216')
class CalculationTestCase_32_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1248', '1248')
class CalculationTestCase_32_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1280', '1280')
class CalculationTestCase_32_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1312', '1312')
class CalculationTestCase_32_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1344', '1344')
class CalculationTestCase_32_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1376', '1376')
class CalculationTestCase_32_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1408', '1408')
class CalculationTestCase_32_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1440', '1440')
class CalculationTestCase_32_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1472', '1472')
class CalculationTestCase_32_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1504', '1504')
class CalculationTestCase_32_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1536', '1536')
class CalculationTestCase_32_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1568', '1568')
class CalculationTestCase_32_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 32
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 32 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1600', '1600')
class CalculationTestCase_33_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_33_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('33', '33')
class CalculationTestCase_33_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('66', '66')
class CalculationTestCase_33_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('99', '99')
class CalculationTestCase_33_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('132', '132')
class CalculationTestCase_33_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('165', '165')
class CalculationTestCase_33_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('198', '198')
class CalculationTestCase_33_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('231', '231')
class CalculationTestCase_33_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('264', '264')
class CalculationTestCase_33_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('297', '297')
class CalculationTestCase_33_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('330', '330')
class CalculationTestCase_33_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('363', '363')
class CalculationTestCase_33_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('396', '396')
class CalculationTestCase_33_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('429', '429')
class CalculationTestCase_33_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('462', '462')
class CalculationTestCase_33_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('495', '495')
class CalculationTestCase_33_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('528', '528')
class CalculationTestCase_33_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('561', '561')
class CalculationTestCase_33_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('594', '594')
class CalculationTestCase_33_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('627', '627')
class CalculationTestCase_33_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('660', '660')
class CalculationTestCase_33_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('693', '693')
class CalculationTestCase_33_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('726', '726')
class CalculationTestCase_33_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('759', '759')
class CalculationTestCase_33_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('792', '792')
class CalculationTestCase_33_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('825', '825')
class CalculationTestCase_33_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('858', '858')
class CalculationTestCase_33_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('891', '891')
class CalculationTestCase_33_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('924', '924')
class CalculationTestCase_33_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('957', '957')
class CalculationTestCase_33_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('990', '990')
class CalculationTestCase_33_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1023', '1023')
class CalculationTestCase_33_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1056', '1056')
class CalculationTestCase_33_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1089', '1089')
class CalculationTestCase_33_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1122', '1122')
class CalculationTestCase_33_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1155', '1155')
class CalculationTestCase_33_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1188', '1188')
class CalculationTestCase_33_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1221', '1221')
class CalculationTestCase_33_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1254', '1254')
class CalculationTestCase_33_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1287', '1287')
class CalculationTestCase_33_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1320', '1320')
class CalculationTestCase_33_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1353', '1353')
class CalculationTestCase_33_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1386', '1386')
class CalculationTestCase_33_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1419', '1419')
class CalculationTestCase_33_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1452', '1452')
class CalculationTestCase_33_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1485', '1485')
class CalculationTestCase_33_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1518', '1518')
class CalculationTestCase_33_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1551', '1551')
class CalculationTestCase_33_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1584', '1584')
class CalculationTestCase_33_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1617', '1617')
class CalculationTestCase_33_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 33
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 33 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1650', '1650')
class CalculationTestCase_34_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_34_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('34', '34')
class CalculationTestCase_34_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('68', '68')
class CalculationTestCase_34_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('102', '102')
class CalculationTestCase_34_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('136', '136')
class CalculationTestCase_34_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('170', '170')
class CalculationTestCase_34_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('204', '204')
class CalculationTestCase_34_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('238', '238')
class CalculationTestCase_34_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('272', '272')
class CalculationTestCase_34_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('306', '306')
class CalculationTestCase_34_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('340', '340')
class CalculationTestCase_34_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('374', '374')
class CalculationTestCase_34_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('408', '408')
class CalculationTestCase_34_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('442', '442')
class CalculationTestCase_34_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('476', '476')
class CalculationTestCase_34_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('510', '510')
class CalculationTestCase_34_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('544', '544')
class CalculationTestCase_34_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('578', '578')
class CalculationTestCase_34_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('612', '612')
class CalculationTestCase_34_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('646', '646')
class CalculationTestCase_34_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('680', '680')
class CalculationTestCase_34_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('714', '714')
class CalculationTestCase_34_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('748', '748')
class CalculationTestCase_34_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('782', '782')
class CalculationTestCase_34_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('816', '816')
class CalculationTestCase_34_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('850', '850')
class CalculationTestCase_34_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('884', '884')
class CalculationTestCase_34_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('918', '918')
class CalculationTestCase_34_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('952', '952')
class CalculationTestCase_34_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('986', '986')
class CalculationTestCase_34_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1020', '1020')
class CalculationTestCase_34_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1054', '1054')
class CalculationTestCase_34_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1088', '1088')
class CalculationTestCase_34_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1122', '1122')
class CalculationTestCase_34_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1156', '1156')
class CalculationTestCase_34_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1190', '1190')
class CalculationTestCase_34_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1224', '1224')
class CalculationTestCase_34_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1258', '1258')
class CalculationTestCase_34_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1292', '1292')
class CalculationTestCase_34_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1326', '1326')
class CalculationTestCase_34_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1360', '1360')
class CalculationTestCase_34_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1394', '1394')
class CalculationTestCase_34_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1428', '1428')
class CalculationTestCase_34_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1462', '1462')
class CalculationTestCase_34_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1496', '1496')
class CalculationTestCase_34_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1530', '1530')
class CalculationTestCase_34_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1564', '1564')
class CalculationTestCase_34_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1598', '1598')
class CalculationTestCase_34_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1632', '1632')
class CalculationTestCase_34_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1666', '1666')
class CalculationTestCase_34_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 34
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 34 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1700', '1700')
class CalculationTestCase_35_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_35_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('35', '35')
class CalculationTestCase_35_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('70', '70')
class CalculationTestCase_35_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('105', '105')
class CalculationTestCase_35_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('140', '140')
class CalculationTestCase_35_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('175', '175')
class CalculationTestCase_35_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('210', '210')
class CalculationTestCase_35_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('245', '245')
class CalculationTestCase_35_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('280', '280')
class CalculationTestCase_35_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('315', '315')
class CalculationTestCase_35_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('350', '350')
class CalculationTestCase_35_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('385', '385')
class CalculationTestCase_35_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('420', '420')
class CalculationTestCase_35_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('455', '455')
class CalculationTestCase_35_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('490', '490')
class CalculationTestCase_35_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('525', '525')
class CalculationTestCase_35_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('560', '560')
class CalculationTestCase_35_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('595', '595')
class CalculationTestCase_35_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('630', '630')
class CalculationTestCase_35_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('665', '665')
class CalculationTestCase_35_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('700', '700')
class CalculationTestCase_35_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('735', '735')
class CalculationTestCase_35_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('770', '770')
class CalculationTestCase_35_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('805', '805')
class CalculationTestCase_35_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('840', '840')
class CalculationTestCase_35_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('875', '875')
class CalculationTestCase_35_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('910', '910')
class CalculationTestCase_35_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('945', '945')
class CalculationTestCase_35_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('980', '980')
class CalculationTestCase_35_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1015', '1015')
class CalculationTestCase_35_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1050', '1050')
class CalculationTestCase_35_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1085', '1085')
class CalculationTestCase_35_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1120', '1120')
class CalculationTestCase_35_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1155', '1155')
class CalculationTestCase_35_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1190', '1190')
class CalculationTestCase_35_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1225', '1225')
class CalculationTestCase_35_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1260', '1260')
class CalculationTestCase_35_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1295', '1295')
class CalculationTestCase_35_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1330', '1330')
class CalculationTestCase_35_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1365', '1365')
class CalculationTestCase_35_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1400', '1400')
class CalculationTestCase_35_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1435', '1435')
class CalculationTestCase_35_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1470', '1470')
class CalculationTestCase_35_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1505', '1505')
class CalculationTestCase_35_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1540', '1540')
class CalculationTestCase_35_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1575', '1575')
class CalculationTestCase_35_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1610', '1610')
class CalculationTestCase_35_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1645', '1645')
class CalculationTestCase_35_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1680', '1680')
class CalculationTestCase_35_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1715', '1715')
class CalculationTestCase_35_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 35
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 35 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1750', '1750')
class CalculationTestCase_36_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_36_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('36', '36')
class CalculationTestCase_36_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('72', '72')
class CalculationTestCase_36_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('108', '108')
class CalculationTestCase_36_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('144', '144')
class CalculationTestCase_36_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('180', '180')
class CalculationTestCase_36_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('216', '216')
class CalculationTestCase_36_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('252', '252')
class CalculationTestCase_36_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('288', '288')
class CalculationTestCase_36_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('324', '324')
class CalculationTestCase_36_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('360', '360')
class CalculationTestCase_36_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('396', '396')
class CalculationTestCase_36_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('432', '432')
class CalculationTestCase_36_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('468', '468')
class CalculationTestCase_36_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('504', '504')
class CalculationTestCase_36_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('540', '540')
class CalculationTestCase_36_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('576', '576')
class CalculationTestCase_36_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('612', '612')
class CalculationTestCase_36_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('648', '648')
class CalculationTestCase_36_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('684', '684')
class CalculationTestCase_36_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('720', '720')
class CalculationTestCase_36_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('756', '756')
class CalculationTestCase_36_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('792', '792')
class CalculationTestCase_36_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('828', '828')
class CalculationTestCase_36_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('864', '864')
class CalculationTestCase_36_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('900', '900')
class CalculationTestCase_36_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('936', '936')
class CalculationTestCase_36_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('972', '972')
class CalculationTestCase_36_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1008', '1008')
class CalculationTestCase_36_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1044', '1044')
class CalculationTestCase_36_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1080', '1080')
class CalculationTestCase_36_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1116', '1116')
class CalculationTestCase_36_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1152', '1152')
class CalculationTestCase_36_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1188', '1188')
class CalculationTestCase_36_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1224', '1224')
class CalculationTestCase_36_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1260', '1260')
class CalculationTestCase_36_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1296', '1296')
class CalculationTestCase_36_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1332', '1332')
class CalculationTestCase_36_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1368', '1368')
class CalculationTestCase_36_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1404', '1404')
class CalculationTestCase_36_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1440', '1440')
class CalculationTestCase_36_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1476', '1476')
class CalculationTestCase_36_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1512', '1512')
class CalculationTestCase_36_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1548', '1548')
class CalculationTestCase_36_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1584', '1584')
class CalculationTestCase_36_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1620', '1620')
class CalculationTestCase_36_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1656', '1656')
class CalculationTestCase_36_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1692', '1692')
class CalculationTestCase_36_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1728', '1728')
class CalculationTestCase_36_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1764', '1764')
class CalculationTestCase_36_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 36
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 36 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1800', '1800')
class CalculationTestCase_37_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_37_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('37', '37')
class CalculationTestCase_37_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('74', '74')
class CalculationTestCase_37_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('111', '111')
class CalculationTestCase_37_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('148', '148')
class CalculationTestCase_37_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('185', '185')
class CalculationTestCase_37_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('222', '222')
class CalculationTestCase_37_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('259', '259')
class CalculationTestCase_37_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('296', '296')
class CalculationTestCase_37_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('333', '333')
class CalculationTestCase_37_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('370', '370')
class CalculationTestCase_37_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('407', '407')
class CalculationTestCase_37_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('444', '444')
class CalculationTestCase_37_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('481', '481')
class CalculationTestCase_37_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('518', '518')
class CalculationTestCase_37_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('555', '555')
class CalculationTestCase_37_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('592', '592')
class CalculationTestCase_37_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('629', '629')
class CalculationTestCase_37_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('666', '666')
class CalculationTestCase_37_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('703', '703')
class CalculationTestCase_37_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('740', '740')
class CalculationTestCase_37_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('777', '777')
class CalculationTestCase_37_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('814', '814')
class CalculationTestCase_37_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('851', '851')
class CalculationTestCase_37_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('888', '888')
class CalculationTestCase_37_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('925', '925')
class CalculationTestCase_37_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('962', '962')
class CalculationTestCase_37_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('999', '999')
class CalculationTestCase_37_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1036', '1036')
class CalculationTestCase_37_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1073', '1073')
class CalculationTestCase_37_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1110', '1110')
class CalculationTestCase_37_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1147', '1147')
class CalculationTestCase_37_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1184', '1184')
class CalculationTestCase_37_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1221', '1221')
class CalculationTestCase_37_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1258', '1258')
class CalculationTestCase_37_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1295', '1295')
class CalculationTestCase_37_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1332', '1332')
class CalculationTestCase_37_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1369', '1369')
class CalculationTestCase_37_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1406', '1406')
class CalculationTestCase_37_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1443', '1443')
class CalculationTestCase_37_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1480', '1480')
class CalculationTestCase_37_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1517', '1517')
class CalculationTestCase_37_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1554', '1554')
class CalculationTestCase_37_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1591', '1591')
class CalculationTestCase_37_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1628', '1628')
class CalculationTestCase_37_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1665', '1665')
class CalculationTestCase_37_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1702', '1702')
class CalculationTestCase_37_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1739', '1739')
class CalculationTestCase_37_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1776', '1776')
class CalculationTestCase_37_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1813', '1813')
class CalculationTestCase_37_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 37
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 37 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1850', '1850')
class CalculationTestCase_38_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_38_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('38', '38')
class CalculationTestCase_38_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('76', '76')
class CalculationTestCase_38_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('114', '114')
class CalculationTestCase_38_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('152', '152')
class CalculationTestCase_38_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('190', '190')
class CalculationTestCase_38_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('228', '228')
class CalculationTestCase_38_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('266', '266')
class CalculationTestCase_38_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('304', '304')
class CalculationTestCase_38_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('342', '342')
class CalculationTestCase_38_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('380', '380')
class CalculationTestCase_38_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('418', '418')
class CalculationTestCase_38_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('456', '456')
class CalculationTestCase_38_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('494', '494')
class CalculationTestCase_38_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('532', '532')
class CalculationTestCase_38_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('570', '570')
class CalculationTestCase_38_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('608', '608')
class CalculationTestCase_38_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('646', '646')
class CalculationTestCase_38_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('684', '684')
class CalculationTestCase_38_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('722', '722')
class CalculationTestCase_38_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('760', '760')
class CalculationTestCase_38_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('798', '798')
class CalculationTestCase_38_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('836', '836')
class CalculationTestCase_38_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('874', '874')
class CalculationTestCase_38_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('912', '912')
class CalculationTestCase_38_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('950', '950')
class CalculationTestCase_38_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('988', '988')
class CalculationTestCase_38_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1026', '1026')
class CalculationTestCase_38_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1064', '1064')
class CalculationTestCase_38_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1102', '1102')
class CalculationTestCase_38_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1140', '1140')
class CalculationTestCase_38_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1178', '1178')
class CalculationTestCase_38_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1216', '1216')
class CalculationTestCase_38_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1254', '1254')
class CalculationTestCase_38_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1292', '1292')
class CalculationTestCase_38_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1330', '1330')
class CalculationTestCase_38_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1368', '1368')
class CalculationTestCase_38_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1406', '1406')
class CalculationTestCase_38_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1444', '1444')
class CalculationTestCase_38_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1482', '1482')
class CalculationTestCase_38_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1520', '1520')
class CalculationTestCase_38_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1558', '1558')
class CalculationTestCase_38_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1596', '1596')
class CalculationTestCase_38_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1634', '1634')
class CalculationTestCase_38_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1672', '1672')
class CalculationTestCase_38_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1710', '1710')
class CalculationTestCase_38_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1748', '1748')
class CalculationTestCase_38_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1786', '1786')
class CalculationTestCase_38_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1824', '1824')
class CalculationTestCase_38_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1862', '1862')
class CalculationTestCase_38_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 38
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 38 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1900', '1900')
class CalculationTestCase_39_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_39_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('39', '39')
class CalculationTestCase_39_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('78', '78')
class CalculationTestCase_39_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('117', '117')
class CalculationTestCase_39_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('156', '156')
class CalculationTestCase_39_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('195', '195')
class CalculationTestCase_39_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('234', '234')
class CalculationTestCase_39_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('273', '273')
class CalculationTestCase_39_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('312', '312')
class CalculationTestCase_39_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('351', '351')
class CalculationTestCase_39_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('390', '390')
class CalculationTestCase_39_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('429', '429')
class CalculationTestCase_39_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('468', '468')
class CalculationTestCase_39_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('507', '507')
class CalculationTestCase_39_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('546', '546')
class CalculationTestCase_39_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('585', '585')
class CalculationTestCase_39_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('624', '624')
class CalculationTestCase_39_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('663', '663')
class CalculationTestCase_39_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('702', '702')
class CalculationTestCase_39_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('741', '741')
class CalculationTestCase_39_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('780', '780')
class CalculationTestCase_39_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('819', '819')
class CalculationTestCase_39_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('858', '858')
class CalculationTestCase_39_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('897', '897')
class CalculationTestCase_39_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('936', '936')
class CalculationTestCase_39_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('975', '975')
class CalculationTestCase_39_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1014', '1014')
class CalculationTestCase_39_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1053', '1053')
class CalculationTestCase_39_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1092', '1092')
class CalculationTestCase_39_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1131', '1131')
class CalculationTestCase_39_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1170', '1170')
class CalculationTestCase_39_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1209', '1209')
class CalculationTestCase_39_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1248', '1248')
class CalculationTestCase_39_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1287', '1287')
class CalculationTestCase_39_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1326', '1326')
class CalculationTestCase_39_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1365', '1365')
class CalculationTestCase_39_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1404', '1404')
class CalculationTestCase_39_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1443', '1443')
class CalculationTestCase_39_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1482', '1482')
class CalculationTestCase_39_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1521', '1521')
class CalculationTestCase_39_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1560', '1560')
class CalculationTestCase_39_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1599', '1599')
class CalculationTestCase_39_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1638', '1638')
class CalculationTestCase_39_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1677', '1677')
class CalculationTestCase_39_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1716', '1716')
class CalculationTestCase_39_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1755', '1755')
class CalculationTestCase_39_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1794', '1794')
class CalculationTestCase_39_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1833', '1833')
class CalculationTestCase_39_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1872', '1872')
class CalculationTestCase_39_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1911', '1911')
class CalculationTestCase_39_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 39
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 39 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('1950', '1950')
class CalculationTestCase_40_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_40_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('40', '40')
class CalculationTestCase_40_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('80', '80')
class CalculationTestCase_40_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('120', '120')
class CalculationTestCase_40_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('160', '160')
class CalculationTestCase_40_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('200', '200')
class CalculationTestCase_40_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('240', '240')
class CalculationTestCase_40_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('280', '280')
class CalculationTestCase_40_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('320', '320')
class CalculationTestCase_40_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('360', '360')
class CalculationTestCase_40_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('400', '400')
class CalculationTestCase_40_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('440', '440')
class CalculationTestCase_40_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('480', '480')
class CalculationTestCase_40_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('520', '520')
class CalculationTestCase_40_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('560', '560')
class CalculationTestCase_40_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('600', '600')
class CalculationTestCase_40_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('640', '640')
class CalculationTestCase_40_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('680', '680')
class CalculationTestCase_40_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('720', '720')
class CalculationTestCase_40_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('760', '760')
class CalculationTestCase_40_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('800', '800')
class CalculationTestCase_40_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('840', '840')
class CalculationTestCase_40_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('880', '880')
class CalculationTestCase_40_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('920', '920')
class CalculationTestCase_40_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('960', '960')
class CalculationTestCase_40_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('1000', '1000')
class CalculationTestCase_40_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1040', '1040')
class CalculationTestCase_40_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1080', '1080')
class CalculationTestCase_40_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1120', '1120')
class CalculationTestCase_40_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1160', '1160')
class CalculationTestCase_40_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1200', '1200')
class CalculationTestCase_40_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1240', '1240')
class CalculationTestCase_40_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1280', '1280')
class CalculationTestCase_40_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1320', '1320')
class CalculationTestCase_40_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1360', '1360')
class CalculationTestCase_40_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1400', '1400')
class CalculationTestCase_40_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1440', '1440')
class CalculationTestCase_40_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1480', '1480')
class CalculationTestCase_40_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1520', '1520')
class CalculationTestCase_40_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1560', '1560')
class CalculationTestCase_40_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1600', '1600')
class CalculationTestCase_40_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1640', '1640')
class CalculationTestCase_40_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1680', '1680')
class CalculationTestCase_40_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1720', '1720')
class CalculationTestCase_40_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1760', '1760')
class CalculationTestCase_40_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1800', '1800')
class CalculationTestCase_40_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1840', '1840')
class CalculationTestCase_40_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1880', '1880')
class CalculationTestCase_40_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1920', '1920')
class CalculationTestCase_40_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('1960', '1960')
class CalculationTestCase_40_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 40
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 40 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('2000', '2000')
class CalculationTestCase_41_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_41_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('41', '41')
class CalculationTestCase_41_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('82', '82')
class CalculationTestCase_41_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('123', '123')
class CalculationTestCase_41_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('164', '164')
class CalculationTestCase_41_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('205', '205')
class CalculationTestCase_41_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('246', '246')
class CalculationTestCase_41_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('287', '287')
class CalculationTestCase_41_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('328', '328')
class CalculationTestCase_41_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('369', '369')
class CalculationTestCase_41_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('410', '410')
class CalculationTestCase_41_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('451', '451')
class CalculationTestCase_41_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('492', '492')
class CalculationTestCase_41_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('533', '533')
class CalculationTestCase_41_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('574', '574')
class CalculationTestCase_41_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('615', '615')
class CalculationTestCase_41_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('656', '656')
class CalculationTestCase_41_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('697', '697')
class CalculationTestCase_41_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('738', '738')
class CalculationTestCase_41_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('779', '779')
class CalculationTestCase_41_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('820', '820')
class CalculationTestCase_41_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('861', '861')
class CalculationTestCase_41_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('902', '902')
class CalculationTestCase_41_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('943', '943')
class CalculationTestCase_41_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('984', '984')
class CalculationTestCase_41_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('1025', '1025')
class CalculationTestCase_41_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1066', '1066')
class CalculationTestCase_41_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1107', '1107')
class CalculationTestCase_41_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1148', '1148')
class CalculationTestCase_41_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1189', '1189')
class CalculationTestCase_41_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1230', '1230')
class CalculationTestCase_41_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1271', '1271')
class CalculationTestCase_41_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1312', '1312')
class CalculationTestCase_41_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1353', '1353')
class CalculationTestCase_41_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1394', '1394')
class CalculationTestCase_41_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1435', '1435')
class CalculationTestCase_41_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1476', '1476')
class CalculationTestCase_41_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1517', '1517')
class CalculationTestCase_41_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1558', '1558')
class CalculationTestCase_41_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1599', '1599')
class CalculationTestCase_41_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1640', '1640')
class CalculationTestCase_41_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1681', '1681')
class CalculationTestCase_41_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1722', '1722')
class CalculationTestCase_41_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1763', '1763')
class CalculationTestCase_41_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1804', '1804')
class CalculationTestCase_41_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1845', '1845')
class CalculationTestCase_41_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1886', '1886')
class CalculationTestCase_41_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1927', '1927')
class CalculationTestCase_41_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('1968', '1968')
class CalculationTestCase_41_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('2009', '2009')
class CalculationTestCase_41_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 41
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 41 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('2050', '2050')
class CalculationTestCase_42_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_42_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('42', '42')
class CalculationTestCase_42_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('84', '84')
class CalculationTestCase_42_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('126', '126')
class CalculationTestCase_42_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('168', '168')
class CalculationTestCase_42_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('210', '210')
class CalculationTestCase_42_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('252', '252')
class CalculationTestCase_42_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('294', '294')
class CalculationTestCase_42_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('336', '336')
class CalculationTestCase_42_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('378', '378')
class CalculationTestCase_42_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('420', '420')
class CalculationTestCase_42_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('462', '462')
class CalculationTestCase_42_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('504', '504')
class CalculationTestCase_42_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('546', '546')
class CalculationTestCase_42_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('588', '588')
class CalculationTestCase_42_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('630', '630')
class CalculationTestCase_42_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('672', '672')
class CalculationTestCase_42_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('714', '714')
class CalculationTestCase_42_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('756', '756')
class CalculationTestCase_42_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('798', '798')
class CalculationTestCase_42_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('840', '840')
class CalculationTestCase_42_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('882', '882')
class CalculationTestCase_42_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('924', '924')
class CalculationTestCase_42_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('966', '966')
class CalculationTestCase_42_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('1008', '1008')
class CalculationTestCase_42_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('1050', '1050')
class CalculationTestCase_42_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1092', '1092')
class CalculationTestCase_42_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1134', '1134')
class CalculationTestCase_42_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1176', '1176')
class CalculationTestCase_42_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1218', '1218')
class CalculationTestCase_42_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1260', '1260')
class CalculationTestCase_42_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1302', '1302')
class CalculationTestCase_42_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1344', '1344')
class CalculationTestCase_42_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1386', '1386')
class CalculationTestCase_42_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1428', '1428')
class CalculationTestCase_42_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1470', '1470')
class CalculationTestCase_42_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1512', '1512')
class CalculationTestCase_42_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1554', '1554')
class CalculationTestCase_42_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1596', '1596')
class CalculationTestCase_42_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1638', '1638')
class CalculationTestCase_42_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1680', '1680')
class CalculationTestCase_42_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1722', '1722')
class CalculationTestCase_42_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1764', '1764')
class CalculationTestCase_42_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1806', '1806')
class CalculationTestCase_42_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1848', '1848')
class CalculationTestCase_42_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1890', '1890')
class CalculationTestCase_42_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1932', '1932')
class CalculationTestCase_42_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('1974', '1974')
class CalculationTestCase_42_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('2016', '2016')
class CalculationTestCase_42_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('2058', '2058')
class CalculationTestCase_42_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 42
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 42 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('2100', '2100')
class CalculationTestCase_43_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_43_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('43', '43')
class CalculationTestCase_43_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('86', '86')
class CalculationTestCase_43_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('129', '129')
class CalculationTestCase_43_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('172', '172')
class CalculationTestCase_43_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('215', '215')
class CalculationTestCase_43_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('258', '258')
class CalculationTestCase_43_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('301', '301')
class CalculationTestCase_43_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('344', '344')
class CalculationTestCase_43_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('387', '387')
class CalculationTestCase_43_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('430', '430')
class CalculationTestCase_43_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('473', '473')
class CalculationTestCase_43_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('516', '516')
class CalculationTestCase_43_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('559', '559')
class CalculationTestCase_43_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('602', '602')
class CalculationTestCase_43_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('645', '645')
class CalculationTestCase_43_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('688', '688')
class CalculationTestCase_43_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('731', '731')
class CalculationTestCase_43_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('774', '774')
class CalculationTestCase_43_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('817', '817')
class CalculationTestCase_43_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('860', '860')
class CalculationTestCase_43_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('903', '903')
class CalculationTestCase_43_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('946', '946')
class CalculationTestCase_43_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('989', '989')
class CalculationTestCase_43_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('1032', '1032')
class CalculationTestCase_43_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('1075', '1075')
class CalculationTestCase_43_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1118', '1118')
class CalculationTestCase_43_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1161', '1161')
class CalculationTestCase_43_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1204', '1204')
class CalculationTestCase_43_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1247', '1247')
class CalculationTestCase_43_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1290', '1290')
class CalculationTestCase_43_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1333', '1333')
class CalculationTestCase_43_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1376', '1376')
class CalculationTestCase_43_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1419', '1419')
class CalculationTestCase_43_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1462', '1462')
class CalculationTestCase_43_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1505', '1505')
class CalculationTestCase_43_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1548', '1548')
class CalculationTestCase_43_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1591', '1591')
class CalculationTestCase_43_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1634', '1634')
class CalculationTestCase_43_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1677', '1677')
class CalculationTestCase_43_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1720', '1720')
class CalculationTestCase_43_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1763', '1763')
class CalculationTestCase_43_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1806', '1806')
class CalculationTestCase_43_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1849', '1849')
class CalculationTestCase_43_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1892', '1892')
class CalculationTestCase_43_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1935', '1935')
class CalculationTestCase_43_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('1978', '1978')
class CalculationTestCase_43_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('2021', '2021')
class CalculationTestCase_43_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('2064', '2064')
class CalculationTestCase_43_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('2107', '2107')
class CalculationTestCase_43_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 43
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 43 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('2150', '2150')
class CalculationTestCase_44_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_44_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('44', '44')
class CalculationTestCase_44_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('88', '88')
class CalculationTestCase_44_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('132', '132')
class CalculationTestCase_44_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('176', '176')
class CalculationTestCase_44_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('220', '220')
class CalculationTestCase_44_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('264', '264')
class CalculationTestCase_44_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('308', '308')
class CalculationTestCase_44_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('352', '352')
class CalculationTestCase_44_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('396', '396')
class CalculationTestCase_44_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('440', '440')
class CalculationTestCase_44_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('484', '484')
class CalculationTestCase_44_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('528', '528')
class CalculationTestCase_44_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('572', '572')
class CalculationTestCase_44_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('616', '616')
class CalculationTestCase_44_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('660', '660')
class CalculationTestCase_44_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('704', '704')
class CalculationTestCase_44_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('748', '748')
class CalculationTestCase_44_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('792', '792')
class CalculationTestCase_44_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('836', '836')
class CalculationTestCase_44_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('880', '880')
class CalculationTestCase_44_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('924', '924')
class CalculationTestCase_44_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('968', '968')
class CalculationTestCase_44_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('1012', '1012')
class CalculationTestCase_44_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('1056', '1056')
class CalculationTestCase_44_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('1100', '1100')
class CalculationTestCase_44_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1144', '1144')
class CalculationTestCase_44_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1188', '1188')
class CalculationTestCase_44_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1232', '1232')
class CalculationTestCase_44_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1276', '1276')
class CalculationTestCase_44_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1320', '1320')
class CalculationTestCase_44_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1364', '1364')
class CalculationTestCase_44_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1408', '1408')
class CalculationTestCase_44_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1452', '1452')
class CalculationTestCase_44_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1496', '1496')
class CalculationTestCase_44_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1540', '1540')
class CalculationTestCase_44_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1584', '1584')
class CalculationTestCase_44_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1628', '1628')
class CalculationTestCase_44_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1672', '1672')
class CalculationTestCase_44_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1716', '1716')
class CalculationTestCase_44_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1760', '1760')
class CalculationTestCase_44_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1804', '1804')
class CalculationTestCase_44_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1848', '1848')
class CalculationTestCase_44_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1892', '1892')
class CalculationTestCase_44_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1936', '1936')
class CalculationTestCase_44_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('1980', '1980')
class CalculationTestCase_44_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('2024', '2024')
class CalculationTestCase_44_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('2068', '2068')
class CalculationTestCase_44_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('2112', '2112')
class CalculationTestCase_44_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('2156', '2156')
class CalculationTestCase_44_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 44
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 44 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('2200', '2200')
class CalculationTestCase_45_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_45_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('45', '45')
class CalculationTestCase_45_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('90', '90')
class CalculationTestCase_45_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('135', '135')
class CalculationTestCase_45_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('180', '180')
class CalculationTestCase_45_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('225', '225')
class CalculationTestCase_45_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('270', '270')
class CalculationTestCase_45_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('315', '315')
class CalculationTestCase_45_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('360', '360')
class CalculationTestCase_45_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('405', '405')
class CalculationTestCase_45_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('450', '450')
class CalculationTestCase_45_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('495', '495')
class CalculationTestCase_45_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('540', '540')
class CalculationTestCase_45_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('585', '585')
class CalculationTestCase_45_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('630', '630')
class CalculationTestCase_45_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('675', '675')
class CalculationTestCase_45_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('720', '720')
class CalculationTestCase_45_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('765', '765')
class CalculationTestCase_45_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('810', '810')
class CalculationTestCase_45_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('855', '855')
class CalculationTestCase_45_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('900', '900')
class CalculationTestCase_45_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('945', '945')
class CalculationTestCase_45_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('990', '990')
class CalculationTestCase_45_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('1035', '1035')
class CalculationTestCase_45_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('1080', '1080')
class CalculationTestCase_45_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('1125', '1125')
class CalculationTestCase_45_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1170', '1170')
class CalculationTestCase_45_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1215', '1215')
class CalculationTestCase_45_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1260', '1260')
class CalculationTestCase_45_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1305', '1305')
class CalculationTestCase_45_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1350', '1350')
class CalculationTestCase_45_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1395', '1395')
class CalculationTestCase_45_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1440', '1440')
class CalculationTestCase_45_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1485', '1485')
class CalculationTestCase_45_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1530', '1530')
class CalculationTestCase_45_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1575', '1575')
class CalculationTestCase_45_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1620', '1620')
class CalculationTestCase_45_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1665', '1665')
class CalculationTestCase_45_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1710', '1710')
class CalculationTestCase_45_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1755', '1755')
class CalculationTestCase_45_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1800', '1800')
class CalculationTestCase_45_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1845', '1845')
class CalculationTestCase_45_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1890', '1890')
class CalculationTestCase_45_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1935', '1935')
class CalculationTestCase_45_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('1980', '1980')
class CalculationTestCase_45_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('2025', '2025')
class CalculationTestCase_45_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('2070', '2070')
class CalculationTestCase_45_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('2115', '2115')
class CalculationTestCase_45_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('2160', '2160')
class CalculationTestCase_45_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('2205', '2205')
class CalculationTestCase_45_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 45
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 45 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('2250', '2250')
class CalculationTestCase_46_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_46_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('46', '46')
class CalculationTestCase_46_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('92', '92')
class CalculationTestCase_46_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('138', '138')
class CalculationTestCase_46_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('184', '184')
class CalculationTestCase_46_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('230', '230')
class CalculationTestCase_46_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('276', '276')
class CalculationTestCase_46_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('322', '322')
class CalculationTestCase_46_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('368', '368')
class CalculationTestCase_46_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('414', '414')
class CalculationTestCase_46_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('460', '460')
class CalculationTestCase_46_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('506', '506')
class CalculationTestCase_46_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('552', '552')
class CalculationTestCase_46_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('598', '598')
class CalculationTestCase_46_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('644', '644')
class CalculationTestCase_46_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('690', '690')
class CalculationTestCase_46_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('736', '736')
class CalculationTestCase_46_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('782', '782')
class CalculationTestCase_46_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('828', '828')
class CalculationTestCase_46_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('874', '874')
class CalculationTestCase_46_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('920', '920')
class CalculationTestCase_46_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('966', '966')
class CalculationTestCase_46_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('1012', '1012')
class CalculationTestCase_46_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('1058', '1058')
class CalculationTestCase_46_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('1104', '1104')
class CalculationTestCase_46_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('1150', '1150')
class CalculationTestCase_46_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1196', '1196')
class CalculationTestCase_46_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1242', '1242')
class CalculationTestCase_46_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1288', '1288')
class CalculationTestCase_46_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1334', '1334')
class CalculationTestCase_46_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1380', '1380')
class CalculationTestCase_46_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1426', '1426')
class CalculationTestCase_46_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1472', '1472')
class CalculationTestCase_46_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1518', '1518')
class CalculationTestCase_46_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1564', '1564')
class CalculationTestCase_46_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1610', '1610')
class CalculationTestCase_46_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1656', '1656')
class CalculationTestCase_46_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1702', '1702')
class CalculationTestCase_46_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1748', '1748')
class CalculationTestCase_46_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1794', '1794')
class CalculationTestCase_46_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1840', '1840')
class CalculationTestCase_46_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1886', '1886')
class CalculationTestCase_46_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1932', '1932')
class CalculationTestCase_46_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('1978', '1978')
class CalculationTestCase_46_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('2024', '2024')
class CalculationTestCase_46_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('2070', '2070')
class CalculationTestCase_46_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('2116', '2116')
class CalculationTestCase_46_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('2162', '2162')
class CalculationTestCase_46_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('2208', '2208')
class CalculationTestCase_46_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('2254', '2254')
class CalculationTestCase_46_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 46
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 46 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('2300', '2300')
class CalculationTestCase_47_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_47_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('47', '47')
class CalculationTestCase_47_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('94', '94')
class CalculationTestCase_47_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('141', '141')
class CalculationTestCase_47_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('188', '188')
class CalculationTestCase_47_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('235', '235')
class CalculationTestCase_47_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('282', '282')
class CalculationTestCase_47_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('329', '329')
class CalculationTestCase_47_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('376', '376')
class CalculationTestCase_47_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('423', '423')
class CalculationTestCase_47_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('470', '470')
class CalculationTestCase_47_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('517', '517')
class CalculationTestCase_47_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('564', '564')
class CalculationTestCase_47_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('611', '611')
class CalculationTestCase_47_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('658', '658')
class CalculationTestCase_47_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('705', '705')
class CalculationTestCase_47_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('752', '752')
class CalculationTestCase_47_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('799', '799')
class CalculationTestCase_47_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('846', '846')
class CalculationTestCase_47_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('893', '893')
class CalculationTestCase_47_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('940', '940')
class CalculationTestCase_47_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('987', '987')
class CalculationTestCase_47_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('1034', '1034')
class CalculationTestCase_47_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('1081', '1081')
class CalculationTestCase_47_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('1128', '1128')
class CalculationTestCase_47_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('1175', '1175')
class CalculationTestCase_47_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1222', '1222')
class CalculationTestCase_47_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1269', '1269')
class CalculationTestCase_47_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1316', '1316')
class CalculationTestCase_47_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1363', '1363')
class CalculationTestCase_47_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1410', '1410')
class CalculationTestCase_47_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1457', '1457')
class CalculationTestCase_47_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1504', '1504')
class CalculationTestCase_47_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1551', '1551')
class CalculationTestCase_47_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1598', '1598')
class CalculationTestCase_47_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1645', '1645')
class CalculationTestCase_47_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1692', '1692')
class CalculationTestCase_47_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1739', '1739')
class CalculationTestCase_47_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1786', '1786')
class CalculationTestCase_47_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1833', '1833')
class CalculationTestCase_47_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1880', '1880')
class CalculationTestCase_47_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1927', '1927')
class CalculationTestCase_47_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('1974', '1974')
class CalculationTestCase_47_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('2021', '2021')
class CalculationTestCase_47_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('2068', '2068')
class CalculationTestCase_47_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('2115', '2115')
class CalculationTestCase_47_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('2162', '2162')
class CalculationTestCase_47_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('2209', '2209')
class CalculationTestCase_47_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('2256', '2256')
class CalculationTestCase_47_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('2303', '2303')
class CalculationTestCase_47_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 47
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 47 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('2350', '2350')
class CalculationTestCase_48_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_48_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('48', '48')
class CalculationTestCase_48_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('96', '96')
class CalculationTestCase_48_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('144', '144')
class CalculationTestCase_48_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('192', '192')
class CalculationTestCase_48_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('240', '240')
class CalculationTestCase_48_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('288', '288')
class CalculationTestCase_48_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('336', '336')
class CalculationTestCase_48_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('384', '384')
class CalculationTestCase_48_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('432', '432')
class CalculationTestCase_48_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('480', '480')
class CalculationTestCase_48_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('528', '528')
class CalculationTestCase_48_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('576', '576')
class CalculationTestCase_48_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('624', '624')
class CalculationTestCase_48_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('672', '672')
class CalculationTestCase_48_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('720', '720')
class CalculationTestCase_48_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('768', '768')
class CalculationTestCase_48_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('816', '816')
class CalculationTestCase_48_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('864', '864')
class CalculationTestCase_48_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('912', '912')
class CalculationTestCase_48_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('960', '960')
class CalculationTestCase_48_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('1008', '1008')
class CalculationTestCase_48_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('1056', '1056')
class CalculationTestCase_48_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('1104', '1104')
class CalculationTestCase_48_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('1152', '1152')
class CalculationTestCase_48_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('1200', '1200')
class CalculationTestCase_48_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1248', '1248')
class CalculationTestCase_48_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1296', '1296')
class CalculationTestCase_48_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1344', '1344')
class CalculationTestCase_48_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1392', '1392')
class CalculationTestCase_48_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1440', '1440')
class CalculationTestCase_48_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1488', '1488')
class CalculationTestCase_48_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1536', '1536')
class CalculationTestCase_48_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1584', '1584')
class CalculationTestCase_48_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1632', '1632')
class CalculationTestCase_48_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1680', '1680')
class CalculationTestCase_48_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1728', '1728')
class CalculationTestCase_48_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1776', '1776')
class CalculationTestCase_48_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1824', '1824')
class CalculationTestCase_48_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1872', '1872')
class CalculationTestCase_48_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1920', '1920')
class CalculationTestCase_48_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('1968', '1968')
class CalculationTestCase_48_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('2016', '2016')
class CalculationTestCase_48_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('2064', '2064')
class CalculationTestCase_48_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('2112', '2112')
class CalculationTestCase_48_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('2160', '2160')
class CalculationTestCase_48_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('2208', '2208')
class CalculationTestCase_48_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('2256', '2256')
class CalculationTestCase_48_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('2304', '2304')
class CalculationTestCase_48_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('2352', '2352')
class CalculationTestCase_48_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 48
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 48 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('2400', '2400')
class CalculationTestCase_49_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_49_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('49', '49')
class CalculationTestCase_49_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('98', '98')
class CalculationTestCase_49_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('147', '147')
class CalculationTestCase_49_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('196', '196')
class CalculationTestCase_49_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('245', '245')
class CalculationTestCase_49_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('294', '294')
class CalculationTestCase_49_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('343', '343')
class CalculationTestCase_49_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('392', '392')
class CalculationTestCase_49_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('441', '441')
class CalculationTestCase_49_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('490', '490')
class CalculationTestCase_49_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('539', '539')
class CalculationTestCase_49_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('588', '588')
class CalculationTestCase_49_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('637', '637')
class CalculationTestCase_49_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('686', '686')
class CalculationTestCase_49_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('735', '735')
class CalculationTestCase_49_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('784', '784')
class CalculationTestCase_49_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('833', '833')
class CalculationTestCase_49_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('882', '882')
class CalculationTestCase_49_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('931', '931')
class CalculationTestCase_49_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('980', '980')
class CalculationTestCase_49_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('1029', '1029')
class CalculationTestCase_49_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('1078', '1078')
class CalculationTestCase_49_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('1127', '1127')
class CalculationTestCase_49_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('1176', '1176')
class CalculationTestCase_49_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('1225', '1225')
class CalculationTestCase_49_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1274', '1274')
class CalculationTestCase_49_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1323', '1323')
class CalculationTestCase_49_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1372', '1372')
class CalculationTestCase_49_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1421', '1421')
class CalculationTestCase_49_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1470', '1470')
class CalculationTestCase_49_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1519', '1519')
class CalculationTestCase_49_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1568', '1568')
class CalculationTestCase_49_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1617', '1617')
class CalculationTestCase_49_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1666', '1666')
class CalculationTestCase_49_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1715', '1715')
class CalculationTestCase_49_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1764', '1764')
class CalculationTestCase_49_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1813', '1813')
class CalculationTestCase_49_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1862', '1862')
class CalculationTestCase_49_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1911', '1911')
class CalculationTestCase_49_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('1960', '1960')
class CalculationTestCase_49_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('2009', '2009')
class CalculationTestCase_49_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('2058', '2058')
class CalculationTestCase_49_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('2107', '2107')
class CalculationTestCase_49_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('2156', '2156')
class CalculationTestCase_49_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('2205', '2205')
class CalculationTestCase_49_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('2254', '2254')
class CalculationTestCase_49_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('2303', '2303')
class CalculationTestCase_49_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('2352', '2352')
class CalculationTestCase_49_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('2401', '2401')
class CalculationTestCase_49_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 49
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 49 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('2450', '2450')
class CalculationTestCase_50_multiplication_0(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 0
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 0:
            self.assertEqual('0', '0')
class CalculationTestCase_50_multiplication_1(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 1
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 1:
            self.assertEqual('50', '50')
class CalculationTestCase_50_multiplication_2(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 2
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 2:
            self.assertEqual('100', '100')
class CalculationTestCase_50_multiplication_3(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 3
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 3:
            self.assertEqual('150', '150')
class CalculationTestCase_50_multiplication_4(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 4
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 4:
            self.assertEqual('200', '200')
class CalculationTestCase_50_multiplication_5(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 5
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 5:
            self.assertEqual('250', '250')
class CalculationTestCase_50_multiplication_6(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 6
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 6:
            self.assertEqual('300', '300')
class CalculationTestCase_50_multiplication_7(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 7
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 7:
            self.assertEqual('350', '350')
class CalculationTestCase_50_multiplication_8(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 8
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 8:
            self.assertEqual('400', '400')
class CalculationTestCase_50_multiplication_9(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 9
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 9:
            self.assertEqual('450', '450')
class CalculationTestCase_50_multiplication_10(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 10
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 10:
            self.assertEqual('500', '500')
class CalculationTestCase_50_multiplication_11(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 11
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 11:
            self.assertEqual('550', '550')
class CalculationTestCase_50_multiplication_12(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 12
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 12:
            self.assertEqual('600', '600')
class CalculationTestCase_50_multiplication_13(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 13
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 13:
            self.assertEqual('650', '650')
class CalculationTestCase_50_multiplication_14(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 14
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 14:
            self.assertEqual('700', '700')
class CalculationTestCase_50_multiplication_15(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 15
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 15:
            self.assertEqual('750', '750')
class CalculationTestCase_50_multiplication_16(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 16
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 16:
            self.assertEqual('800', '800')
class CalculationTestCase_50_multiplication_17(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 17
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 17:
            self.assertEqual('850', '850')
class CalculationTestCase_50_multiplication_18(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 18
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 18:
            self.assertEqual('900', '900')
class CalculationTestCase_50_multiplication_19(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 19
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 19:
            self.assertEqual('950', '950')
class CalculationTestCase_50_multiplication_20(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 20
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 20:
            self.assertEqual('1000', '1000')
class CalculationTestCase_50_multiplication_21(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 21
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 21:
            self.assertEqual('1050', '1050')
class CalculationTestCase_50_multiplication_22(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 22
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 22:
            self.assertEqual('1100', '1100')
class CalculationTestCase_50_multiplication_23(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 23
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 23:
            self.assertEqual('1150', '1150')
class CalculationTestCase_50_multiplication_24(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 24
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 24:
            self.assertEqual('1200', '1200')
class CalculationTestCase_50_multiplication_25(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 25
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 25:
            self.assertEqual('1250', '1250')
class CalculationTestCase_50_multiplication_26(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 26
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 26:
            self.assertEqual('1300', '1300')
class CalculationTestCase_50_multiplication_27(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 27
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 27:
            self.assertEqual('1350', '1350')
class CalculationTestCase_50_multiplication_28(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 28
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 28:
            self.assertEqual('1400', '1400')
class CalculationTestCase_50_multiplication_29(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 29
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 29:
            self.assertEqual('1450', '1450')
class CalculationTestCase_50_multiplication_30(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 30
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 30:
            self.assertEqual('1500', '1500')
class CalculationTestCase_50_multiplication_31(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 31
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 31:
            self.assertEqual('1550', '1550')
class CalculationTestCase_50_multiplication_32(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 32
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 32:
            self.assertEqual('1600', '1600')
class CalculationTestCase_50_multiplication_33(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 33
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 33:
            self.assertEqual('1650', '1650')
class CalculationTestCase_50_multiplication_34(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 34
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 34:
            self.assertEqual('1700', '1700')
class CalculationTestCase_50_multiplication_35(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 35
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 35:
            self.assertEqual('1750', '1750')
class CalculationTestCase_50_multiplication_36(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 36
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 36:
            self.assertEqual('1800', '1800')
class CalculationTestCase_50_multiplication_37(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 37
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 37:
            self.assertEqual('1850', '1850')
class CalculationTestCase_50_multiplication_38(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 38
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 38:
            self.assertEqual('1900', '1900')
class CalculationTestCase_50_multiplication_39(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 39
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 39:
            self.assertEqual('1950', '1950')
class CalculationTestCase_50_multiplication_40(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 40
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 40:
            self.assertEqual('2000', '2000')
class CalculationTestCase_50_multiplication_41(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 41
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 41:
            self.assertEqual('2050', '2050')
class CalculationTestCase_50_multiplication_42(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 42
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 42:
            self.assertEqual('2100', '2100')
class CalculationTestCase_50_multiplication_43(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 43
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 43:
            self.assertEqual('2150', '2150')
class CalculationTestCase_50_multiplication_44(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 44
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 44:
            self.assertEqual('2200', '2200')
class CalculationTestCase_50_multiplication_45(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 45
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 45:
            self.assertEqual('2250', '2250')
class CalculationTestCase_50_multiplication_46(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 46
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 46:
            self.assertEqual('2300', '2300')
class CalculationTestCase_50_multiplication_47(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 47
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 47:
            self.assertEqual('2350', '2350')
class CalculationTestCase_50_multiplication_48(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 48
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 48:
            self.assertEqual('2400', '2400')
class CalculationTestCase_50_multiplication_49(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 49
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 49:
            self.assertEqual('2450', '2450')
class CalculationTestCase_50_multiplication_50(unittest.TestCase):
    def test_calculation(self):
        self.num1 = 50
        self.num2 = 50
        self.sign = '*'
        if self.num1 == 50 and self.sign == '*' and self.num2 == 50:
            self.assertEqual('2500', '2500')


if __name__ == '__main__':
    unittest.main()